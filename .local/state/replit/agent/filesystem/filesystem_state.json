{"file_contents":{"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ScreenshotProtection.tsx":{"content":"import { useEffect } from 'react';\n\ninterface ScreenshotProtectionProps {\n  children: React.ReactNode;\n  enabled?: boolean;\n}\n\nexport function ScreenshotProtection({ children, enabled = true }: ScreenshotProtectionProps) {\n  useEffect(() => {\n    if (!enabled) return;\n\n    const protectionOverlay = document.createElement('div');\n    protectionOverlay.className = 'screenshot-protection-watermark';\n    protectionOverlay.innerHTML = `\n      <div style=\"\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n        z-index: 9999;\n        display: flex;\n        flex-wrap: wrap;\n        opacity: 0.05;\n      \">\n        ${Array.from({ length: 50 }).map((_, i) => `\n          <div style=\"\n            flex: 1 1 20%;\n            text-align: center;\n            font-size: 24px;\n            color: #000;\n            transform: rotate(-45deg);\n            padding: 20px;\n          \">CONFIDENTIAL - DO NOT SHARE</div>\n        `).join('')}\n      </div>\n    `;\n    document.body.appendChild(protectionOverlay);\n\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        document.body.style.filter = 'blur(20px)';\n      } else {\n        document.body.style.filter = 'none';\n      }\n    };\n\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (\n        (e.key === 'PrintScreen') ||\n        (e.metaKey && e.shiftKey && (e.key === '3' || e.key === '4' || e.key === '5')) ||\n        (e.ctrlKey && e.shiftKey && e.key === 'S')\n      ) {\n        e.preventDefault();\n        document.body.style.filter = 'blur(20px)';\n        setTimeout(() => {\n          document.body.style.filter = 'none';\n        }, 500);\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    document.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      document.removeEventListener('keydown', handleKeyPress);\n      document.body.removeChild(protectionOverlay);\n      document.body.style.filter = 'none';\n    };\n  }, [enabled]);\n\n  return <>{children}</>;\n}\n","size_bytes":2161},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/Profile.tsx":{"content":"import { useAuth } from '@/lib/auth';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\nimport { LogOut, User, Mail, Shield } from 'lucide-react';\n\nexport default function Profile() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = async () => {\n    await logout();\n    setLocation('/login');\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'Admin':\n        return 'bg-red-500';\n      case 'Manager':\n        return 'bg-yellow-500';\n      case 'Inventory Manager':\n        return 'bg-blue-500';\n      case 'Sales Executive':\n        return 'bg-green-500';\n      case 'HR Manager':\n        return 'bg-purple-500';\n      case 'Service Staff':\n        return 'bg-orange-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <Card data-testid=\"card-profile\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-title\">\n            <User className=\"h-6 w-6\" />\n            User Profile\n          </CardTitle>\n          <CardDescription data-testid=\"text-description\">\n            Your account information and permissions\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-3\" data-testid=\"section-name\">\n              <User className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Name</p>\n                <p className=\"font-medium\" data-testid=\"text-name\">{user.name}</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3\" data-testid=\"section-email\">\n              <Mail className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Email</p>\n                <p className=\"font-medium\" data-testid=\"text-email\">{user.email}</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3\" data-testid=\"section-role\">\n              <Shield className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Role</p>\n                <Badge className={getRoleBadgeColor(user.role)} data-testid=\"badge-role\">\n                  {user.role}\n                </Badge>\n              </div>\n            </div>\n          </div>\n\n          {user.permissions && (\n            <div className=\"border-t pt-6\" data-testid=\"section-permissions\">\n              <h3 className=\"font-semibold mb-3\" data-testid=\"text-permissions-title\">Permissions</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {Object.entries(user.permissions).map(([resource, actions]) => (\n                  <div key={resource} className=\"bg-muted p-3 rounded-md\" data-testid={`permission-${resource}`}>\n                    <p className=\"font-medium capitalize text-sm mb-1\">{resource}</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {(actions as string[]).map((action) => (\n                        <Badge key={action} variant=\"outline\" className=\"text-xs\" data-testid={`action-${action}`}>\n                          {action}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <div className=\"border-t pt-6\">\n            <Button\n              onClick={handleLogout}\n              variant=\"destructive\"\n              className=\"w-full\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4161},"server/scripts/reassign-ticket-to-logged-in-service-staff.ts":{"content":"import mongoose from 'mongoose';\nimport { SupportTicket } from '../models/SupportTicket';\nimport { User } from '../models/User';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) {\n  console.error('❌ MONGODB_URI environment variable is not set');\n  process.exit(1);\n}\n\nasync function reassignTicket() {\n  try {\n    console.log('🔌 Connecting to MongoDB...');\n    await mongoose.connect(MONGODB_URI);\n    console.log('✅ Connected to MongoDB');\n\n    // Find the Service Staff user with email hr@maulicarworld.com (the one logged in)\n    const serviceUser = await User.findOne({ \n      email: 'hr@maulicarworld.com',\n      role: 'Service Staff' \n    });\n\n    if (!serviceUser) {\n      console.log('❌ Service Staff user (hr@maulicarworld.com) not found');\n      process.exit(1);\n    }\n\n    console.log(`\\n👤 Found Service Staff user: ${serviceUser.name} (${serviceUser.email})`);\n    console.log(`   User ID: ${serviceUser._id}`);\n\n    // Find ticket #TKT00005\n    const ticket = await SupportTicket.findOne({ ticketNumber: 'TKT00005' })\n      .populate('assignedTo', 'name email');\n\n    if (!ticket) {\n      console.log('❌ Ticket #TKT00005 not found');\n      process.exit(1);\n    }\n\n    console.log(`\\n🎫 Found ticket #${ticket.ticketNumber}: \"${ticket.subject}\"`);\n    console.log(`   Current assignment: ${ticket.assignedTo ? `${ticket.assignedTo.name} (${ticket.assignedTo.email})` : 'Unassigned'}`);\n    console.log(`   Status: ${ticket.status}`);\n    console.log(`   Priority: ${ticket.priority}`);\n\n    // Reassign to the Service Staff user\n    await SupportTicket.findByIdAndUpdate(ticket._id, {\n      assignedTo: serviceUser._id\n    });\n\n    console.log(`\\n✅ Successfully reassigned ticket #${ticket.ticketNumber} to ${serviceUser.name}`);\n    console.log('\\n📊 The dashboard will now show this ticket with proper counts!');\n\n  } catch (error) {\n    console.error('❌ Error:', error);\n    process.exit(1);\n  } finally {\n    await mongoose.connection.close();\n    console.log('\\n🔌 Disconnected from MongoDB');\n    process.exit(0);\n  }\n}\n\nreassignTicket();\n","size_bytes":2097},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { KPICard } from \"@/components/KPICard\";\nimport { ServiceWorkflowCard } from \"@/components/ServiceWorkflowCard\";\nimport { ActivityFeed } from \"@/components/ActivityFeed\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  IndianRupee, \n  Package, \n  Users, \n  AlertTriangle, \n  Plus, \n  TrendingUp,\n  ClipboardCheck,\n  UserCheck,\n  FileText,\n  CheckCircle,\n  ShoppingCart,\n  BarChart3,\n  PieChart,\n  Activity,\n  CalendarOff,\n  CheckSquare,\n  UserCircle,\n  Ticket,\n  AlertCircle\n} from \"lucide-react\";\nimport { formatDistance } from \"date-fns\";\nimport { \n  BarChart, \n  Bar, \n  PieChart as RechartsPie, \n  Pie, \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  Legend, \n  ResponsiveContainer,\n  Cell \n} from \"recharts\";\n\ninterface DashboardStats {\n  // Admin stats\n  todaySales?: number;\n  activeServices?: number;\n  totalCustomers?: number;\n  lowStockProducts?: any[];\n  totalEmployees?: number;\n  totalProducts?: number;\n  \n  // Inventory Manager stats\n  totalInventoryValue?: number;\n  recentTransactions?: number;\n  \n  // Sales Executive stats (service-related)\n  completedToday?: number;\n  waitingServices?: number;\n  totalServiceVisits?: number;\n  inquiredServices?: number;\n  workingServices?: number;\n  activeOrders?: number;\n  totalOrders?: number;\n  \n  // HR Manager stats\n  presentToday?: number;\n  pendingLeaves?: number;\n  activeTasks?: number;\n  \n  // Service Staff stats\n  myOpenTickets?: number;\n  resolvedToday?: number;\n  urgentTickets?: number;\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: dashboardStats, isLoading: statsLoading, error: statsError, refetch: refetchStats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard-stats\"],\n  });\n\n  const { data: serviceVisits, isLoading: visitsLoading, error: visitsError, refetch: refetchVisits } = useQuery<any[]>({\n    queryKey: [\"/api/service-visits\"],\n    enabled: user?.role === 'Admin' || user?.role === 'Manager' || user?.role === 'Sales Executive',\n  });\n\n  const { data: supportTickets, isLoading: ticketsLoading, error: ticketsError, refetch: refetchTickets } = useQuery<any[]>({\n    queryKey: [\"/api/support-tickets\"],\n    enabled: user?.role === 'Service Staff',\n  });\n\n  const { data: salesTrends = [] } = useQuery<any[]>({\n    queryKey: [\"/api/dashboard/sales-trends\"],\n    enabled: user?.role === 'Admin' || user?.role === 'Manager',\n  });\n\n  const { data: serviceStatus = [] } = useQuery<any[]>({\n    queryKey: [\"/api/dashboard/service-status\"],\n    enabled: user?.role === 'Admin' || user?.role === 'Manager',\n  });\n\n  const { data: customerGrowth = [] } = useQuery<any[]>({\n    queryKey: [\"/api/dashboard/customer-growth\"],\n    enabled: user?.role === 'Admin' || user?.role === 'Manager',\n  });\n\n  const { data: productCategories = [] } = useQuery<any[]>({\n    queryKey: [\"/api/dashboard/product-categories\"],\n    enabled: user?.role === 'Admin' || user?.role === 'Manager',\n  });\n\n  const activeServices = serviceVisits?.filter((visit: any) => \n    ['inquired', 'working', 'waiting'].includes(visit.status)\n  ).slice(0, 3) || [];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  // Role-based KPI configuration\n  const getRoleKPIs = () => {\n    if (!user || !dashboardStats) return [];\n\n    switch (user.role) {\n      case 'Admin':\n        return [\n          {\n            title: \"Today's Sales\",\n            value: formatCurrency(dashboardStats.todaySales || 0),\n            icon: IndianRupee,\n            trend: { value: 12.5, isPositive: true },\n            color: \"blue\" as const,\n          },\n          {\n            title: \"Active Service Jobs\",\n            value: dashboardStats.activeServices || 0,\n            icon: Package,\n            color: \"yellow\" as const,\n          },\n          {\n            title: \"Low Stock Items\",\n            value: dashboardStats.lowStockProducts?.length || 0,\n            icon: AlertTriangle,\n            color: \"orange\" as const,\n          },\n          {\n            title: \"Total Customers\",\n            value: dashboardStats.totalCustomers || 0,\n            icon: Users,\n            color: \"green\" as const,\n          },\n        ];\n      \n      case 'Manager':\n        return [\n          {\n            title: \"Today's Sales\",\n            value: formatCurrency(dashboardStats.todaySales || 0),\n            icon: IndianRupee,\n            trend: { value: 12.5, isPositive: true },\n            color: \"blue\" as const,\n          },\n          {\n            title: \"Active Service Jobs\",\n            value: dashboardStats.activeServices || 0,\n            icon: Package,\n            color: \"yellow\" as const,\n          },\n          {\n            title: \"Total Customers\",\n            value: dashboardStats.totalCustomers || 0,\n            icon: Users,\n            color: \"green\" as const,\n          },\n          {\n            title: \"Present Today\",\n            value: dashboardStats.presentToday || 0,\n            icon: UserCheck,\n            color: \"purple\" as const,\n          },\n          {\n            title: \"Total Employees\",\n            value: dashboardStats.totalEmployees || 0,\n            icon: UserCircle,\n            color: \"purple\" as const,\n          },\n          {\n            title: \"Active Orders\",\n            value: dashboardStats.activeOrders || 0,\n            icon: ShoppingCart,\n            color: \"orange\" as const,\n          },\n          {\n            title: \"Pending Leaves\",\n            value: dashboardStats.pendingLeaves || 0,\n            icon: CalendarOff,\n            color: \"yellow\" as const,\n          },\n          {\n            title: \"Active Tasks\",\n            value: dashboardStats.activeTasks || 0,\n            icon: CheckSquare,\n            color: \"pink\" as const,\n          },\n        ];\n      \n      case 'Inventory Manager':\n        return [\n          {\n            title: \"Total Products\",\n            value: dashboardStats.totalProducts || 0,\n            icon: Package,\n            color: \"purple\" as const,\n          },\n          {\n            title: \"Inventory Value\",\n            value: formatCurrency(dashboardStats.totalInventoryValue || 0),\n            icon: IndianRupee,\n            color: \"blue\" as const,\n          },\n          {\n            title: \"Low Stock Items\",\n            value: dashboardStats.lowStockProducts?.length || 0,\n            icon: AlertTriangle,\n            color: \"orange\" as const,\n          },\n          {\n            title: \"Today's Transactions\",\n            value: dashboardStats.recentTransactions || 0,\n            icon: TrendingUp,\n            color: \"green\" as const,\n          },\n        ];\n      \n      case 'Sales Executive':\n        return [\n          {\n            title: \"Active Service Jobs\",\n            value: dashboardStats.activeServices || 0,\n            icon: Package,\n            color: \"blue\" as const,\n          },\n          {\n            title: \"Completed Today\",\n            value: dashboardStats.completedToday || 0,\n            icon: CheckCircle,\n            color: \"green\" as const,\n          },\n          {\n            title: \"Waiting Services\",\n            value: dashboardStats.waitingServices || 0,\n            icon: AlertCircle,\n            color: \"yellow\" as const,\n          },\n          {\n            title: \"Total Service Visits\",\n            value: dashboardStats.totalServiceVisits || 0,\n            icon: ClipboardCheck,\n            color: \"purple\" as const,\n          },\n        ];\n      \n      case 'HR Manager':\n        return [\n          {\n            title: \"Total Employees\",\n            value: dashboardStats.totalEmployees || 0,\n            icon: Users,\n            color: \"blue\" as const,\n          },\n          {\n            title: \"Present Today\",\n            value: dashboardStats.presentToday || 0,\n            icon: UserCheck,\n            color: \"green\" as const,\n          },\n          {\n            title: \"Pending Leaves\",\n            value: dashboardStats.pendingLeaves || 0,\n            icon: FileText,\n            color: \"yellow\" as const,\n          },\n          {\n            title: \"Active Tasks\",\n            value: dashboardStats.activeTasks || 0,\n            icon: ClipboardCheck,\n            color: \"purple\" as const,\n          },\n        ];\n      \n      case 'Service Staff':\n        return [\n          {\n            title: \"My Open Tickets\",\n            value: dashboardStats.myOpenTickets || 0,\n            icon: Ticket,\n            color: \"blue\" as const,\n          },\n          {\n            title: \"Resolved Today\",\n            value: dashboardStats.resolvedToday || 0,\n            icon: CheckCircle,\n            color: \"green\" as const,\n          },\n          {\n            title: \"Urgent Tickets\",\n            value: dashboardStats.urgentTickets || 0,\n            icon: AlertCircle,\n            color: \"orange\" as const,\n          },\n        ];\n      \n      default:\n        return [];\n    }\n  };\n\n  const kpiData = getRoleKPIs();\n  const showStatsLoading = statsLoading;\n  const showVisitsLoading = visitsLoading && !statsLoading;\n\n  // Role-based welcome message\n  const getWelcomeMessage = () => {\n    if (!user) return \"Welcome back\";\n    \n    switch (user.role) {\n      case 'Admin':\n        return `Welcome back, ${user.name}`;\n      case 'Manager':\n        return `Branch Dashboard - ${user.name}`;\n      case 'Inventory Manager':\n        return `Inventory Overview - ${user.name}`;\n      case 'Sales Executive':\n        return `Sales Dashboard - ${user.name}`;\n      case 'HR Manager':\n        return `HR Dashboard - ${user.name}`;\n      case 'Service Staff':\n        return `My Services - ${user.name}`;\n      default:\n        return `Welcome back, ${user.name}`;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\" data-testid=\"text-welcome\">{getWelcomeMessage()}</p>\n        </div>\n      </div>\n\n      {statsError && (\n        <Card className=\"border-destructive\">\n          <CardContent className=\"pt-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n                <p className=\"text-sm\">Failed to load dashboard statistics</p>\n              </div>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => refetchStats()}>Retry</Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {showStatsLoading ? (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          {[...Array(4)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      ) : !statsError && (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          {kpiData.map((kpi) => (\n            <KPICard key={kpi.title} {...kpi} />\n          ))}\n        </div>\n      )}\n\n      {/* Analytics Graphs - Admin and Manager */}\n      {(user?.role === 'Admin' || user?.role === 'Manager') && !statsError && !showStatsLoading && (\n        <div className=\"grid gap-6 lg:grid-cols-2\">\n          {/* Sales Trends Bar Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5 text-blue-500\" />\n                Sales Trends (Last 7 Days)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={salesTrends}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                  <XAxis dataKey=\"day\" className=\"text-xs\" />\n                  <YAxis className=\"text-xs\" />\n                  <Tooltip \n                    contentStyle={{ \n                      backgroundColor: 'hsl(var(--card))', \n                      border: '1px solid hsl(var(--border))',\n                      borderRadius: '6px'\n                    }}\n                  />\n                  <Legend />\n                  <Bar dataKey=\"sales\" fill=\"#3b82f6\" name=\"Sales (₹)\" radius={[8, 8, 0, 0]} />\n                  <Bar dataKey=\"orders\" fill=\"#10b981\" name=\"Orders\" radius={[8, 8, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          {/* Service Status Pie Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <PieChart className=\"h-5 w-5 text-purple-500\" />\n                Service Status Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <RechartsPie>\n                  <Pie\n                    data={serviceStatus}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, percent }) => percent > 0 ? `${name} ${(percent * 100).toFixed(0)}%` : ''}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {serviceStatus.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip \n                    contentStyle={{ \n                      backgroundColor: 'hsl(var(--card))', \n                      border: '1px solid hsl(var(--border))',\n                      borderRadius: '6px'\n                    }}\n                  />\n                </RechartsPie>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          {/* Customer Growth Line Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"h-5 w-5 text-green-500\" />\n                Customer Growth (6 Months)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={customerGrowth}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                  <XAxis dataKey=\"month\" className=\"text-xs\" />\n                  <YAxis className=\"text-xs\" />\n                  <Tooltip \n                    contentStyle={{ \n                      backgroundColor: 'hsl(var(--card))', \n                      border: '1px solid hsl(var(--border))',\n                      borderRadius: '6px'\n                    }}\n                  />\n                  <Legend />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"customers\" \n                    stroke=\"#10b981\" \n                    strokeWidth={3}\n                    name=\"Total Customers\"\n                    dot={{ fill: '#10b981', r: 5 }}\n                    activeDot={{ r: 7 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          {/* Product Categories Bar Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5 text-orange-500\" />\n                Product Categories\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart \n                  data={productCategories}\n                  layout=\"vertical\"\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                  <XAxis type=\"number\" className=\"text-xs\" />\n                  <YAxis type=\"category\" dataKey=\"category\" className=\"text-xs\" width={100} />\n                  <Tooltip \n                    contentStyle={{ \n                      backgroundColor: 'hsl(var(--card))', \n                      border: '1px solid hsl(var(--border))',\n                      borderRadius: '6px'\n                    }}\n                  />\n                  <Legend />\n                  <Bar dataKey=\"count\" fill=\"#f59e0b\" name=\"Products\" radius={[0, 8, 8, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Active Service Jobs - Admin, Manager and Sales Executive */}\n        {(user?.role === 'Admin' || user?.role === 'Manager' || user?.role === 'Sales Executive') && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Active Service Jobs</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {visitsError ? (\n                <div className=\"text-center py-4\">\n                  <AlertTriangle className=\"h-8 w-8 mx-auto text-destructive mb-2\" />\n                  <p className=\"text-sm text-muted-foreground mb-3\">Failed to load service visits</p>\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => refetchVisits()}>Retry</Button>\n                </div>\n              ) : showVisitsLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-20\" />\n                  ))}\n                </div>\n              ) : (\n                <>\n                  {activeServices.map((service: any) => (\n                    <ServiceWorkflowCard\n                      key={service._id}\n                      customerName={service.customerId?.name || 'Unknown'}\n                      vehicleReg={service.vehicleReg}\n                      status={service.status}\n                      handlers={[service.handlerId?.name || 'Unassigned']}\n                      startTime={formatDistance(new Date(service.createdAt), new Date(), { addSuffix: true })}\n                      onView={() => setLocation('/visits')}\n                    />\n                  ))}\n                  {activeServices.length === 0 && (\n                    <p className=\"text-muted-foreground text-center py-4\">No active service jobs</p>\n                  )}\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-view-all-services\" onClick={() => setLocation('/visits')}>\n                    View All Services\n                  </Button>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Support Tickets - Service Staff only */}\n        {user?.role === 'Service Staff' && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Ticket className=\"h-5 w-5\" />\n                My Support Tickets\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {ticketsError ? (\n                <div className=\"text-center py-4\">\n                  <AlertTriangle className=\"h-8 w-8 mx-auto text-destructive mb-2\" />\n                  <p className=\"text-sm text-muted-foreground mb-3\">Failed to load support tickets</p>\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => refetchTickets()}>Retry</Button>\n                </div>\n              ) : ticketsLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-24\" />\n                  ))}\n                </div>\n              ) : (\n                <>\n                  {supportTickets?.filter((ticket: any) => \n                    ['pending', 'in_progress'].includes(ticket.status)\n                  ).slice(0, 5).map((ticket: any) => (\n                    <div\n                      key={ticket._id}\n                      className=\"p-3 rounded-lg border border-border hover-elevate cursor-pointer\"\n                      onClick={() => setLocation('/support')}\n                      data-testid={`ticket-${ticket._id}`}\n                    >\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-sm\">{ticket.subject}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            #{ticket.ticketNumber} • {ticket.customerId?.fullName || 'Unknown'}\n                          </p>\n                        </div>\n                        <div className=\"flex flex-col items-end gap-1\">\n                          <span className={`text-xs px-2 py-1 rounded-full ${\n                            ticket.priority === 'urgent' ? 'bg-red-100 dark:bg-red-900 text-red-600 dark:text-red-200' :\n                            ticket.priority === 'high' ? 'bg-orange-100 dark:bg-orange-900 text-orange-600 dark:text-orange-200' :\n                            ticket.priority === 'medium' ? 'bg-yellow-100 dark:bg-yellow-900 text-yellow-600 dark:text-yellow-200' :\n                            'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300'\n                          }`}>\n                            {ticket.priority}\n                          </span>\n                          <span className={`text-xs px-2 py-1 rounded-full ${\n                            ticket.status === 'pending' ? 'bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-200' :\n                            'bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-200'\n                          }`}>\n                            {ticket.status.replace('_', ' ')}\n                          </span>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground line-clamp-2\">{ticket.description}</p>\n                    </div>\n                  ))}\n                  {(!supportTickets || supportTickets.filter((t: any) => ['pending', 'in_progress'].includes(t.status)).length === 0) && (\n                    <p className=\"text-muted-foreground text-center py-4\">No open support tickets</p>\n                  )}\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-view-all-tickets\" onClick={() => setLocation('/support')}>\n                    View All Tickets\n                  </Button>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Low Stock Alerts - Admin and Inventory Manager only */}\n        {(user?.role === 'Admin' || user?.role === 'Inventory Manager') && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5 text-warning\" />\n                Low Stock Alerts\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {statsError ? (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-sm text-muted-foreground\">Stock data unavailable</p>\n                </div>\n              ) : showStatsLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-16\" />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {dashboardStats?.lowStockProducts?.map((item: any) => (\n                    <div\n                      key={item._id}\n                      className=\"flex items-center justify-between p-3 rounded-lg border border-border hover-elevate\"\n                      data-testid={`low-stock-${item._id}`}\n                    >\n                      <div>\n                        <p className=\"font-medium text-sm\">{item.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Reorder level: {item.minStockLevel}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-lg font-bold text-warning\">{item.stockQty}</p>\n                        <p className=\"text-xs text-muted-foreground\">in stock</p>\n                      </div>\n                    </div>\n                  ))}\n                  {(!dashboardStats?.lowStockProducts || dashboardStats.lowStockProducts.length === 0) && (\n                    <p className=\"text-muted-foreground text-center py-4\">No low stock items</p>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {user?.role === 'Admin' && (\n        <ActivityFeed limit={15} />\n      )}\n    </div>\n  );\n}\n","size_bytes":25286},"server/db.ts":{"content":"import dotenv from 'dotenv';\ndotenv.config();\n\nimport mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable');\n}\n\ninterface CachedConnection {\n  conn: typeof mongoose | null;\n  promise: Promise<typeof mongoose> | null;\n}\n\nlet cached: CachedConnection = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nexport async function connectDB() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    };\n\n    cached.promise = mongoose.connect(MONGODB_URI!, opts).then((mongoose) => {\n      console.log('✅ MongoDB connected successfully');\n      return mongoose;\n    }).catch((error) => {\n      console.error('❌ MongoDB connection error:', error);\n      throw error;\n    });\n  }\n\n  try {\n    cached.conn = await cached.promise;\n  } catch (e) {\n    cached.promise = null;\n    throw e;\n  }\n\n  return cached.conn;\n}\n\ndeclare global {\n  var mongoose: CachedConnection;\n}\n","size_bytes":1090},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/models/ProductReturn.ts":{"content":"import mongoose from 'mongoose';\n\nconst productReturnSchema = new mongoose.Schema({\n  productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },\n  orderId: { type: mongoose.Schema.Types.ObjectId, ref: 'Order' },\n  customerId: { type: mongoose.Schema.Types.ObjectId, ref: 'Customer' },\n  quantity: { type: Number, required: true },\n  reason: { type: String, required: true },\n  condition: { \n    type: String, \n    enum: ['defective', 'damaged', 'wrong_item', 'not_as_described', 'other'],\n    required: true \n  },\n  status: { \n    type: String, \n    enum: ['pending', 'approved', 'rejected', 'processed'],\n    default: 'pending'\n  },\n  refundAmount: { type: Number },\n  restockable: { type: Boolean, default: false },\n  notes: { type: String },\n  returnDate: { type: Date, default: Date.now },\n  processedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  processedDate: { type: Date },\n}, { timestamps: true });\n\nexport const ProductReturn = mongoose.models.ProductReturn || mongoose.model('ProductReturn', productReturnSchema);\n","size_bytes":1066},"server/utils/emailReports.ts":{"content":"import { Invoice } from '../models/Invoice';\nimport { RegistrationCustomer } from '../models/RegistrationCustomer';\nimport { Product } from '../models/Product';\nimport { Warranty } from '../models/Warranty';\nimport { Feedback } from '../models/Feedback';\n\ninterface DailyReportData {\n  date: string;\n  sales: {\n    totalRevenue: number;\n    totalInvoices: number;\n    avgInvoiceValue: number;\n  };\n  customers: {\n    total: number;\n    new: number;\n  };\n  inventory: {\n    lowStock: number;\n    outOfStock: number;\n  };\n  warranties: {\n    active: number;\n    expiring: number;\n  };\n  feedback: {\n    totalComplaints: number;\n    openComplaints: number;\n    avgRating: number;\n  };\n}\n\nexport async function generateDailyReportData(): Promise<DailyReportData> {\n  const now = new Date();\n  const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n  const [\n    invoiceStats,\n    totalCustomers,\n    newCustomers,\n    lowStock,\n    outOfStock,\n    activeWarranties,\n    expiringWarranties,\n    totalComplaints,\n    openComplaints,\n    avgRatingData\n  ] = await Promise.all([\n    Invoice.aggregate([\n      { $match: { createdAt: { $gte: startOfDay } } },\n      {\n        $group: {\n          _id: null,\n          totalRevenue: { $sum: '$grandTotal' },\n          totalInvoices: { $sum: 1 },\n          avgInvoiceValue: { $avg: '$grandTotal' }\n        }\n      }\n    ]),\n    RegistrationCustomer.countDocuments(),\n    RegistrationCustomer.countDocuments({ createdAt: { $gte: thirtyDaysAgo } }),\n    Product.countDocuments({ $expr: { $lte: ['$stockQty', '$minStockLevel'] }, stockQty: { $gt: 0 } }),\n    Product.countDocuments({ stockQty: 0 }),\n    Warranty.countDocuments({ status: 'active', endDate: { $gt: now } }),\n    Warranty.countDocuments({\n      status: 'active',\n      endDate: { $gt: now, $lte: new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000) }\n    }),\n    Feedback.countDocuments({ type: 'complaint' }),\n    Feedback.countDocuments({ type: 'complaint', status: { $in: ['open', 'in_progress'] } }),\n    Feedback.aggregate([\n      { $match: { rating: { $exists: true, $ne: null } } },\n      { $group: { _id: null, avgRating: { $avg: '$rating' } } }\n    ])\n  ]);\n\n  return {\n    date: now.toISOString().split('T')[0],\n    sales: {\n      totalRevenue: invoiceStats[0]?.totalRevenue || 0,\n      totalInvoices: invoiceStats[0]?.totalInvoices || 0,\n      avgInvoiceValue: invoiceStats[0]?.avgInvoiceValue || 0\n    },\n    customers: {\n      total: totalCustomers,\n      new: newCustomers\n    },\n    inventory: {\n      lowStock,\n      outOfStock\n    },\n    warranties: {\n      active: activeWarranties,\n      expiring: expiringWarranties\n    },\n    feedback: {\n      totalComplaints,\n      openComplaints,\n      avgRating: avgRatingData[0]?.avgRating || 0\n    }\n  };\n}\n\nexport function formatDailyReportHTML(data: DailyReportData): string {\n  return `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Daily Business Report - ${data.date}</title>\n  <style>\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n      line-height: 1.6;\n      color: #333;\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n      background-color: #f5f5f5;\n    }\n    .container {\n      background-color: white;\n      border-radius: 8px;\n      padding: 30px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    h1 {\n      color: #1a1a1a;\n      border-bottom: 3px solid #f97316;\n      padding-bottom: 10px;\n      margin-bottom: 30px;\n    }\n    .section {\n      margin-bottom: 30px;\n    }\n    .section h2 {\n      color: #f97316;\n      font-size: 18px;\n      margin-bottom: 15px;\n    }\n    .metrics {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 15px;\n      margin-top: 15px;\n    }\n    .metric {\n      background-color: #f9fafb;\n      border-left: 4px solid #f97316;\n      padding: 15px;\n      border-radius: 4px;\n    }\n    .metric-label {\n      font-size: 12px;\n      color: #6b7280;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n    .metric-value {\n      font-size: 24px;\n      font-weight: bold;\n      color: #1a1a1a;\n      margin-top: 5px;\n    }\n    .alert {\n      background-color: #fef2f2;\n      border-left: 4px solid #ef4444;\n      padding: 15px;\n      border-radius: 4px;\n      margin-top: 20px;\n    }\n    .alert h3 {\n      color: #ef4444;\n      margin: 0 0 10px 0;\n      font-size: 16px;\n    }\n    .footer {\n      margin-top: 40px;\n      padding-top: 20px;\n      border-top: 1px solid #e5e7eb;\n      font-size: 12px;\n      color: #6b7280;\n      text-align: center;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>📊 Daily Business Report</h1>\n    <p style=\"color: #6b7280; margin-bottom: 30px;\">Report Date: <strong>${data.date}</strong></p>\n    \n    <div class=\"section\">\n      <h2>💰 Sales Performance</h2>\n      <div class=\"metrics\">\n        <div class=\"metric\">\n          <div class=\"metric-label\">Total Revenue</div>\n          <div class=\"metric-value\">₹${data.sales.totalRevenue.toLocaleString('en-IN')}</div>\n        </div>\n        <div class=\"metric\">\n          <div class=\"metric-label\">Total Invoices</div>\n          <div class=\"metric-value\">${data.sales.totalInvoices}</div>\n        </div>\n        <div class=\"metric\">\n          <div class=\"metric-label\">Avg Invoice Value</div>\n          <div class=\"metric-value\">₹${data.sales.avgInvoiceValue.toLocaleString('en-IN', { maximumFractionDigits: 0 })}</div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"section\">\n      <h2>👥 Customer Metrics</h2>\n      <div class=\"metrics\">\n        <div class=\"metric\">\n          <div class=\"metric-label\">Total Customers</div>\n          <div class=\"metric-value\">${data.customers.total}</div>\n        </div>\n        <div class=\"metric\">\n          <div class=\"metric-label\">New Customers (30d)</div>\n          <div class=\"metric-value\">${data.customers.new}</div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"section\">\n      <h2>📦 Inventory Status</h2>\n      <div class=\"metrics\">\n        <div class=\"metric\">\n          <div class=\"metric-label\">Low Stock Items</div>\n          <div class=\"metric-value\" style=\"color: ${data.inventory.lowStock > 0 ? '#f97316' : '#10b981'};\">${data.inventory.lowStock}</div>\n        </div>\n        <div class=\"metric\">\n          <div class=\"metric-label\">Out of Stock</div>\n          <div class=\"metric-value\" style=\"color: ${data.inventory.outOfStock > 0 ? '#ef4444' : '#10b981'};\">${data.inventory.outOfStock}</div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"section\">\n      <h2>🛡️ Warranty Information</h2>\n      <div class=\"metrics\">\n        <div class=\"metric\">\n          <div class=\"metric-label\">Active Warranties</div>\n          <div class=\"metric-value\">${data.warranties.active}</div>\n        </div>\n        <div class=\"metric\">\n          <div class=\"metric-label\">Expiring Soon (30d)</div>\n          <div class=\"metric-value\" style=\"color: ${data.warranties.expiring > 0 ? '#f97316' : '#10b981'};\">${data.warranties.expiring}</div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"section\">\n      <h2>💬 Customer Feedback</h2>\n      <div class=\"metrics\">\n        <div class=\"metric\">\n          <div class=\"metric-label\">Average Rating</div>\n          <div class=\"metric-value\">${data.feedback.avgRating.toFixed(1)} / 5.0</div>\n        </div>\n        <div class=\"metric\">\n          <div class=\"metric-label\">Total Complaints</div>\n          <div class=\"metric-value\">${data.feedback.totalComplaints}</div>\n        </div>\n        <div class=\"metric\">\n          <div class=\"metric-label\">Open Complaints</div>\n          <div class=\"metric-value\" style=\"color: ${data.feedback.openComplaints > 0 ? '#ef4444' : '#10b981'};\">${data.feedback.openComplaints}</div>\n        </div>\n      </div>\n    </div>\n    \n    ${(data.inventory.lowStock > 0 || data.inventory.outOfStock > 0 || data.feedback.openComplaints > 0 || data.warranties.expiring > 0) ? `\n    <div class=\"alert\">\n      <h3>⚠️ Action Required</h3>\n      <ul style=\"margin: 0; padding-left: 20px;\">\n        ${data.inventory.outOfStock > 0 ? `<li>${data.inventory.outOfStock} products are out of stock</li>` : ''}\n        ${data.inventory.lowStock > 0 ? `<li>${data.inventory.lowStock} products have low stock</li>` : ''}\n        ${data.feedback.openComplaints > 0 ? `<li>${data.feedback.openComplaints} customer complaints need attention</li>` : ''}\n        ${data.warranties.expiring > 0 ? `<li>${data.warranties.expiring} warranties expiring in the next 30 days</li>` : ''}\n      </ul>\n    </div>\n    ` : ''}\n    \n    <div class=\"footer\">\n      <p>This is an automated daily report from Mauli Car World Management System</p>\n      <p>Generated on ${new Date().toLocaleString('en-IN')}</p>\n    </div>\n  </div>\n</body>\n</html>\n  `;\n}\n\nexport async function sendDailyReportEmail(recipientEmail: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    const reportData = await generateDailyReportData();\n    const htmlContent = formatDailyReportHTML(reportData);\n    \n    console.log('📧 Email Report Generated for:', recipientEmail);\n    console.log('Report Data:', JSON.stringify(reportData, null, 2));\n    \n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Failed to generate daily report:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n","size_bytes":9686},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"server/models/Product.ts":{"content":"import mongoose from 'mongoose';\n\nconst variantSchema = new mongoose.Schema({\n  size: String,\n  color: String,\n}, { _id: false });\n\nconst productSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  category: { type: String, required: true },\n  brand: { type: String, required: true },\n  modelCompatibility: [String],\n  warranty: String,\n  mrp: { type: Number, required: true },\n  sellingPrice: { type: Number, required: true },\n  discount: { type: Number, default: 0 },\n  stockQty: { type: Number, default: 0 },\n  minStockLevel: { type: Number, default: 10 },\n  status: { \n    type: String, \n    enum: ['in_stock', 'low_stock', 'out_of_stock', 'discontinued'],\n    default: 'in_stock'\n  },\n  variants: [variantSchema],\n  images: [String],\n  warehouseLocation: { type: String },\n  barcode: { type: String },\n  supplierId: { type: mongoose.Schema.Types.ObjectId, ref: 'Supplier' },\n}, { timestamps: true });\n\nproductSchema.pre('save', function(next) {\n  if (this.stockQty === 0) {\n    this.status = 'out_of_stock';\n  } else if (this.stockQty <= this.minStockLevel) {\n    this.status = 'low_stock';\n  } else {\n    this.status = 'in_stock';\n  }\n  next();\n});\n\nexport const Product = mongoose.models.Product || mongoose.model('Product', productSchema);\n","size_bytes":1270},"server/utils/invoiceNotifications.ts":{"content":"import { Invoice } from '../models/Invoice';\nimport { sendWhatsAppInvoice } from '../services/whatsapp.js';\nimport { generateInvoicePDF as generatePDF } from './generateInvoicePDF.js';\n\ninterface NotificationData {\n  customerName: string;\n  customerEmail?: string;\n  customerPhone?: string;\n  invoiceNumber: string;\n  totalAmount: number;\n  service: string;\n  invoiceUrl?: string;\n  pdfUrl?: string;\n}\n\nexport async function sendInvoiceEmail(data: NotificationData): Promise<boolean> {\n  try {\n    console.log('📧 [STUB] Sending invoice email...');\n    console.log('   To:', data.customerEmail);\n    console.log('   Invoice:', data.invoiceNumber);\n    console.log('   Amount: ₹', data.totalAmount);\n    console.log('   PDF URL:', data.pdfUrl || 'Not generated');\n    \n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    console.log('✅ [STUB] Email sent successfully');\n    return true;\n  } catch (error) {\n    console.error('❌ [STUB] Email sending failed:', error);\n    return false;\n  }\n}\n\nexport async function sendInvoiceWhatsApp(data: NotificationData): Promise<boolean> {\n  try {\n    if (!data.customerPhone) {\n      console.log('⚠️ No customer phone number provided, skipping WhatsApp notification');\n      return false;\n    }\n\n    if (!data.pdfUrl) {\n      console.log('⚠️ No PDF URL provided, cannot send WhatsApp invoice');\n      return false;\n    }\n\n    console.log('📱 Sending invoice via WhatsApp...');\n    console.log('   To:', data.customerPhone);\n    console.log('   Customer:', data.customerName);\n    console.log('   Invoice:', data.invoiceNumber);\n    console.log('   Service:', data.service);\n    console.log('   Amount: ₹', data.totalAmount.toLocaleString());\n    console.log('   PDF URL:', data.pdfUrl);\n\n    const result = await sendWhatsAppInvoice({\n      to: data.customerPhone,\n      customerName: data.customerName,\n      invoiceNumber: data.invoiceNumber,\n      service: data.service,\n      totalAmount: `₹${data.totalAmount.toLocaleString()}`,\n      pdfUrl: data.pdfUrl\n    });\n\n    if (result.success) {\n      console.log('✅ WhatsApp invoice sent successfully');\n      return true;\n    } else {\n      console.error('❌ WhatsApp invoice sending failed:', result.error);\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ WhatsApp sending failed:', error);\n    return false;\n  }\n}\n\nexport async function generateInvoicePDF(invoice: any): Promise<string> {\n  try {\n    console.log('📄 Generating invoice PDF...');\n    console.log('   Invoice:', invoice.invoiceNumber);\n    \n    const pdfPath = await generatePDF(invoice);\n    \n    const domain = process.env.REPLIT_DEV_DOMAIN || 'localhost:5000';\n    const protocol = process.env.REPLIT_DEV_DOMAIN ? 'https' : 'http';\n    const token = invoice.pdfAccessToken;\n    const pdfUrl = `${protocol}://${domain}/api/public/invoices/${invoice._id}/pdf?token=${token}`;\n    \n    console.log('✅ PDF generated successfully');\n    console.log('   Local path:', pdfPath);\n    console.log('   Public URL:', pdfUrl);\n    console.log('   Token expires:', invoice.pdfTokenExpiry);\n    \n    return pdfUrl;\n  } catch (error) {\n    console.error('❌ PDF generation failed:', error);\n    return '';\n  }\n}\n\nexport async function sendInvoiceNotifications(invoice: any): Promise<void> {\n  try {\n    if (invoice.notificationsSent?.whatsapp && invoice.notificationsSent?.whatsappSentAt) {\n      console.log('⏭️ WhatsApp notification already sent on', invoice.notificationsSent.whatsappSentAt);\n      console.log('   Skipping to prevent duplicate messages');\n      return;\n    }\n\n    const pdfUrl = await generateInvoicePDF(invoice);\n    \n    let serviceDescription = 'Service';\n    if (invoice.items && invoice.items.length > 0) {\n      const firstItem = invoice.items[0];\n      serviceDescription = firstItem.description || firstItem.productName || 'Service';\n      if (invoice.items.length > 1) {\n        serviceDescription += ` +${invoice.items.length - 1} more`;\n      }\n    }\n    \n    const notificationData: NotificationData = {\n      customerName: invoice.customerDetails?.fullName || '',\n      customerEmail: invoice.customerDetails?.email,\n      customerPhone: invoice.customerDetails?.mobileNumber,\n      invoiceNumber: invoice.invoiceNumber,\n      totalAmount: invoice.totalAmount,\n      service: serviceDescription,\n      pdfUrl,\n    };\n\n    const emailSent = (invoice.customerDetails?.email && !invoice.notificationsSent?.email)\n      ? await sendInvoiceEmail(notificationData)\n      : false;\n\n    let whatsappSent = false;\n    if (invoice.customerDetails?.mobileNumber && !invoice.notificationsSent?.whatsapp) {\n      invoice.notificationsSent.whatsapp = true;\n      invoice.notificationsSent.whatsappSentAt = new Date();\n      await invoice.save();\n      \n      console.log('🔒 WhatsApp send flag set to true and persisted (prevents duplicates)');\n      \n      whatsappSent = await sendInvoiceWhatsApp(notificationData);\n      \n      if (!whatsappSent) {\n        console.error('❌ WhatsApp send failed, but flag remains TRUE to prevent duplicates');\n        console.error('   ⚠️ IMPORTANT: Flag will NOT be cleared automatically');\n        console.error('   If you are certain the message was not delivered, manually clear the flag in database');\n        console.error('   Invoice ID:', invoice._id);\n      }\n    }\n\n    if (emailSent) {\n      invoice.notificationsSent.email = true;\n      invoice.notificationsSent.emailSentAt = new Date();\n      await invoice.save();\n    }\n\n    console.log('📨 Notifications summary:');\n    console.log('   Email:', emailSent ? '✅' : (invoice.notificationsSent?.email ? '⏭️ Already sent' : '❌'));\n    console.log('   WhatsApp:', whatsappSent ? '✅' : (invoice.notificationsSent?.whatsapp ? '⏭️ Already sent' : '❌'));\n  } catch (error) {\n    console.error('❌ Failed to send invoice notifications:', error);\n  }\n}\n","size_bytes":5906},"server.js":{"content":"#!/usr/bin/env node\nimport('./dist/index.js').catch(err => {\n  console.error('Failed to start server:', err);\n  process.exit(1);\n});\n","size_bytes":133},"server/models/Feedback.ts":{"content":"import mongoose from 'mongoose';\n\nconst feedbackSchema = new mongoose.Schema({\n  customerId: { type: mongoose.Schema.Types.ObjectId, ref: 'Customer', required: true },\n  type: { \n    type: String, \n    enum: ['feedback', 'complaint', 'suggestion'],\n    required: true \n  },\n  subject: { type: String, required: true },\n  message: { type: String, required: true },\n  rating: { type: Number, min: 1, max: 5 },\n  status: { \n    type: String, \n    enum: ['open', 'in_progress', 'resolved', 'closed'],\n    default: 'open'\n  },\n  assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: 'Employee' },\n  resolution: { type: String },\n  resolvedDate: { type: Date },\n  priority: { \n    type: String, \n    enum: ['low', 'medium', 'high'],\n    default: 'medium'\n  },\n}, { timestamps: true });\n\nexport const Feedback = mongoose.models.Feedback || mongoose.model('Feedback', feedbackSchema);\n","size_bytes":880},"client/src/components/InvoiceGenerationDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Minus, Tag, Calculator, Receipt } from \"lucide-react\";\n\nconst invoiceItemSchema = z.object({\n  type: z.enum(['product', 'service']),\n  productId: z.string().optional(),\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  unitPrice: z.number().min(0, \"Price must be positive\"),\n  total: z.number(),\n  hasGst: z.boolean().default(false),\n  gstAmount: z.number().default(0),\n  hasWarranty: z.boolean().default(false),\n  warrantyCards: z.array(z.object({\n    url: z.string(),\n    filename: z.string(),\n    uploadedAt: z.string(),\n  })).optional().default([]),\n});\n\nconst invoiceFormSchema = z.object({\n  items: z.array(invoiceItemSchema).min(1, \"Add at least one item\"),\n  couponCode: z.string().optional(),\n  notes: z.string().optional(),\n  terms: z.string().optional(),\n});\n\ntype InvoiceFormValues = z.infer<typeof invoiceFormSchema>;\n\ninterface InvoiceGenerationDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  serviceVisit: any;\n}\n\nexport function InvoiceGenerationDialog({ open, onOpenChange, serviceVisit }: InvoiceGenerationDialogProps) {\n  const { toast } = useToast();\n  const [couponValidation, setCouponValidation] = useState<any>(null);\n  const [calculatedTotals, setCalculatedTotals] = useState({\n    subtotal: 0,\n    discount: 0,\n    taxAmount: 0,\n    total: 0,\n  });\n  const [initialItemsSet, setInitialItemsSet] = useState(false);\n\n  const form = useForm<InvoiceFormValues>({\n    resolver: zodResolver(invoiceFormSchema),\n    defaultValues: {\n      items: [{\n        type: 'service' as const,\n        name: 'Service Charge',\n        quantity: 1,\n        unitPrice: 0,\n        total: 0,\n        hasGst: false,\n        gstAmount: 0,\n        hasWarranty: false,\n        warrantyCards: [],\n      }],\n      couponCode: '',\n      notes: '',\n      terms: 'Payment due within 30 days',\n    },\n  });\n\n  const { data: products = [] } = useQuery<any[]>({\n    queryKey: ['/api/products'],\n  });\n\n  const { data: suggestedProductsData, isLoading: loadingSuggestedProducts } = useQuery<{ products: any[] }>({\n    queryKey: ['/api/service-visits', serviceVisit?._id, 'suggested-products'],\n    enabled: open && !!serviceVisit?._id,\n  });\n\n  const items = form.watch('items');\n  const couponCode = form.watch('couponCode');\n\n  useEffect(() => {\n    if (!open) {\n      setInitialItemsSet(false);\n      setCouponValidation(null);\n      return;\n    }\n\n    if (initialItemsSet || loadingSuggestedProducts) {\n      return;\n    }\n\n    console.log('\\n========================================');\n    console.log('📋 INVOICE DIALOG - Processing Products');\n    console.log('========================================');\n    console.log('Service Visit ID:', serviceVisit?._id);\n    console.log('Service Visit Vehicle:', serviceVisit?.vehicleReg);\n    console.log('Loading Suggested Products?', loadingSuggestedProducts);\n    console.log('Suggested Products Data:', suggestedProductsData);\n    console.log('Service Visit PartsUsed:', serviceVisit?.partsUsed);\n    console.log('Service Visit PartsUsed Count:', serviceVisit?.partsUsed?.length || 0);\n\n    // Build a map of productId -> fresh product data from suggested products\n    const freshProductMap = new Map();\n    console.log('\\n🗺️ Building fresh product map from suggested products...');\n    suggestedProductsData?.products?.forEach((product: any, index: number) => {\n      console.log(`  Product ${index + 1}:`, {\n        productId: product.productId,\n        name: product.name,\n        price: product.price,\n        warranty: product.warranty,\n      });\n      freshProductMap.set(product.productId, {\n        name: product.name,\n        price: product.price || 0,\n        warranty: product.warranty,\n      });\n    });\n    console.log('Fresh product map size:', freshProductMap.size);\n\n    // Create partsUsedItems with fresh prices from the map\n    console.log('\\n🔧 Processing PartsUsed items...');\n    const partsUsedItems = serviceVisit?.partsUsed?.map((part: any, index: number) => {\n      const productId = part.productId?._id || part.productId;\n      const freshData = freshProductMap.get(productId?.toString());\n      \n      console.log(`  Part ${index + 1}:`, {\n        rawPart: part,\n        productId: productId,\n        productIdString: productId?.toString(),\n        freshData: freshData,\n        hasInMap: freshProductMap.has(productId?.toString()),\n      });\n      \n      const item = {\n        type: 'product' as const,\n        productId: productId,\n        name: freshData?.name || part.productId?.name || 'Product',\n        quantity: part.quantity || 1,\n        unitPrice: freshData?.price || part.price || 0,\n        total: (part.quantity || 1) * (freshData?.price || part.price || 0),\n        hasGst: false,\n        gstAmount: 0,\n        hasWarranty: !!(freshData?.warranty || part.productId?.warranty),\n        warrantyCards: [],\n      };\n      \n      console.log(`    → Created item:`, item);\n      return item;\n    }) || [];\n    \n    console.log('Total PartsUsed items created:', partsUsedItems.length);\n\n    // Create suggested items for products not already in partsUsed\n    const usedProductIds = new Set(partsUsedItems.map((item: any) => item.productId?.toString()));\n    console.log('\\n💡 Processing Suggested Products (excluding partsUsed)...');\n    console.log('Used Product IDs:', Array.from(usedProductIds));\n    \n    const uniqueSuggestedItems = suggestedProductsData?.products\n      ?.filter((product: any) => {\n        const isUsed = usedProductIds.has(product.productId);\n        console.log(`  Product \"${product.name}\" (${product.productId}):`, isUsed ? 'SKIP (already in partsUsed)' : 'INCLUDE');\n        return !isUsed;\n      })\n      .map((product: any) => ({\n        type: 'product' as const,\n        productId: product.productId,\n        name: product.name,\n        quantity: 1,\n        unitPrice: product.price || 0,\n        total: product.price || 0,\n        hasGst: false,\n        gstAmount: 0,\n        hasWarranty: !!product.warranty,\n        warrantyCards: [],\n      })) || [];\n\n    console.log('Total Unique Suggested items created:', uniqueSuggestedItems.length);\n    console.log('Unique Suggested Items:', uniqueSuggestedItems);\n\n    console.log('\\n📊 SUMMARY:');\n    console.log('  PartsUsed Items:', partsUsedItems.length);\n    console.log('  Unique Suggested Items:', uniqueSuggestedItems.length);\n    console.log('  Total Items:', partsUsedItems.length + uniqueSuggestedItems.length);\n\n    const allItems = [...partsUsedItems, ...uniqueSuggestedItems];\n\n    if (allItems.length > 0) {\n      console.log('\\n✅ Setting', allItems.length, 'items in form');\n      console.log('All Items:', allItems);\n      form.setValue('items', allItems);\n      setInitialItemsSet(true);\n    } else {\n      console.log('\\n⚠️ No items to set, marking as initialized');\n      setInitialItemsSet(true);\n    }\n    console.log('========================================\\n');\n  }, [open, serviceVisit, suggestedProductsData, initialItemsSet, loadingSuggestedProducts, form]);\n\n  useEffect(() => {\n    const subtotal = items.reduce((sum, item) => sum + (item.total || 0), 0);\n    const discount = couponValidation?.coupon?.discountAmount || 0;\n    const total = subtotal - discount;\n\n    setCalculatedTotals({\n      subtotal,\n      discount,\n      taxAmount: 0,\n      total,\n    });\n  }, [items, couponValidation]);\n\n  const validateCouponMutation = useMutation({\n    mutationFn: async (code: string) => {\n      const response = await apiRequest('POST', '/api/coupons/validate', {\n        code,\n        customerId: serviceVisit.customerId._id,\n        purchaseAmount: calculatedTotals.subtotal,\n      });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      setCouponValidation(data);\n      toast({ title: \"Coupon applied successfully\", description: `Discount: ₹${data.coupon.discountAmount}` });\n    },\n    onError: (error: any) => {\n      setCouponValidation(null);\n      toast({ title: \"Invalid coupon\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: InvoiceFormValues) => {\n      const response = await apiRequest('POST', '/api/invoices/from-service-visit', {\n        serviceVisitId: serviceVisit._id,\n        ...data,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/service-visits'] });\n      toast({ title: \"Invoice created successfully\", description: \"Invoice sent for approval\" });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create invoice\", variant: \"destructive\" });\n    },\n  });\n\n  const addItem = () => {\n    const currentItems = form.getValues('items');\n    form.setValue('items', [\n      ...currentItems,\n      {\n        type: 'product' as const,\n        name: '',\n        quantity: 1,\n        unitPrice: 0,\n        total: 0,\n        hasGst: false,\n        gstAmount: 0,\n        hasWarranty: false,\n        warrantyCards: [],\n      },\n    ]);\n  };\n\n  const removeItem = (index: number) => {\n    const currentItems = form.getValues('items');\n    form.setValue('items', currentItems.filter((_, i) => i !== index));\n  };\n\n  const updateItemTotal = (index: number) => {\n    const items = form.getValues('items');\n    const item = items[index];\n    \n    if (item.hasGst) {\n      const total = item.unitPrice * item.quantity;\n      const gstAmount = total * 0.18;\n      form.setValue(`items.${index}.gstAmount`, gstAmount, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n      form.setValue(`items.${index}.total`, total, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n    } else {\n      const total = item.quantity * item.unitPrice;\n      form.setValue(`items.${index}.gstAmount`, 0, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n      form.setValue(`items.${index}.total`, total, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n    }\n  };\n\n  const toggleGst = (index: number) => {\n    const items = form.getValues('items');\n    const newHasGst = !items[index].hasGst;\n    form.setValue(`items.${index}.hasGst`, newHasGst);\n    updateItemTotal(index);\n  };\n\n  const applyCoupon = () => {\n    const code = form.getValues('couponCode');\n    if (code) {\n      validateCouponMutation.mutate(code);\n    }\n  };\n\n  const onSubmit = (data: InvoiceFormValues) => {\n    createInvoiceMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-generate-invoice\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Receipt className=\"h-5 w-5\" />\n            Generate Invoice\n          </DialogTitle>\n          <DialogDescription>\n            Create invoice for service visit - {serviceVisit?.vehicleReg || 'N/A'}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">Items & Services</h3>\n                    <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={addItem} data-testid=\"button-add-item\">\n                      <Plus className=\"h-4 w-4 mr-1\" />\n                      Add Item\n                    </Button>\n                  </div>\n\n                  <div className=\"border rounded-lg\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Type</TableHead>\n                          <TableHead>Name</TableHead>\n                          <TableHead>Qty</TableHead>\n                          <TableHead>Unit Price</TableHead>\n                          <TableHead>GST</TableHead>\n                          <TableHead>Total</TableHead>\n                          <TableHead>Warranty</TableHead>\n                          <TableHead></TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {items.map((item, index) => (\n                          <TableRow key={index}>\n                            <TableCell>\n                              <FormField\n                                control={form.control}\n                                name={`items.${index}.type`}\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <Select value={field.value} onValueChange={field.onChange}>\n                                      <SelectTrigger className=\"w-[120px]\" data-testid={`select-item-type-${index}`}>\n                                        <SelectValue />\n                                      </SelectTrigger>\n                                      <SelectContent>\n                                        <SelectItem value=\"product\">Product</SelectItem>\n                                        <SelectItem value=\"service\">Service</SelectItem>\n                                      </SelectContent>\n                                    </Select>\n                                  </FormItem>\n                                )}\n                              />\n                            </TableCell>\n                            <TableCell>\n                              <FormField\n                                control={form.control}\n                                name={`items.${index}.name`}\n                                render={({ field }) => (\n                                  <FormItem>\n                                    {item.type === 'product' ? (\n                                      <Select\n                                        value={form.watch(`items.${index}.productId`) || ''}\n                                        onValueChange={(productId) => {\n                                          const selectedProduct = products.find((p: any) => p._id === productId);\n                                          if (selectedProduct) {\n                                            field.onChange(selectedProduct.name);\n                                            form.setValue(`items.${index}.productId`, selectedProduct._id);\n                                            form.setValue(`items.${index}.unitPrice`, selectedProduct.sellingPrice);\n                                            updateItemTotal(index);\n                                          }\n                                        }}\n                                      >\n                                        <SelectTrigger data-testid={`select-product-${index}`}>\n                                          <SelectValue placeholder=\"Select product from inventory\">\n                                            {field.value || 'Select product from inventory'}\n                                          </SelectValue>\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                          {products.filter((p: any) => p.stockQty > 0).map((product: any) => (\n                                            <SelectItem key={product._id} value={product._id}>\n                                              {product.name} - ₹{product.sellingPrice} ({product.stockQty} in stock)\n                                            </SelectItem>\n                                          ))}\n                                          {products.filter((p: any) => p.stockQty > 0).length === 0 && (\n                                            <div className=\"p-2 text-sm text-muted-foreground text-center\">\n                                              No products in stock\n                                            </div>\n                                          )}\n                                        </SelectContent>\n                                      </Select>\n                                    ) : (\n                                      <Input {...field} placeholder=\"Service name\" data-testid={`input-item-name-${index}`} />\n                                    )}\n                                  </FormItem>\n                                )}\n                              />\n                            </TableCell>\n                            <TableCell>\n                              <FormField\n                                control={form.control}\n                                name={`items.${index}.quantity`}\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <Input\n                                      type=\"number\"\n                                      {...field}\n                                      onChange={(e) => {\n                                        field.onChange(parseFloat(e.target.value) || 0);\n                                        updateItemTotal(index);\n                                      }}\n                                      className=\"w-20\"\n                                      data-testid={`input-item-quantity-${index}`}\n                                    />\n                                  </FormItem>\n                                )}\n                              />\n                            </TableCell>\n                            <TableCell>\n                              <FormField\n                                control={form.control}\n                                name={`items.${index}.unitPrice`}\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <Input\n                                      type=\"number\"\n                                      {...field}\n                                      onChange={(e) => {\n                                        field.onChange(parseFloat(e.target.value) || 0);\n                                        updateItemTotal(index);\n                                      }}\n                                      className=\"w-24\"\n                                      data-testid={`input-item-price-${index}`}\n                                    />\n                                  </FormItem>\n                                )}\n                              />\n                            </TableCell>\n                            <TableCell>\n                              <FormField\n                                control={form.control}\n                                name={`items.${index}.hasGst`}\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <input\n                                      type=\"checkbox\"\n                                      checked={field.value}\n                                      onChange={() => toggleGst(index)}\n                                      className=\"h-4 w-4\"\n                                      data-testid={`checkbox-gst-${index}`}\n                                    />\n                                  </FormItem>\n                                )}\n                              />\n                            </TableCell>\n                            <TableCell>₹{item.total.toLocaleString()}</TableCell>\n                            <TableCell>\n                              <FormField\n                                control={form.control}\n                                name={`items.${index}.hasWarranty`}\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <input\n                                      type=\"checkbox\"\n                                      checked={field.value}\n                                      onChange={field.onChange}\n                                      className=\"h-4 w-4\"\n                                      data-testid={`checkbox-warranty-${index}`}\n                                    />\n                                  </FormItem>\n                                )}\n                              />\n                            </TableCell>\n                            <TableCell>\n                              {items.length > 1 && (\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => removeItem(index)}\n                                  data-testid={`button-remove-item-${index}`}\n                                >\n                                  <Minus className=\"h-4 w-4\" />\n                                </Button>\n                              )}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\">Discount</h3>\n                  \n                  <div className=\"flex gap-2\">\n                    <FormField\n                      control={form.control}\n                      name=\"couponCode\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex-1\">\n                          <FormLabel>Coupon Code</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Enter coupon code\" data-testid=\"input-coupon-code\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"self-end\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={applyCoupon}\n                        disabled={!couponCode || validateCouponMutation.isPending}\n                        data-testid=\"button-apply-coupon\"\n                      >\n                        <Tag className=\"h-4 w-4 mr-1\" />\n                        Apply\n                      </Button>\n                    </div>\n                  </div>\n\n                  {couponValidation && (\n                    <Badge variant=\"default\" data-testid=\"badge-coupon-applied\">\n                      Coupon Applied: {couponValidation.coupon.discountType === 'percentage'\n                        ? `${couponValidation.coupon.discountValue}% off`\n                        : `₹${couponValidation.coupon.discountValue} off`}\n                    </Badge>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Additional notes...\" data-testid=\"textarea-notes\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"terms\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Terms & Conditions</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Payment terms and conditions...\" data-testid=\"textarea-terms\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-invoice\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createInvoiceMutation.isPending}\n                data-testid=\"button-create-invoice\"\n              >\n                {createInvoiceMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":26174},"client/src/pages/UserManagement.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { UserPlus, Trash2, Edit, Shield, X, FileText } from 'lucide-react';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { queryClient } from '@/lib/queryClient';\nimport { Link } from 'wouter';\nimport { ImageCropDialog } from '@/components/ImageCropDialog';\n\ninterface User {\n  _id: string;\n  name: string;\n  email: string;\n  mobileNumber?: string;\n  role: string;\n  isActive: boolean;\n}\n\nconst roles = ['Admin', 'Manager', 'Inventory Manager', 'Sales Executive', 'HR Manager', 'Service Staff'];\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isCropDialogOpen, setIsCropDialogOpen] = useState(false);\n  const [imageToCrop, setImageToCrop] = useState<string>(\"\");\n\n  // Form states for creating user\n  const [newUserName, setNewUserName] = useState('');\n  const [newUserEmail, setNewUserEmail] = useState('');\n  const [newUserMobile, setNewUserMobile] = useState('');\n  const [newUserPassword, setNewUserPassword] = useState('');\n  const [newUserRole, setNewUserRole] = useState('Service Staff');\n\n  // Form states for editing user\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    role: \"\",\n    department: \"\",\n    salary: \"\",\n    joiningDate: \"\",\n    panNumber: \"\",\n    aadharNumber: \"\",\n    photo: \"\",\n    documents: [] as string[],\n    isActive: true,\n  });\n\n  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files) return;\n\n    const filePromises = Array.from(files).map(file => {\n      return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const base64 = reader.result as string;\n          resolve(base64);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(file);\n      });\n    });\n\n    try {\n      const base64Files = await Promise.all(filePromises);\n      setFormData({ ...formData, documents: [...formData.documents, ...base64Files] });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload files\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const removeDocument = (index: number) => {\n    setFormData({\n      ...formData,\n      documents: formData.documents.filter((_, i) => i !== index)\n    });\n  };\n\n  const handlePhotoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = () => {\n      setImageToCrop(reader.result as string);\n      setIsCropDialogOpen(true);\n    };\n    reader.onerror = () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload photo\",\n        variant: \"destructive\",\n      });\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleCropComplete = (croppedImage: string) => {\n    setFormData({ ...formData, photo: croppedImage });\n  };\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: { name: string; email: string; mobileNumber: string; password: string; role: string }) => {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create user');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setIsCreateDialogOpen(false);\n      setNewUserName('');\n      setNewUserEmail('');\n      setNewUserMobile('');\n      setNewUserPassword('');\n      setNewUserRole('Service Staff');\n      toast({\n        title: 'User created',\n        description: 'The user has been created successfully.',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/users/${id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update user');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setIsEditDialogOpen(false);\n      setSelectedUser(null);\n      toast({\n        title: 'User updated',\n        description: 'The user has been updated successfully.',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/users/${id}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to delete user');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: 'User deleted',\n        description: 'The user has been deleted successfully.',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCreateUser = (e: React.FormEvent) => {\n    e.preventDefault();\n    createUserMutation.mutate({\n      name: newUserName,\n      email: newUserEmail,\n      mobileNumber: newUserMobile,\n      password: newUserPassword,\n      role: newUserRole,\n    });\n  };\n\n  const handleEditUser = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (selectedUser) {\n      updateUserMutation.mutate({\n        id: selectedUser._id,\n        data: {\n          name: formData.name,\n          mobileNumber: formData.phone,\n          role: formData.role,\n          isActive: formData.isActive,\n        },\n      });\n    }\n  };\n\n  const handleDeleteUser = (id: string) => {\n    if (confirm('Are you sure you want to delete this user?')) {\n      deleteUserMutation.mutate(id);\n    }\n  };\n\n  const openEditDialog = (user: User) => {\n    setSelectedUser(user);\n    setFormData({\n      name: user.name,\n      email: user.email,\n      phone: user.mobileNumber || '',\n      role: user.role,\n      department: \"\",\n      salary: \"\",\n      joiningDate: \"\",\n      panNumber: \"\",\n      aadharNumber: \"\",\n      photo: \"\",\n      documents: [],\n      isActive: user.isActive,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'Admin':\n        return 'bg-red-500';\n      case 'Manager':\n        return 'bg-yellow-500';\n      case 'Inventory Manager':\n        return 'bg-blue-500';\n      case 'Sales Executive':\n        return 'bg-green-500';\n      case 'HR Manager':\n        return 'bg-purple-500';\n      case 'Service Staff':\n        return 'bg-orange-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Shield className=\"h-8 w-8\" />\n            User Management\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage user accounts and permissions. All employees have user accounts.\n          </p>\n        </div>\n        <Link href=\"/employees\">\n          <Button data-testid=\"button-create-user\">\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Add Employee / User\n          </Button>\n        </Link>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Users</CardTitle>\n          <CardDescription>A list of all users in the system</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <p>Loading users...</p>\n          ) : (\n            <div className=\"space-y-4\">\n              {users.map((user) => (\n                <div\n                  key={user._id}\n                  className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50\"\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3\">\n                      <h3 className=\"font-semibold\">{user.name}</h3>\n                      <Badge className={getRoleBadgeColor(user.role)}>{user.role}</Badge>\n                      {!user.isActive && <Badge variant=\"outline\">Inactive</Badge>}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{user.email}</p>\n                    {user.mobileNumber && (\n                      <p className=\"text-sm text-muted-foreground\">📱 {user.mobileNumber}</p>\n                    )}\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => openEditDialog(user)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => handleDeleteUser(user._id)}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n            <DialogDescription>\n              Update user information and permissions.\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleEditUser} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-name\">Name *</Label>\n                <Input\n                  id=\"edit-name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  required\n                  data-testid=\"input-edit-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-email\">Email *</Label>\n                <Input\n                  id=\"edit-email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  required\n                  data-testid=\"input-edit-email\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-photo\">User Photo</Label>\n              <Input\n                id=\"edit-photo\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handlePhotoUpload}\n                data-testid=\"input-edit-photo\"\n              />\n              {formData.photo && (\n                <div className=\"flex items-center gap-4 mt-2\">\n                  <img \n                    src={formData.photo} \n                    alt=\"User preview\" \n                    className=\"h-20 w-20 rounded-full object-cover border-2\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setFormData({ ...formData, photo: \"\" })}\n                    data-testid=\"button-remove-photo\"\n                  >\n                    Remove Photo\n                  </Button>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-phone\">Phone *</Label>\n                <Input\n                  id=\"edit-phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  required\n                  placeholder=\"9619523254\"\n                  data-testid=\"input-edit-phone\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  10-digit mobile number for WhatsApp OTP login\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-role\">Role *</Label>\n                <Select\n                  value={formData.role}\n                  onValueChange={(value) => setFormData({ ...formData, role: value })}\n                  required\n                >\n                  <SelectTrigger data-testid=\"select-edit-role\">\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roles.map((role) => (\n                      <SelectItem key={role} value={role}>\n                        {role}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {formData.role !== 'Admin' && (\n              <>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-department\">Department</Label>\n                    <Input\n                      id=\"edit-department\"\n                      value={formData.department}\n                      onChange={(e) => setFormData({ ...formData, department: e.target.value })}\n                      placeholder=\"e.g., Service, Sales\"\n                      data-testid=\"input-edit-department\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-salary\">Salary</Label>\n                    <Input\n                      id=\"edit-salary\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.salary}\n                      onChange={(e) => setFormData({ ...formData, salary: e.target.value })}\n                      data-testid=\"input-edit-salary\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-joiningDate\">Joining Date</Label>\n                  <Input\n                    id=\"edit-joiningDate\"\n                    type=\"date\"\n                    value={formData.joiningDate}\n                    onChange={(e) => setFormData({ ...formData, joiningDate: e.target.value })}\n                    data-testid=\"input-edit-joiningdate\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-panNumber\">PAN Number</Label>\n                    <Input\n                      id=\"edit-panNumber\"\n                      value={formData.panNumber}\n                      onChange={(e) => setFormData({ ...formData, panNumber: e.target.value })}\n                      placeholder=\"ABCDE1234F\"\n                      data-testid=\"input-edit-pan\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-aadharNumber\">Aadhar Number</Label>\n                    <Input\n                      id=\"edit-aadharNumber\"\n                      value={formData.aadharNumber}\n                      onChange={(e) => setFormData({ ...formData, aadharNumber: e.target.value })}\n                      placeholder=\"1234 5678 9012\"\n                      data-testid=\"input-edit-aadhar\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-documents\">Upload Documents (PDF)</Label>\n                  <Input\n                    id=\"edit-documents\"\n                    type=\"file\"\n                    accept=\".pdf\"\n                    multiple\n                    onChange={handleFileUpload}\n                    data-testid=\"input-edit-documents\"\n                  />\n                  {formData.documents.length > 0 && (\n                    <div className=\"space-y-2 mt-2\">\n                      <p className=\"text-sm text-muted-foreground\">Uploaded files ({formData.documents.length}):</p>\n                      <div className=\"space-y-1\">\n                        {formData.documents.map((doc, index) => (\n                          <div key={index} className=\"flex items-center gap-2 p-2 bg-muted rounded-md\">\n                            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"text-sm flex-1\">Document {index + 1}</span>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeDocument(index)}\n                              data-testid={`button-remove-document-${index}`}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </>\n            )}\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"is-active\"\n                checked={formData.isActive}\n                onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                data-testid=\"switch-active\"\n              />\n              <Label htmlFor=\"is-active\">Active</Label>\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditDialogOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateUserMutation.isPending} data-testid=\"button-update\">\n                {updateUserMutation.isPending ? 'Updating...' : 'Update User'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <ImageCropDialog\n        open={isCropDialogOpen}\n        onOpenChange={setIsCropDialogOpen}\n        imageSrc={imageToCrop}\n        onCropComplete={handleCropComplete}\n      />\n    </div>\n  );\n}\n","size_bytes":20289},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/StatusBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { CheckCircle, Clock, AlertCircle, Loader2 } from \"lucide-react\";\n\ntype ServiceStatus = \"inquired\" | \"working\" | \"waiting\" | \"completed\";\ntype StockStatus = \"in_stock\" | \"low_stock\" | \"out_of_stock\";\ntype PaymentStatus = \"paid\" | \"partial\" | \"due\";\n\ninterface StatusBadgeProps {\n  type: \"service\" | \"stock\" | \"payment\";\n  status: ServiceStatus | StockStatus | PaymentStatus;\n  className?: string;\n}\n\nconst serviceStatusConfig = {\n  inquired: {\n    label: \"Inquired\",\n    phase: \"Phase 1\",\n    icon: Clock,\n    className: \"bg-status-inquired/10 text-status-inquired border-status-inquired/20\",\n  },\n  waiting: {\n    label: \"Waiting for Parts\",\n    phase: \"Phase 3\",\n    icon: AlertCircle,\n    className: \"bg-status-waiting/10 text-status-waiting border-status-waiting/20\",\n  },\n  working: {\n    label: \"Working\",\n    phase: \"Phase 2\",\n    icon: Loader2,\n    className: \"bg-status-working/10 text-status-working border-status-working/20\",\n  },\n  completed: {\n    label: \"Completed\",\n    phase: \"Phase 4\",\n    icon: CheckCircle,\n    className: \"bg-status-completed/10 text-status-completed border-status-completed/20\",\n  },\n};\n\nconst stockStatusConfig = {\n  in_stock: {\n    label: \"In Stock\",\n    className: \"bg-success/10 text-success border-success/20\",\n  },\n  low_stock: {\n    label: \"Low Stock\",\n    className: \"bg-warning/10 text-warning border-warning/20\",\n  },\n  out_of_stock: {\n    label: \"Out of Stock\",\n    className: \"bg-destructive/10 text-destructive border-destructive/20\",\n  },\n};\n\nconst paymentStatusConfig = {\n  paid: {\n    label: \"Paid\",\n    className: \"bg-success/10 text-success border-success/20\",\n  },\n  partial: {\n    label: \"Partial\",\n    className: \"bg-warning/10 text-warning border-warning/20\",\n  },\n  due: {\n    label: \"Due\",\n    className: \"bg-destructive/10 text-destructive border-destructive/20\",\n  },\n};\n\nexport function StatusBadge({ type, status, className }: StatusBadgeProps) {\n  if (type === \"service\") {\n    const config = serviceStatusConfig[status as ServiceStatus];\n    const Icon = config.icon;\n    return (\n      <div className=\"flex items-center gap-2\">\n        <span className=\"text-xs font-semibold text-gray-600 dark:text-gray-400\" data-testid={`phase-${status}`}>\n          {config.phase}\n        </span>\n        <Badge variant=\"outline\" className={cn(\"border\", config.className, className)} data-testid={`status-${status}`}>\n          <Icon className=\"h-3 w-3 mr-1\" />\n          {config.label}\n        </Badge>\n      </div>\n    );\n  }\n\n  if (type === \"stock\") {\n    const config = stockStatusConfig[status as StockStatus];\n    return (\n      <Badge variant=\"outline\" className={cn(\"border\", config.className, className)} data-testid={`status-${status}`}>\n        {config.label}\n      </Badge>\n    );\n  }\n\n  const config = paymentStatusConfig[status as PaymentStatus];\n  return (\n    <Badge variant=\"outline\" className={cn(\"border\", config.className, className)} data-testid={`status-${status}`}>\n      {config.label}\n    </Badge>\n  );\n}\n","size_bytes":3072},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/lib/auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from './queryClient';\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n  mobileNumber?: string;\n  permissions?: Record<string, string[]>;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, name: string, role?: string) => Promise<void>;\n  logout: () => Promise<void>;\n  sendOTP: (mobileNumber: string) => Promise<void>;\n  verifyOTP: (otp: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n\n  const { data: userData, isLoading, error } = useQuery<User>({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n    refetchOnWindowFocus: false,\n    staleTime: 0,\n  });\n\n  useEffect(() => {\n    if (userData) {\n      setUser(userData);\n    } else if (!isLoading) {\n      setUser(null);\n    }\n  }, [userData, isLoading]);\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password }: { email: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/auth/login', { email, password });\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      setUser(data);\n      await queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      await queryClient.refetchQueries({ queryKey: ['/api/auth/me'] });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async ({ email, password, name, role }: { email: string; password: string; name: string; role?: string }) => {\n      const response = await apiRequest('POST', '/api/auth/register', { email, password, name, role });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUser(data);\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', '/api/auth/logout');\n    },\n    onSuccess: () => {\n      setUser(null);\n      queryClient.clear();\n    },\n  });\n\n  const login = async (email: string, password: string) => {\n    await loginMutation.mutateAsync({ email, password });\n  };\n\n  const register = async (email: string, password: string, name: string, role?: string) => {\n    await registerMutation.mutateAsync({ email, password, name, role });\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  const sendOTPMutation = useMutation({\n    mutationFn: async ({ mobileNumber }: { mobileNumber: string }) => {\n      const response = await apiRequest('POST', '/api/auth/send-otp', { mobileNumber });\n      return response.json();\n    },\n  });\n\n  const verifyOTPMutation = useMutation({\n    mutationFn: async ({ otp }: { otp: string }) => {\n      const response = await apiRequest('POST', '/api/auth/verify-otp', { otp });\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      setUser(data);\n      await queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      await queryClient.refetchQueries({ queryKey: ['/api/auth/me'] });\n    },\n  });\n\n  const sendOTP = async (mobileNumber: string) => {\n    await sendOTPMutation.mutateAsync({ mobileNumber });\n  };\n\n  const verifyOTP = async (otp: string) => {\n    await verifyOTPMutation.mutateAsync({ otp });\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isLoading, login, register, logout, sendOTP, verifyOTP }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function hasPermission(user: User | null, resource: string, action: string): boolean {\n  if (!user?.permissions) return false;\n  const resourcePermissions = user.permissions[resource];\n  if (!resourcePermissions) return false;\n  return resourcePermissions.includes(action);\n}\n","size_bytes":4260},"server/models/ServiceVisit.ts":{"content":"import mongoose from 'mongoose';\n\nconst serviceVisitSchema = new mongoose.Schema({\n  customerId: { type: mongoose.Schema.Types.ObjectId, ref: 'RegistrationCustomer', required: true },\n  vehicleReg: { type: String, required: true },\n  status: { \n    type: String, \n    enum: ['inquired', 'working', 'waiting', 'completed'],\n    default: 'inquired'\n  },\n  handlerIds: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\n  notes: String,\n  partsUsed: [{\n    productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },\n    quantity: Number,\n    price: Number,\n  }],\n  stageTimestamps: {\n    inquired: Date,\n    working: Date,\n    waiting: Date,\n    completed: Date,\n  },\n  totalAmount: { type: Number, default: 0 },\n  beforeImages: [{ type: String }],\n  afterImages: [{ type: String }],\n  invoiceNumber: { type: String },\n  invoiceDate: { type: Date },\n}, { timestamps: true });\n\nserviceVisitSchema.pre('save', function(next) {\n  if (!this.stageTimestamps) {\n    this.stageTimestamps = {};\n  }\n  if (!this.stageTimestamps.inquired) {\n    this.stageTimestamps.inquired = new Date();\n  }\n  if (this.isModified('status') && this.status) {\n    (this.stageTimestamps as any)[this.status] = new Date();\n  }\n  next();\n});\n\nexport const ServiceVisit = mongoose.models.ServiceVisit || mongoose.model('ServiceVisit', serviceVisitSchema);\n","size_bytes":1338},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"WHATSAPP_INVOICE_TEMPLATE_SETUP.md":{"content":"# WhatsApp Invoice Template Setup Guide\n\n## Overview\nThis guide explains how to set up a WhatsApp message template to automatically send invoice PDFs to customers when an invoice is approved in your Mauli Car World system.\n\n## How It Works\n\n### The Key Concept\nWhen creating a WhatsApp template with a **Document** header:\n- The PDF you upload during template creation is **ONLY A SAMPLE** for approval purposes\n- The **actual invoice PDF** sent to customers is provided dynamically by the system\n- Each customer receives their own unique invoice PDF automatically\n\n### The Flow\n1. Invoice is approved in your system\n2. System generates a unique PDF for that specific invoice\n3. PDF is automatically sent to customer's WhatsApp with personalized details\n4. Customer receives the PDF instantly on WhatsApp\n\n---\n\n## Step-by-Step Template Creation\n\n### Step 1: Access Your WhatsApp Dashboard\nGo to: `https://superfast.akst.in/` (or your WhatsApp provider's dashboard)\n\n### Step 2: Create New Template\n\nClick on **\"Message Templates\"** → **\"Create Template\"**\n\n### Step 3: Fill in Template Details\n\n#### 1. **Template Name**\n```\ninvoicetest\n```\n(You can use a different name, but update the environment variable `WHATSAPP_INVOICE_TEMPLATE` to match)\n\n#### 2. **Language**\n```\nEnglish\n```\n\n#### 3. **Template Category**\n```\nUtility\n```\n**Important:** Use \"Utility\" category for invoices, receipts, and billing documents.\n\n---\n\n### Step 4: Configure Template Header\n\n#### Select Header Type\n- ✅ Select: **\"Document\"**\n- ❌ NOT: Image, Video, Text, or Location\n\n#### Upload Sample PDF\nClick **\"Choose File\"** and upload **ANY sample invoice PDF**\n\n**Important Notes:**\n- This PDF is **ONLY for WhatsApp approval** - it's not the actual PDF customers will receive\n- You can use any invoice PDF from your system\n- The actual PDFs sent to customers are generated dynamically for each invoice\n- Max file size: 100MB\n- Format: PDF only\n\n---\n\n### Step 5: Configure Template Body\n\nIn the **\"Template Format\"** field, enter:\n\n```\nHello {{1}},\n\nYour invoice #{{2}} for {{3}} has been generated.\n\nTotal Amount: {{4}}\n\nThank you for your business!\n```\n\n**Variable Breakdown:**\n- `{{1}}` = Customer Name (e.g., \"Ramesh Kumar\")\n- `{{2}}` = Invoice Number (e.g., \"INV/2025/001\")\n- `{{3}}` = Service Description (e.g., \"Car Servicing +2 more\")\n- `{{4}}` = Total Amount (e.g., \"₹15,500\")\n\n---\n\n### Step 6: Configure Template Footer (Optional)\n\nAdd this footer for branding:\n\n```\nMauli Car World - Contact: 7507219775\n```\n\nMax characters: 60\n\n---\n\n### Step 7: Submit for Approval\n\n1. Click **\"Submit\"** or **\"Create Template\"**\n2. WhatsApp will review your template\n3. **Approval Time:** Usually within 1-24 hours\n4. You'll receive a notification once approved\n\n---\n\n## Complete Template Structure\n\nHere's how your final template should look:\n\n```\n┌─────────────────────────────────────┐\n│  HEADER (Document - Dynamic)        │\n│  📄 Invoice_INV_2025_001.pdf        │\n└─────────────────────────────────────┘\n\nBODY:\nHello Ramesh Kumar,\n\nYour invoice #INV/2025/001 for Car Servicing +2 more has been generated.\n\nTotal Amount: ₹15,500\n\nThank you for your business!\n\n┌─────────────────────────────────────┐\n│  FOOTER                             │\n│  Mauli Car World - Contact:         │\n│  7507219775                         │\n└─────────────────────────────────────┘\n```\n\n---\n\n## Environment Configuration\n\nIf you used a different template name, update your environment variables:\n\n1. Go to your Replit project\n2. Add environment variable:\n   ```\n   WHATSAPP_INVOICE_TEMPLATE=your_template_name\n   ```\n\nIf not set, the system defaults to `invoicetest`\n\n---\n\n## How the System Uses This Template\n\nWhen an invoice is approved:\n\n1. **PDF Generation**: System generates a unique PDF for the specific invoice\n2. **Public URL**: PDF is made accessible via a public URL\n3. **WhatsApp API Call**: System calls WhatsApp API with:\n   - **Header Parameter**: The unique PDF URL (not the sample you uploaded!)\n   - **Body Parameters**: Customer name, invoice number, service, amount\n4. **Delivery**: Customer receives their specific invoice PDF on WhatsApp\n\n### Example API Payload\n```json\n{\n  \"messaging_product\": \"whatsapp\",\n  \"to\": \"919876543210\",\n  \"type\": \"template\",\n  \"template\": {\n    \"name\": \"invoicetest\",\n    \"language\": {\"code\": \"en\"},\n    \"components\": [\n      {\n        \"type\": \"header\",\n        \"parameters\": [{\n          \"type\": \"document\",\n          \"document\": {\n            \"link\": \"https://your-domain.repl.co/api/invoices/123/pdf\",\n            \"filename\": \"Invoice_INV_2025_001.pdf\"\n          }\n        }]\n      },\n      {\n        \"type\": \"body\",\n        \"parameters\": [\n          {\"type\": \"text\", \"text\": \"Ramesh Kumar\"},\n          {\"type\": \"text\", \"text\": \"INV/2025/001\"},\n          {\"type\": \"text\", \"text\": \"Car Servicing +2 more\"},\n          {\"type\": \"text\", \"text\": \"₹15,500\"}\n        ]\n      }\n    ]\n  }\n}\n```\n\nNotice: The PDF link is dynamically generated for each invoice!\n\n---\n\n## Testing the Integration\n\n### Step 1: Wait for Template Approval\nCheck your WhatsApp dashboard for approval status\n\n### Step 2: Create a Test Invoice\n1. Log into your system as Admin\n2. Create a service visit\n3. Complete the service visit\n4. Generate an invoice\n5. **Approve the invoice**\n\n### Step 3: Check Logs\nThe system will log the WhatsApp sending process:\n```\n📱 Sending WhatsApp Invoice Template with PDF\n================================\nTemplate Name: invoicetest\nTo: 919876543210\nCustomer Name: Ramesh Kumar\nInvoice Number: INV/2025/001\nService: Car Servicing +2 more\nTotal Amount: ₹15,500\nPDF URL: https://your-domain.repl.co/api/invoices/123/pdf\n✅ WhatsApp Invoice Response (250ms)\nStatus: 200\nResponse: {\"success\":true}\n```\n\n### Step 4: Verify on Customer's WhatsApp\nThe customer should receive:\n- ✅ PDF document attachment\n- ✅ Personalized message with their details\n- ✅ Correct invoice number and amount\n\n---\n\n## Troubleshooting\n\n### Template Not Approved\n**Issue:** Template stuck in review\n**Solution:**\n- Check that Category is \"Utility\" (not Marketing)\n- Ensure sample PDF is appropriate business document\n- Verify no promotional language in body text\n- Contact WhatsApp support if delayed > 24 hours\n\n### Template Rejected\n**Common Reasons:**\n- Wrong category selected\n- Promotional language in utility template\n- Sample PDF contains inappropriate content\n- Too many variables (max 10 per component)\n\n### WhatsApp Not Sending\n**Check:**\n1. Template is approved (status = \"Approved\")\n2. Template name in code matches dashboard\n3. Customer has valid WhatsApp number\n4. WhatsApp API credentials are correct\n5. PDF URL is publicly accessible (HTTPS required)\n\n### PDF URL Not Accessible\n**Issue:** WhatsApp cannot download PDF\n**Solution:**\n- Verify your Replit domain is public\n- Test PDF URL in browser directly\n- Check PDF endpoint returns correct Content-Type: application/pdf\n- Ensure no authentication required for PDF download\n\n---\n\n## Common Questions\n\n### Q: Can I use different template names?\n**A:** Yes! Just update the `WHATSAPP_INVOICE_TEMPLATE` environment variable to match your template name.\n\n### Q: Can I customize the message text?\n**A:** Yes, but you'll need to:\n1. Update the template in WhatsApp dashboard\n2. Wait for re-approval\n3. The variables {{1}}, {{2}}, {{3}}, {{4}} must match what the code sends\n\n### Q: Can I send invoices without a template?\n**A:** No. WhatsApp Business API requires pre-approved templates for business-initiated messages outside the 24-hour window.\n\n### Q: How much does it cost per message?\n**A:** Check with your WhatsApp provider (cloudapi.akst.in). Typically:\n- Utility conversations: ~₹0.25 - ₹0.50 per message (India)\n- Pricing varies by country\n\n### Q: Can I add buttons to the template?\n**A:** Yes! You can add:\n- Quick Reply buttons (up to 3)\n- Call-to-Action buttons (Call Phone, Visit Website)\n- Add these in the template creation form\n\n### Q: What if customer doesn't have WhatsApp?\n**A:** The message will fail silently. The system logs the error but continues processing. Consider implementing email notifications as a fallback.\n\n---\n\n## Summary Checklist\n\n- [ ] Created template named \"invoicetest\" (or custom name)\n- [ ] Selected \"Utility\" category\n- [ ] Selected \"Document\" header type\n- [ ] Uploaded sample PDF (any invoice)\n- [ ] Added body text with 4 variables: {{1}} {{2}} {{3}} {{4}}\n- [ ] Added optional footer\n- [ ] Submitted template for approval\n- [ ] Template approved by WhatsApp\n- [ ] Tested by approving an invoice\n- [ ] Verified customer received PDF on WhatsApp\n\n---\n\n## Support\n\nIf you encounter issues:\n1. Check the server logs in your Replit console\n2. Verify template status in WhatsApp dashboard\n3. Test PDF URL accessibility\n4. Contact cloudapi.akst.in support for API issues\n\n---\n\n**Remember:** The PDF you upload during template creation is ONLY for approval. Each customer will automatically receive their own unique invoice PDF when you approve their invoice!\n","size_bytes":9302},"server/schemas.ts":{"content":"import { z } from \"zod\";\n\nexport const insertCustomerSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  mobileNumber: z.string().min(10, \"Mobile number must be at least 10 digits\"),\n  alternativeNumber: z.string().optional(),\n  email: z.string().email(\"Invalid email address\"),\n  address: z.string().min(1, \"Address is required\"),\n  city: z.string().min(1, \"City is required\"),\n  taluka: z.string().min(1, \"Taluka is required\"),\n  district: z.string().min(1, \"District is required\"),\n  state: z.string().min(1, \"State is required\"),\n  pinCode: z.string().min(6, \"Pin code must be 6 digits\"),\n  referralSource: z.string().optional(),\n});\n\nconst warrantyCardSchema = z.object({\n  partId: z.string(),\n  partName: z.string(),\n  fileData: z.string(),\n});\n\nexport const insertVehicleSchema = z.object({\n  customerId: z.string().min(1, \"Customer ID is required\"),\n  vehicleNumber: z.string().optional(),\n  vehicleBrand: z.string().min(1, \"Vehicle brand is required\"),\n  vehicleModel: z.string().min(1, \"Vehicle model is required\"),\n  customModel: z.string().optional(),\n  variant: z.enum(['Top', 'Base']).optional(),\n  color: z.string().optional(),\n  yearOfPurchase: z.number().optional(),\n  vehiclePhoto: z.string().min(1, \"Vehicle photo is required\"),\n  isNewVehicle: z.boolean().optional(),\n  chassisNumber: z.string().optional(),\n  selectedParts: z.array(z.string()).optional(),\n  warrantyCards: z.array(warrantyCardSchema).optional(),\n});\n\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\n","size_bytes":1597},"server/utils/activityLogger.ts":{"content":"import { ActivityLog } from \"../models/ActivityLog\";\n\ninterface LogActivityParams {\n  userId: string;\n  userName: string;\n  userRole: string;\n  action: 'create' | 'update' | 'delete' | 'login' | 'logout' | 'approve' | 'reject' | 'complete' | 'other';\n  resource: 'product' | 'order' | 'customer' | 'employee' | 'inventory' | 'supplier' | 'purchase_order' | 'service_visit' | 'attendance' | 'leave' | 'task' | 'communication' | 'feedback' | 'support_ticket' | 'user' | 'other';\n  resourceId?: string;\n  description: string;\n  details?: any;\n  ipAddress?: string;\n}\n\nexport async function logActivity(params: LogActivityParams) {\n  try {\n    await ActivityLog.create({\n      userId: params.userId,\n      userName: params.userName,\n      userRole: params.userRole,\n      action: params.action,\n      resource: params.resource,\n      resourceId: params.resourceId,\n      description: params.description,\n      details: params.details,\n      ipAddress: params.ipAddress,\n    });\n  } catch (error) {\n    console.error('Failed to log activity:', error);\n  }\n}\n","size_bytes":1053},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":495},"client/src/pages/Inventory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { DataTable } from \"@/components/DataTable\";\nimport { Plus, Search, ArrowUpCircle, ArrowDownCircle, AlertTriangle, Package, Undo2, Barcode } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\n\nexport default function Inventory() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isTransactionDialogOpen, setIsTransactionDialogOpen] = useState(false);\n  const [isReturnDialogOpen, setIsReturnDialogOpen] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [selectedTransaction, setSelectedTransaction] = useState<any>(null);\n  const [isTransactionDetailOpen, setIsTransactionDetailOpen] = useState(false);\n  const { toast } = useToast();\n\n  const [transactionFormData, setTransactionFormData] = useState({\n    productId: \"\",\n    type: \"IN\",\n    quantity: \"\",\n    reason: \"\",\n    supplierId: \"\",\n    batchNumber: \"\",\n    unitCost: \"\",\n    warehouseLocation: \"\",\n    notes: \"\",\n  });\n\n  const [returnFormData, setReturnFormData] = useState({\n    productId: \"\",\n    customerId: \"\",\n    orderId: \"\",\n    quantity: \"\",\n    reason: \"\",\n    condition: \"defective\",\n    refundAmount: \"\",\n    restockable: true,\n    notes: \"\",\n  });\n\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/inventory-transactions\"],\n  });\n\n  const { data: products = [] } = useQuery<any[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: lowStockProducts = [] } = useQuery<any[]>({\n    queryKey: [\"/api/products/low-stock\"],\n  });\n\n  const { data: suppliers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const { data: purchaseOrders = [] } = useQuery<any[]>({\n    queryKey: [\"/api/purchase-orders\"],\n  });\n\n  const { data: productReturns = [] } = useQuery<any[]>({\n    queryKey: [\"/api/product-returns\"],\n  });\n\n  const createTransactionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/inventory-transactions', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/inventory-transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/products/low-stock'] });\n      setIsTransactionDialogOpen(false);\n      setTransactionFormData({\n        productId: \"\",\n        type: \"IN\",\n        quantity: \"\",\n        reason: \"\",\n        supplierId: \"\",\n        batchNumber: \"\",\n        unitCost: \"\",\n        warehouseLocation: \"\",\n        notes: \"\",\n      });\n      toast({\n        title: \"Success\",\n        description: \"Inventory transaction created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createReturnMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/product-returns', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/product-returns'] });\n      setIsReturnDialogOpen(false);\n      setReturnFormData({\n        productId: \"\",\n        customerId: \"\",\n        orderId: \"\",\n        quantity: \"\",\n        reason: \"\",\n        condition: \"defective\",\n        refundAmount: \"\",\n        restockable: true,\n        notes: \"\",\n      });\n      toast({\n        title: \"Success\",\n        description: \"Product return created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create return\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const processReturnMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PATCH', `/api/product-returns/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/product-returns'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/inventory-transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Success\",\n        description: \"Product return processed successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process return\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateTransaction = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const quantity = parseInt(transactionFormData.quantity);\n    const unitCost = parseFloat(transactionFormData.unitCost);\n    \n    if (!transactionFormData.productId || !transactionFormData.reason) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (isNaN(quantity) || quantity <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid quantity greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const transactionData: any = {\n      productId: transactionFormData.productId,\n      type: transactionFormData.type,\n      quantity,\n      reason: transactionFormData.reason,\n    };\n    \n    if (transactionFormData.supplierId) transactionData.supplierId = transactionFormData.supplierId;\n    if (transactionFormData.batchNumber) transactionData.batchNumber = transactionFormData.batchNumber;\n    if (!isNaN(unitCost)) transactionData.unitCost = unitCost;\n    if (transactionFormData.warehouseLocation) transactionData.warehouseLocation = transactionFormData.warehouseLocation;\n    if (transactionFormData.notes) transactionData.notes = transactionFormData.notes;\n    \n    createTransactionMutation.mutate(transactionData);\n  };\n\n  const handleCreateReturn = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const quantity = parseInt(returnFormData.quantity);\n    const refundAmount = parseFloat(returnFormData.refundAmount);\n    \n    if (!returnFormData.productId || !returnFormData.reason) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (isNaN(quantity) || quantity <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid quantity\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const returnData: any = {\n      productId: returnFormData.productId,\n      quantity,\n      reason: returnFormData.reason,\n      condition: returnFormData.condition,\n      restockable: returnFormData.restockable,\n    };\n    \n    if (returnFormData.customerId) returnData.customerId = returnFormData.customerId;\n    if (returnFormData.orderId) returnData.orderId = returnFormData.orderId;\n    if (!isNaN(refundAmount)) returnData.refundAmount = refundAmount;\n    if (returnFormData.notes) returnData.notes = returnFormData.notes;\n    \n    createReturnMutation.mutate(returnData);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getTransactionBadge = (type: string) => {\n    const variants: Record<string, { variant: string; icon: any; label: string; color: string }> = {\n      IN: { variant: \"outline\", icon: ArrowUpCircle, label: \"IN\", color: \"text-green-600\" },\n      OUT: { variant: \"outline\", icon: ArrowDownCircle, label: \"OUT\", color: \"text-red-600\" },\n      RETURN: { variant: \"outline\", icon: Undo2, label: \"RETURN\", color: \"text-blue-600\" },\n      ADJUSTMENT: { variant: \"outline\", icon: Package, label: \"ADJUST\", color: \"text-orange-600\" },\n    };\n    \n    const config = variants[type] || variants.IN;\n    const Icon = config.icon;\n    \n    return (\n      <Badge variant={config.variant as any} className={config.color}>\n        <Icon className=\"h-3 w-3 mr-1\" />\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const getReturnStatusBadge = (status: string) => {\n    const variants: Record<string, string> = {\n      pending: \"secondary\",\n      approved: \"default\",\n      rejected: \"destructive\",\n      processed: \"outline\",\n    };\n    \n    return (\n      <Badge variant={variants[status] as any}>\n        {status.toUpperCase()}\n      </Badge>\n    );\n  };\n\n  const filteredTransactions = transactions.filter((transaction: any) => {\n    const productName = transaction.productId?.name || \"\";\n    const reason = transaction.reason || \"\";\n    return productName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           reason.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  if (transactionsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <Skeleton className=\"h-64\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Inventory Management</h1>\n          <p className=\"text-muted-foreground mt-1\">Track stock movements, manage returns, and monitor inventory levels</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isTransactionDialogOpen} onOpenChange={setIsTransactionDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-new-transaction\" className=\"hidden\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Transaction\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create Inventory Transaction</DialogTitle>\n                <DialogDescription>\n                  Record stock movement with supply details\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateTransaction} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"productId\">Product *</Label>\n                    <Select\n                      value={transactionFormData.productId}\n                      onValueChange={(value) => setTransactionFormData({ ...transactionFormData, productId: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-product\">\n                        <SelectValue placeholder=\"Select product\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {products.map((product: any) => (\n                          <SelectItem key={product._id} value={product._id}>\n                            {product.name} - {product.brand}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"type\">Transaction Type *</Label>\n                    <Select\n                      value={transactionFormData.type}\n                      onValueChange={(value) => setTransactionFormData({ ...transactionFormData, type: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-transaction-type\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"IN\">Stock In</SelectItem>\n                        <SelectItem value=\"OUT\">Stock Out</SelectItem>\n                        <SelectItem value=\"ADJUSTMENT\">Adjustment</SelectItem>\n                        <SelectItem value=\"RETURN\">Return</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"quantity\">Quantity *</Label>\n                    <Input\n                      id=\"quantity\"\n                      type=\"number\"\n                      value={transactionFormData.quantity}\n                      onChange={(e) => setTransactionFormData({ ...transactionFormData, quantity: e.target.value })}\n                      required\n                      data-testid=\"input-transaction-quantity\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"unitCost\">Unit Cost</Label>\n                    <Input\n                      id=\"unitCost\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={transactionFormData.unitCost}\n                      onChange={(e) => setTransactionFormData({ ...transactionFormData, unitCost: e.target.value })}\n                      data-testid=\"input-unit-cost\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"reason\">Reason *</Label>\n                  <Textarea\n                    id=\"reason\"\n                    value={transactionFormData.reason}\n                    onChange={(e) => setTransactionFormData({ ...transactionFormData, reason: e.target.value })}\n                    required\n                    data-testid=\"input-transaction-reason\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"supplierId\">Supplier</Label>\n                    <Select\n                      value={transactionFormData.supplierId}\n                      onValueChange={(value) => setTransactionFormData({ ...transactionFormData, supplierId: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-supplier\">\n                        <SelectValue placeholder=\"Select supplier\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {suppliers.map((supplier: any) => (\n                          <SelectItem key={supplier._id} value={supplier._id}>\n                            {supplier.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"batchNumber\">Batch Number</Label>\n                    <Input\n                      id=\"batchNumber\"\n                      value={transactionFormData.batchNumber}\n                      onChange={(e) => setTransactionFormData({ ...transactionFormData, batchNumber: e.target.value })}\n                      data-testid=\"input-batch-number\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"warehouseLocation\">Warehouse Location</Label>\n                  <Input\n                    id=\"warehouseLocation\"\n                    value={transactionFormData.warehouseLocation}\n                    onChange={(e) => setTransactionFormData({ ...transactionFormData, warehouseLocation: e.target.value })}\n                    data-testid=\"input-warehouse-location\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Additional Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    value={transactionFormData.notes}\n                    onChange={(e) => setTransactionFormData({ ...transactionFormData, notes: e.target.value })}\n                    data-testid=\"input-transaction-notes\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsTransactionDialogOpen(false)}\n                    data-testid=\"button-cancel-transaction\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createTransactionMutation.isPending}\n                    data-testid=\"button-submit-transaction\"\n                  >\n                    {createTransactionMutation.isPending ? 'Creating...' : 'Create Transaction'}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={isReturnDialogOpen} onOpenChange={setIsReturnDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" data-testid=\"button-new-return\">\n                <Undo2 className=\"h-4 w-4 mr-2\" />\n                Product Return\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create Product Return</DialogTitle>\n                <DialogDescription>\n                  Record a product return from customer\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateReturn} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"returnProductId\">Product *</Label>\n                  <Select\n                    value={returnFormData.productId}\n                    onValueChange={(value) => setReturnFormData({ ...returnFormData, productId: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-return-product\">\n                      <SelectValue placeholder=\"Select product\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {products.map((product: any) => (\n                        <SelectItem key={product._id} value={product._id}>\n                          {product.name} - {product.brand}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"returnQuantity\">Quantity *</Label>\n                    <Input\n                      id=\"returnQuantity\"\n                      type=\"number\"\n                      value={returnFormData.quantity}\n                      onChange={(e) => setReturnFormData({ ...returnFormData, quantity: e.target.value })}\n                      required\n                      data-testid=\"input-return-quantity\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"condition\">Condition *</Label>\n                    <Select\n                      value={returnFormData.condition}\n                      onValueChange={(value) => setReturnFormData({ ...returnFormData, condition: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-return-condition\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"defective\">Defective</SelectItem>\n                        <SelectItem value=\"damaged\">Damaged</SelectItem>\n                        <SelectItem value=\"wrong_item\">Wrong Item</SelectItem>\n                        <SelectItem value=\"not_as_described\">Not as Described</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"returnReason\">Reason *</Label>\n                  <Textarea\n                    id=\"returnReason\"\n                    value={returnFormData.reason}\n                    onChange={(e) => setReturnFormData({ ...returnFormData, reason: e.target.value })}\n                    required\n                    data-testid=\"input-return-reason\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"refundAmount\">Refund Amount</Label>\n                    <Input\n                      id=\"refundAmount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={returnFormData.refundAmount}\n                      onChange={(e) => setReturnFormData({ ...returnFormData, refundAmount: e.target.value })}\n                      data-testid=\"input-refund-amount\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"restockable\">Restockable</Label>\n                    <Select\n                      value={returnFormData.restockable ? \"true\" : \"false\"}\n                      onValueChange={(value) => setReturnFormData({ ...returnFormData, restockable: value === \"true\" })}\n                    >\n                      <SelectTrigger data-testid=\"select-restockable\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"true\">Yes</SelectItem>\n                        <SelectItem value=\"false\">No</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"returnNotes\">Additional Notes</Label>\n                  <Textarea\n                    id=\"returnNotes\"\n                    value={returnFormData.notes}\n                    onChange={(e) => setReturnFormData({ ...returnFormData, notes: e.target.value })}\n                    data-testid=\"input-return-notes\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsReturnDialogOpen(false)}\n                    data-testid=\"button-cancel-return\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createReturnMutation.isPending}\n                    data-testid=\"button-submit-return\"\n                  >\n                    {createReturnMutation.isPending ? 'Creating...' : 'Create Return'}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"products\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"products\" data-testid=\"tab-products\">Products Catalog</TabsTrigger>\n          <TabsTrigger value=\"transactions\" data-testid=\"tab-transactions\">Transactions</TabsTrigger>\n          <TabsTrigger value=\"low-stock\" data-testid=\"tab-low-stock\">\n            Low Stock Alerts\n            {lowStockProducts.length > 0 && (\n              <Badge variant=\"destructive\" className=\"ml-2\">{lowStockProducts.length}</Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"returns\" data-testid=\"tab-returns\">Product Returns</TabsTrigger>\n          <TabsTrigger value=\"purchase-orders\" data-testid=\"tab-purchase-orders\">Purchase Orders</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"products\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5\" />\n                Product Catalog ({products.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n                {products.map((product: any) => (\n                  <Card key={product._id} className=\"overflow-hidden hover:shadow-lg transition-shadow\" data-testid={`card-product-${product._id}`}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <div className=\"flex-1 min-w-0\">\n                          <CardTitle className=\"text-base line-clamp-2\">{product.name}</CardTitle>\n                          <p className=\"text-sm text-muted-foreground mt-1\">{product.brand}</p>\n                        </div>\n                        <Badge \n                          variant={product.status === 'in_stock' ? 'default' : product.status === 'low_stock' ? 'secondary' : 'destructive'}\n                          className=\"shrink-0\"\n                        >\n                          {product.status === 'in_stock' ? 'In Stock' : product.status === 'low_stock' ? 'Low' : 'Out'}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Category:</span>\n                        <span className=\"font-medium\">{product.category}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Stock:</span>\n                        <span className={`font-bold ${product.stockQty <= product.minStockLevel ? 'text-red-600' : 'text-green-600'}`}>\n                          {product.stockQty} units\n                        </span>\n                      </div>\n                      <div className=\"border-t pt-3\">\n                        <div className=\"flex items-baseline justify-between\">\n                          <div>\n                            <p className=\"text-xs text-muted-foreground line-through\">₹{product.mrp.toLocaleString()}</p>\n                            <p className=\"text-lg font-bold text-primary\">₹{product.sellingPrice.toLocaleString()}</p>\n                          </div>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {product.discount.toFixed(1)}% off\n                          </Badge>\n                        </div>\n                      </div>\n                      {product.warehouseLocation && (\n                        <div className=\"flex items-center gap-2 text-xs text-muted-foreground pt-2 border-t\">\n                          <Package className=\"h-3 w-3\" />\n                          <span>{product.warehouseLocation}</span>\n                        </div>\n                      )}\n                      {product.barcode && (\n                        <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                          <Barcode className=\"h-3 w-3\" />\n                          <span className=\"font-mono\">{product.barcode}</span>\n                        </div>\n                      )}\n                      {product.warranty && product.warranty !== 'N/A' && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          Warranty: {product.warranty}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n              {products.length === 0 && (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <Package className=\"h-12 w-12 mx-auto mb-4 opacity-20\" />\n                  <p>No products found</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"transactions\" className=\"space-y-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search transactions...\"\n              className=\"pl-10\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              data-testid=\"input-search-transactions\"\n            />\n          </div>\n\n          <DataTable\n            columns={[\n              { \n                header: \"Product\", \n                accessor: (row) => row.productId?.name || \"N/A\",\n              },\n              {\n                header: \"Type\",\n                accessor: (row) => getTransactionBadge(row.type),\n              },\n              { \n                header: \"Quantity\", \n                accessor: (row) => (\n                  <span className=\"font-medium\">\n                    {row.previousStock !== undefined && row.newStock !== undefined\n                      ? `${row.previousStock} → ${row.newStock}`\n                      : row.quantity\n                    }\n                  </span>\n                ),\n              },\n              { header: \"Reason\", accessor: \"reason\" },\n              { \n                header: \"Supplier\", \n                accessor: (row) => row.supplierId ? (\n                  <div className=\"space-y-1\">\n                    <div className=\"font-medium\">{row.supplierId.name}</div>\n                    {row.supplierId.contact && (\n                      <div className=\"text-xs text-muted-foreground\">{row.supplierId.contact}</div>\n                    )}\n                    {row.supplierId.email && (\n                      <div className=\"text-xs text-muted-foreground\">{row.supplierId.email}</div>\n                    )}\n                  </div>\n                ) : \"-\",\n              },\n              { \n                header: \"Batch\", \n                accessor: (row) => row.batchNumber || \"-\",\n              },\n              { \n                header: \"Date\", \n                accessor: (row) => format(new Date(row.createdAt || row.date), 'MMM dd, yyyy'),\n              },\n            ]}\n            data={filteredTransactions}\n            onRowClick={(row) => {\n              setSelectedTransaction(row);\n              setIsTransactionDetailOpen(true);\n            }}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"low-stock\" className=\"space-y-4\">\n          {lowStockProducts.length > 0 ? (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {lowStockProducts.map((product: any) => (\n                <Card key={product._id} className=\"\" data-testid={`low-stock-${product._id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">{product.name}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground mt-1\">{product.brand}</p>\n                      </div>\n                      <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">Current Stock:</span>\n                      <Badge variant=\"destructive\">{product.stockQty}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">Min Level:</span>\n                      <span className=\"font-medium\">{product.minStockLevel}</span>\n                    </div>\n                    {product.warehouseLocation && (\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-muted-foreground\">Location:</span>\n                        <span className=\"text-sm\">{product.warehouseLocation}</span>\n                      </div>\n                    )}\n                    <Button \n                      size=\"sm\" \n                      className=\"w-full mt-2\"\n                      onClick={() => {\n                        setTransactionFormData({\n                          ...transactionFormData,\n                          productId: product._id,\n                          type: \"IN\",\n                        });\n                        setIsTransactionDialogOpen(true);\n                      }}\n                      data-testid={`button-restock-${product._id}`}\n                    >\n                      Restock Now\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground\">All products are adequately stocked</p>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"returns\" className=\"space-y-4\">\n          <DataTable\n            columns={[\n              { \n                header: \"Product\", \n                accessor: (row) => row.productId?.name || \"N/A\",\n              },\n              { \n                header: \"Quantity\", \n                accessor: \"quantity\",\n                className: \"text-right\",\n              },\n              { \n                header: \"Condition\", \n                accessor: (row) => (\n                  <Badge variant=\"outline\">{row.condition}</Badge>\n                ),\n              },\n              { header: \"Reason\", accessor: \"reason\" },\n              { \n                header: \"Status\", \n                accessor: (row) => getReturnStatusBadge(row.status),\n              },\n              { \n                header: \"Refund\", \n                accessor: (row) => row.refundAmount ? formatCurrency(row.refundAmount) : \"-\",\n              },\n              { \n                header: \"Restockable\", \n                accessor: (row) => row.restockable ? \"Yes\" : \"No\",\n              },\n              { \n                header: \"Date\", \n                accessor: (row) => format(new Date(row.returnDate), 'MMM dd, yyyy'),\n              },\n              {\n                header: \"Actions\",\n                accessor: (row) => (\n                  row.status === 'pending' ? (\n                    <div className=\"flex gap-1\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => processReturnMutation.mutate({\n                          id: row._id,\n                          data: { status: 'processed', restockable: row.restockable }\n                        })}\n                        data-testid={`button-process-${row._id}`}\n                      >\n                        Process\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => processReturnMutation.mutate({\n                          id: row._id,\n                          data: { status: 'rejected' }\n                        })}\n                        data-testid={`button-reject-${row._id}`}\n                      >\n                        Reject\n                      </Button>\n                    </div>\n                  ) : <span className=\"text-sm text-muted-foreground\">-</span>\n                ),\n              },\n            ]}\n            data={productReturns}\n            onRowClick={(row) => console.log(\"Return:\", row)}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"purchase-orders\" className=\"space-y-4\">\n          <DataTable\n            columns={[\n              { header: \"PO Number\", accessor: \"poNumber\" },\n              { \n                header: \"Supplier\", \n                accessor: (row) => row.supplierId?.name || \"N/A\",\n              },\n              { \n                header: \"Total Amount\", \n                accessor: (row) => formatCurrency(row.totalAmount),\n              },\n              { \n                header: \"Status\", \n                accessor: (row) => (\n                  <Badge variant={\n                    row.status === 'received' ? 'default' :\n                    row.status === 'approved' ? 'secondary' :\n                    row.status === 'cancelled' ? 'destructive' : 'outline'\n                  }>\n                    {row.status.toUpperCase()}\n                  </Badge>\n                ),\n              },\n              { \n                header: \"Order Date\", \n                accessor: (row) => format(new Date(row.orderDate), 'MMM dd, yyyy'),\n              },\n              { \n                header: \"Expected Delivery\", \n                accessor: (row) => row.expectedDeliveryDate \n                  ? format(new Date(row.expectedDeliveryDate), 'MMM dd, yyyy')\n                  : \"-\",\n              },\n            ]}\n            data={purchaseOrders}\n            onRowClick={(row) => console.log(\"PO:\", row)}\n          />\n        </TabsContent>\n      </Tabs>\n\n      {/* Transaction Detail Dialog */}\n      <Dialog open={isTransactionDetailOpen} onOpenChange={setIsTransactionDetailOpen}>\n        <DialogContent className=\"max-w-3xl\">\n          <DialogHeader>\n            <DialogTitle>Transaction Details</DialogTitle>\n            <DialogDescription>\n              Complete information about this inventory transaction\n            </DialogDescription>\n          </DialogHeader>\n          {selectedTransaction && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">Transaction Info</h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Type:</span>\n                        <span>{getTransactionBadge(selectedTransaction.type)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Date:</span>\n                        <span className=\"text-sm font-medium\">\n                          {format(new Date(selectedTransaction.createdAt || selectedTransaction.date), 'PPP')}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">User:</span>\n                        <span className=\"text-sm font-medium\">\n                          {selectedTransaction.userId?.name || \"N/A\"}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">Product Info</h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Product:</span>\n                        <span className=\"text-sm font-medium\">\n                          {selectedTransaction.productId?.name || \"N/A\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Brand:</span>\n                        <span className=\"text-sm\">\n                          {selectedTransaction.productId?.brand || \"N/A\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Quantity:</span>\n                        <span className=\"text-sm font-medium\">\n                          {selectedTransaction.quantity}\n                        </span>\n                      </div>\n                      {selectedTransaction.previousStock !== undefined && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">Stock Change:</span>\n                          <span className=\"text-sm font-medium\">\n                            {selectedTransaction.previousStock} → {selectedTransaction.newStock}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {selectedTransaction.supplierId && (\n                    <div>\n                      <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">Supplier Details</h3>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">Name:</span>\n                          <span className=\"text-sm font-medium\">\n                            {selectedTransaction.supplierId.name}\n                          </span>\n                        </div>\n                        {selectedTransaction.supplierId.contact && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm text-muted-foreground\">Contact:</span>\n                            <span className=\"text-sm\">\n                              {selectedTransaction.supplierId.contact}\n                            </span>\n                          </div>\n                        )}\n                        {selectedTransaction.supplierId.email && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm text-muted-foreground\">Email:</span>\n                            <span className=\"text-sm\">\n                              {selectedTransaction.supplierId.email}\n                            </span>\n                          </div>\n                        )}\n                        {selectedTransaction.supplierId.gstNumber && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm text-muted-foreground\">GST:</span>\n                            <span className=\"text-sm\">\n                              {selectedTransaction.supplierId.gstNumber}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  <div>\n                    <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">Additional Details</h3>\n                    <div className=\"space-y-2\">\n                      {selectedTransaction.batchNumber && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">Batch Number:</span>\n                          <span className=\"text-sm font-medium\">\n                            {selectedTransaction.batchNumber}\n                          </span>\n                        </div>\n                      )}\n                      {selectedTransaction.unitCost && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">Unit Cost:</span>\n                          <span className=\"text-sm font-medium\">\n                            {formatCurrency(selectedTransaction.unitCost)}\n                          </span>\n                        </div>\n                      )}\n                      {selectedTransaction.warehouseLocation && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">Location:</span>\n                          <span className=\"text-sm\">\n                            {selectedTransaction.warehouseLocation}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {selectedTransaction.reason && (\n                <div>\n                  <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">Reason</h3>\n                  <p className=\"text-sm bg-muted p-3 rounded-md\">\n                    {selectedTransaction.reason}\n                  </p>\n                </div>\n              )}\n\n              {selectedTransaction.notes && (\n                <div>\n                  <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">Notes</h3>\n                  <p className=\"text-sm bg-muted p-3 rounded-md\">\n                    {selectedTransaction.notes}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":46435},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/models/OTP.ts":{"content":"import mongoose from 'mongoose';\n\nconst otpSchema = new mongoose.Schema({\n  mobileNumber: { type: String, required: true, index: true },\n  otp: { type: String, required: true },\n  purpose: { type: String, enum: ['employee_verification', 'phone_update', 'role_selection', 'login'], default: 'login' },\n  expiresAt: { type: Date, required: true },\n  verified: { type: Boolean, default: false },\n  attempts: { type: Number, default: 0 },\n}, { timestamps: true });\n\notpSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });\n\nexport const OTP = mongoose.models.OTP || mongoose.model('OTP', otpSchema);\n","size_bytes":601},"server/models/Warranty.ts":{"content":"import mongoose from 'mongoose';\n\nconst warrantySchema = new mongoose.Schema({\n  warrantyNumber: { type: String, unique: true },\n  \n  // Related entities\n  invoiceId: { type: mongoose.Schema.Types.ObjectId, ref: 'Invoice', required: true },\n  customerId: { type: mongoose.Schema.Types.ObjectId, ref: 'RegistrationCustomer', required: true },\n  productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },\n  \n  // Product details\n  productName: { type: String, required: true },\n  serialNumber: { type: String },\n  \n  // Warranty details\n  warrantyType: { \n    type: String, \n    enum: ['manufacturer', 'extended', 'service'],\n    required: true \n  },\n  durationMonths: { type: Number, required: true },\n  startDate: { type: Date, required: true },\n  endDate: { type: Date, required: true },\n  \n  // Coverage\n  coverage: { type: String },\n  terms: { type: String },\n  \n  // Status\n  status: { \n    type: String, \n    enum: ['active', 'expired', 'claimed', 'void'],\n    default: 'active'\n  },\n  \n  // Claims\n  claims: [{\n    claimDate: { type: Date },\n    description: { type: String },\n    status: { \n      type: String, \n      enum: ['pending', 'approved', 'rejected', 'completed']\n    },\n    resolutionDate: { type: Date },\n    resolutionNotes: { type: String },\n  }],\n  \n}, { timestamps: true });\n\n// Auto-generate warranty number\nwarrantySchema.pre('save', async function(next) {\n  if (!this.warrantyNumber) {\n    const currentYear = new Date().getFullYear();\n    const lastWarranty = await mongoose.model('Warranty').findOne({\n      warrantyNumber: new RegExp(`^WRT/${currentYear}/`)\n    }).sort({ createdAt: -1 });\n    \n    let nextNumber = 1;\n    if (lastWarranty && lastWarranty.warrantyNumber) {\n      const lastNumber = parseInt(lastWarranty.warrantyNumber.split('/').pop() || '0');\n      nextNumber = lastNumber + 1;\n    }\n    \n    this.warrantyNumber = `WRT/${currentYear}/${String(nextNumber).padStart(4, '0')}`;\n  }\n  \n  // Calculate end date if not set\n  if (!this.endDate && this.startDate && this.durationMonths) {\n    const endDate = new Date(this.startDate);\n    endDate.setMonth(endDate.getMonth() + this.durationMonths);\n    this.endDate = endDate;\n  }\n  \n  next();\n});\n\n// Delete cached model to ensure schema changes are applied\nif (mongoose.models.Warranty) {\n  delete mongoose.models.Warranty;\n}\n\nexport const Warranty = mongoose.model('Warranty', warrantySchema);\n","size_bytes":2413},"server/scripts/verify-populate.ts":{"content":"import { connectDB } from '../db';\nimport { Task } from '../models/Task';\nimport { Leave } from '../models/Leave';\nimport { Employee } from '../models/Employee';\nimport { User } from '../models/User';\n\nasync function verifyPopulate() {\n  try {\n    await connectDB();\n    console.log('Connected to MongoDB\\n');\n    \n    // First, check if we have employees\n    const employeeCount = await Employee.countDocuments();\n    const userCount = await User.countDocuments();\n    console.log(`Total employees in database: ${employeeCount}`);\n    console.log(`Total users in database: ${userCount}\\n`);\n    \n    if (employeeCount > 0) {\n      const employees = await Employee.find().limit(5);\n      console.log('All employees:');\n      employees.forEach(emp => {\n        console.log(`  - ID: ${emp._id}, Name: ${emp.name}`);\n      });\n      console.log();\n    }\n    \n    // Check tasks\n    console.log('=== TASKS ===');\n    const tasks = await Task.find({}).limit(3)\n      .populate('assignedTo')\n      .populate('assignedBy');\n    \n    if (tasks.length === 0) {\n      console.log('No tasks found');\n    } else {\n      tasks.forEach(task => {\n        console.log(`Task: ${task.title}`);\n        console.log(`  _id: ${task._id}`);\n        console.log(`  assignedTo raw: ${(task as any).assignedTo}`);\n        console.log(`  assignedTo populated:`, task.assignedTo);\n        console.log(`  assignedTo type: ${typeof task.assignedTo}`);\n        if (task.assignedTo && typeof task.assignedTo === 'object') {\n          console.log(`  assignedTo.name: ${(task.assignedTo as any).name}`);\n        }\n        console.log('---');\n      });\n    }\n    \n    console.log('\\n=== LEAVES ===');\n    const leaves = await Leave.find({}).limit(3)\n      .populate('employeeId')\n      .populate('approvedBy');\n    \n    if (leaves.length === 0) {\n      console.log('No leaves found');\n    } else {\n      leaves.forEach(leave => {\n        console.log(`Leave ID: ${leave._id}`);\n        console.log(`  employeeId raw: ${(leave as any).employeeId}`);\n        console.log(`  employeeId populated:`, leave.employeeId);\n        console.log(`  employeeId type: ${typeof leave.employeeId}`);\n        if (leave.employeeId && typeof leave.employeeId === 'object') {\n          console.log(`  employeeId.name: ${(leave.employeeId as any).name}`);\n        }\n        console.log('---');\n      });\n    }\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('Error:', error);\n    process.exit(1);\n  }\n}\n\nverifyPopulate();\n","size_bytes":2483},"server/utils/generateInvoicePDF.ts":{"content":"import PDFDocument from 'pdfkit';\nimport fs from 'fs';\nimport path from 'path';\n\ninterface CustomerDetails {\n  referenceCode?: string;\n  fullName: string;\n  mobileNumber: string;\n  alternativeNumber?: string;\n  email?: string;\n  address?: string;\n  city?: string;\n  taluka?: string;\n  district?: string;\n  state?: string;\n  pinCode?: string;\n  referralSource?: string;\n  isVerified?: boolean;\n  registrationDate?: Date;\n}\n\ninterface VehicleDetails {\n  vehicleId?: string;\n  vehicleNumber?: string;\n  vehicleBrand?: string;\n  vehicleModel?: string;\n  customModel?: string;\n  variant?: string;\n  color?: string;\n  yearOfPurchase?: number;\n  vehiclePhoto?: string;\n  isNewVehicle?: boolean;\n  chassisNumber?: string;\n  selectedParts?: string[];\n  vehicleRegistrationDate?: Date;\n}\n\ninterface InvoiceData {\n  invoiceNumber: string;\n  createdAt: Date;\n  dueDate?: Date;\n  customerDetails: CustomerDetails;\n  vehicleDetails: VehicleDetails[];\n  items: Array<{\n    name: string;\n    description?: string;\n    quantity: number;\n    unitPrice: number;\n    total: number;\n    hasGst?: boolean;\n    gstAmount?: number;\n  }>;\n  subtotal: number;\n  discountType?: string;\n  discountValue?: number;\n  discountAmount?: number;\n  taxRate?: number;\n  taxAmount?: number;\n  totalAmount: number;\n  paidAmount?: number;\n  dueAmount: number;\n  notes?: string;\n  terms?: string;\n}\n\nexport async function generateInvoicePDF(invoiceData: InvoiceData): Promise<string> {\n  return new Promise((resolve, reject) => {\n    try {\n      const pdfDir = path.join(process.cwd(), 'invoices');\n      if (!fs.existsSync(pdfDir)) {\n        fs.mkdirSync(pdfDir, { recursive: true });\n      }\n\n      const filename = `invoice_${invoiceData.invoiceNumber.replace(/\\//g, '_')}.pdf`;\n      const filepath = path.join(pdfDir, filename);\n\n      const doc = new PDFDocument({ margin: 50 });\n      const stream = fs.createWriteStream(filepath);\n\n      doc.pipe(stream);\n\n      doc.fontSize(20).font('Helvetica-Bold').text('Mauli Car World', 50, 50);\n      doc.fontSize(10).font('Helvetica').text('Invoice', 50, 75);\n\n      doc.fontSize(16).font('Helvetica-Bold').text('INVOICE', 400, 50, { align: 'right' });\n      doc.fontSize(10).font('Helvetica').text(invoiceData.invoiceNumber, 400, 75, { align: 'right' });\n\n      let yPosition = 120;\n\n      // Customer Details Section\n      doc.fontSize(12).font('Helvetica-Bold').text('Bill To:', 50, yPosition);\n      yPosition += 20;\n      \n      const customer = invoiceData.customerDetails;\n      doc.fontSize(10).font('Helvetica-Bold').text(customer.fullName, 50, yPosition, { width: 280 });\n      yPosition += 18;\n      \n      if (customer.referenceCode) {\n        doc.fontSize(9).font('Helvetica').text(`Ref: ${customer.referenceCode}`, 50, yPosition, { width: 280 });\n        yPosition += 15;\n      }\n      \n      doc.fontSize(9).font('Helvetica').text(`Mobile: ${customer.mobileNumber}`, 50, yPosition, { width: 280 });\n      yPosition += 15;\n      \n      if (customer.alternativeNumber) {\n        doc.text(`Alt Mobile: ${customer.alternativeNumber}`, 50, yPosition, { width: 280 });\n        yPosition += 15;\n      }\n      \n      if (customer.email) {\n        doc.text(customer.email, 50, yPosition, { width: 280 });\n        yPosition += 15;\n      }\n      \n      if (customer.address) {\n        const addressHeight = doc.heightOfString(customer.address, { width: 280 });\n        doc.text(customer.address, 50, yPosition, { width: 280 });\n        yPosition += Math.ceil(addressHeight) + 3;\n      }\n      \n      const location = [customer.city, customer.taluka, customer.district, customer.state]\n        .filter(Boolean)\n        .join(', ');\n      if (location) {\n        const locationHeight = doc.heightOfString(location, { width: 280 });\n        doc.text(location, 50, yPosition, { width: 280 });\n        yPosition += Math.ceil(locationHeight) + 3;\n      }\n      \n      if (customer.pinCode) {\n        doc.text(`PIN: ${customer.pinCode}`, 50, yPosition, { width: 280 });\n        yPosition += 15;\n      }\n      \n      if (customer.referralSource) {\n        doc.text(`Referral: ${customer.referralSource}`, 50, yPosition, { width: 280 });\n        yPosition += 15;\n      }\n      \n      if (customer.isVerified) {\n        doc.fillColor('#0a8754').text('✓ Verified Customer', 50, yPosition, { width: 280 });\n        doc.fillColor('#000');\n        yPosition += 15;\n      }\n\n      // Invoice Date Section (Right Side)\n      const invoiceDate = new Date(invoiceData.createdAt).toLocaleDateString();\n      let rightYPos = 120;\n      doc.fontSize(10).font('Helvetica-Bold').text('Invoice Date:', 400, rightYPos, { align: 'right' });\n      rightYPos += 15;\n      doc.font('Helvetica').text(invoiceDate, 400, rightYPos, { align: 'right' });\n      rightYPos += 20;\n\n      if (invoiceData.dueDate) {\n        const dueDate = new Date(invoiceData.dueDate).toLocaleDateString();\n        doc.font('Helvetica-Bold').text('Due Date:', 400, rightYPos, { align: 'right' });\n        rightYPos += 15;\n        doc.font('Helvetica').text(dueDate, 400, rightYPos, { align: 'right' });\n        rightYPos += 20;\n      }\n\n      // Vehicle Details Section\n      yPosition += 10;\n      if (invoiceData.vehicleDetails && invoiceData.vehicleDetails.length > 0) {\n        doc.fontSize(12).font('Helvetica-Bold').text('Vehicle Details:', 50, yPosition);\n        yPosition += 20;\n        \n        invoiceData.vehicleDetails.forEach((vehicle, index) => {\n          if (invoiceData.vehicleDetails.length > 1) {\n            doc.fontSize(10).font('Helvetica-Bold').text(`Vehicle ${index + 1}:`, 50, yPosition, { width: 280 });\n            yPosition += 15;\n          }\n          \n          doc.fontSize(9).font('Helvetica');\n          \n          if (vehicle.vehicleNumber) {\n            doc.text(`Number: ${vehicle.vehicleNumber}`, 60, yPosition, { width: 270 });\n            yPosition += 14;\n          }\n          \n          if (vehicle.vehicleBrand || vehicle.vehicleModel) {\n            const brandModel = [vehicle.vehicleBrand, vehicle.vehicleModel, vehicle.customModel]\n              .filter(Boolean)\n              .join(' - ');\n            const modelHeight = doc.heightOfString(`Model: ${brandModel}`, { width: 270 });\n            doc.text(`Model: ${brandModel}`, 60, yPosition, { width: 270 });\n            yPosition += Math.ceil(modelHeight) + 2;\n          }\n          \n          if (vehicle.variant) {\n            doc.text(`Variant: ${vehicle.variant}`, 60, yPosition, { width: 270 });\n            yPosition += 14;\n          }\n          \n          if (vehicle.color) {\n            doc.text(`Color: ${vehicle.color}`, 60, yPosition, { width: 270 });\n            yPosition += 14;\n          }\n          \n          if (vehicle.yearOfPurchase) {\n            doc.text(`Year: ${vehicle.yearOfPurchase}`, 60, yPosition, { width: 270 });\n            yPosition += 14;\n          }\n          \n          if (vehicle.chassisNumber) {\n            doc.text(`Chassis: ${vehicle.chassisNumber}`, 60, yPosition, { width: 270 });\n            yPosition += 14;\n          }\n          \n          if (vehicle.isNewVehicle !== undefined) {\n            doc.text(`Condition: ${vehicle.isNewVehicle ? 'New' : 'Used'}`, 60, yPosition, { width: 270 });\n            yPosition += 14;\n          }\n          \n          if (vehicle.selectedParts && vehicle.selectedParts.length > 0) {\n            const partsText = `Parts: ${vehicle.selectedParts.join(', ')}`;\n            const partsHeight = doc.heightOfString(partsText, { width: 270 });\n            doc.text(partsText, 60, yPosition, { width: 270 });\n            yPosition += Math.ceil(partsHeight) + 2;\n          }\n          \n          yPosition += 5;\n        });\n      }\n\n      yPosition = Math.max(yPosition + 20, rightYPos + 20);\n\n      doc.moveTo(50, yPosition).lineTo(550, yPosition).stroke();\n      yPosition += 20;\n\n      doc.fontSize(10).font('Helvetica-Bold');\n      doc.text('Product Name', 50, yPosition);\n      doc.text('Qty', 230, yPosition, { width: 30, align: 'right' });\n      doc.text('Unit Price', 270, yPosition, { width: 70, align: 'right' });\n      doc.text('GST', 350, yPosition, { width: 50, align: 'right' });\n      doc.text('Total', 410, yPosition, { width: 120, align: 'right' });\n\n      yPosition += 20;\n      doc.moveTo(50, yPosition).lineTo(550, yPosition).stroke();\n      yPosition += 15;\n\n      doc.font('Helvetica');\n      \n      const sortedItems = [...invoiceData.items].sort((a, b) => {\n        if (a.hasGst && !b.hasGst) return -1;\n        if (!a.hasGst && b.hasGst) return 1;\n        return 0;\n      });\n      \n      sortedItems.forEach((item) => {\n        const itemHeight = item.description ? 37 : 25;\n        \n        if (yPosition + itemHeight > 700) {\n          doc.addPage();\n          yPosition = 50;\n          \n          doc.fontSize(10).font('Helvetica-Bold');\n          doc.text('Product Name', 50, yPosition);\n          doc.text('Qty', 230, yPosition, { width: 30, align: 'right' });\n          doc.text('Unit Price', 270, yPosition, { width: 70, align: 'right' });\n          doc.text('GST', 350, yPosition, { width: 50, align: 'right' });\n          doc.text('Total', 410, yPosition, { width: 120, align: 'right' });\n          yPosition += 20;\n          doc.moveTo(50, yPosition).lineTo(550, yPosition).stroke();\n          yPosition += 15;\n          doc.font('Helvetica');\n        }\n\n        doc.fontSize(10).text(item.name, 50, yPosition, { width: 170 });\n        const itemYPosition = yPosition;\n        \n        if (item.description) {\n          yPosition += 12;\n          doc.fontSize(8).fillColor('#666').text(item.description, 50, yPosition, { width: 170 });\n          doc.fillColor('#000');\n        }\n\n        const unitPriceExclGst = item.hasGst \n          ? (item.total - (item.gstAmount || 0))\n          : item.total;\n        const gstDisplay = item.hasGst && item.gstAmount \n          ? `${Math.round(item.gstAmount)}`\n          : '-';\n\n        doc.fontSize(10).text(item.quantity.toString(), 230, itemYPosition, { width: 30, align: 'right' });\n        doc.text(Math.round(unitPriceExclGst).toString(), 270, itemYPosition, { width: 70, align: 'right' });\n        doc.text(gstDisplay, 350, itemYPosition, { width: 50, align: 'right' });\n        doc.text(Math.round(item.total).toString(), 410, itemYPosition, { width: 120, align: 'right' });\n\n        yPosition += item.description ? 25 : 25;\n      });\n\n      yPosition += 10;\n      doc.moveTo(50, yPosition).lineTo(550, yPosition).stroke();\n      yPosition += 20;\n\n      doc.fontSize(10).font('Helvetica');\n      doc.text('Subtotal:', 350, yPosition);\n      doc.text(`Rs. ${invoiceData.subtotal.toFixed(0)}`, 430, yPosition, { width: 100, align: 'right' });\n      yPosition += 20;\n\n      if (invoiceData.discountAmount && invoiceData.discountAmount > 0) {\n        let discountText = 'Discount:';\n        if (invoiceData.discountType === 'percentage' && invoiceData.discountValue) {\n          discountText = `Discount (${invoiceData.discountValue}%):`;\n        }\n        doc.text(discountText, 350, yPosition);\n        doc.text(`-Rs. ${invoiceData.discountAmount.toFixed(0)}`, 430, yPosition, { width: 100, align: 'right' });\n        yPosition += 20;\n      }\n\n      doc.fontSize(12).font('Helvetica-Bold');\n      doc.text('Total Amount:', 350, yPosition);\n      doc.text(`Rs. ${invoiceData.totalAmount.toFixed(0)}`, 430, yPosition, { width: 100, align: 'right' });\n      yPosition += 25;\n\n      if (invoiceData.paidAmount && invoiceData.paidAmount > 0) {\n        doc.fontSize(10).font('Helvetica');\n        doc.text('Paid Amount:', 350, yPosition);\n        doc.text(`Rs. ${invoiceData.paidAmount.toFixed(0)}`, 430, yPosition, { width: 100, align: 'right' });\n        yPosition += 20;\n\n        doc.fontSize(12).font('Helvetica-Bold');\n        doc.text('Amount Due:', 350, yPosition);\n        doc.text(`Rs. ${invoiceData.dueAmount.toFixed(0)}`, 430, yPosition, { width: 100, align: 'right' });\n        yPosition += 25;\n      }\n\n      if (invoiceData.notes) {\n        const notesHeight = doc.heightOfString(invoiceData.notes, { width: 500 });\n        if (yPosition + notesHeight + 60 > 750) {\n          doc.addPage();\n          yPosition = 50;\n        }\n        yPosition += 20;\n        doc.fontSize(10).font('Helvetica-Bold').text('Notes:', 50, yPosition);\n        yPosition += 15;\n        doc.fontSize(9).font('Helvetica').text(invoiceData.notes, 50, yPosition, { width: 500 });\n        yPosition += Math.ceil(notesHeight) + 20;\n      }\n\n      if (invoiceData.terms) {\n        const termsHeight = doc.heightOfString(invoiceData.terms, { width: 500 });\n        if (yPosition + termsHeight + 40 > 750) {\n          doc.addPage();\n          yPosition = 50;\n        }\n        doc.fontSize(10).font('Helvetica-Bold').text('Terms & Conditions:', 50, yPosition);\n        yPosition += 15;\n        doc.fontSize(9).font('Helvetica').text(invoiceData.terms, 50, yPosition, { width: 500 });\n      }\n\n      doc.end();\n\n      stream.on('finish', () => {\n        resolve(filepath);\n      });\n\n      stream.on('error', (error) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n","size_bytes":13104},"client/src/components/examples/DigitalCustomerCard.tsx":{"content":"import { DigitalCustomerCard } from \"../DigitalCustomerCard\";\n\nexport default function DigitalCustomerCardExample() {\n  return (\n    <div className=\"p-6 bg-background\">\n      <DigitalCustomerCard\n        customer={{\n          name: \"Rajesh Kumar\",\n          phone: \"+91 98765-43210\",\n          email: \"rajesh.kumar@email.com\",\n          vehicle: {\n            regNo: \"MH-12-AB-1234\",\n            make: \"Maruti Suzuki\",\n            model: \"Swift\",\n            year: 2020,\n          },\n        }}\n        totalVisits={8}\n        lastHandler=\"Amit Sharma\"\n        currentHandler=\"Priya Patel\"\n        recentVisits={[\n          {\n            date: \"15 Jan, 2024\",\n            handler: \"Amit Sharma\",\n            status: \"Completed\",\n            parts: [\"Engine Oil\", \"Oil Filter\"],\n          },\n          {\n            date: \"10 Dec, 2023\",\n            handler: \"Priya Patel\",\n            status: \"Completed\",\n            parts: [\"Brake Pads\", \"Brake Fluid\"],\n          },\n        ]}\n      />\n    </div>\n  );\n}\n","size_bytes":1007},"server/scripts/check-data.ts":{"content":"import { connectDB } from '../db';\nimport { Task } from '../models/Task';\nimport { Leave } from '../models/Leave';\n\nasync function checkData() {\n  try {\n    await connectDB();\n    console.log('Connected to MongoDB\\n');\n    \n    console.log('=== TASKS (Raw Data) ===');\n    const tasks = await Task.find({}).limit(3).lean();\n    tasks.forEach(task => {\n      console.log(`ID: ${task._id}`);\n      console.log(`Title: ${task.title}`);\n      console.log(`AssignedTo: ${task.assignedTo}`);\n      console.log(`AssignedTo Type: ${typeof task.assignedTo}`);\n      console.log('---');\n    });\n    \n    console.log('\\n=== TASKS (Populated) ===');\n    const tasksPopulated = await Task.find({}).limit(3)\n      .populate('assignedTo')\n      .populate('assignedBy');\n    tasksPopulated.forEach(task => {\n      console.log(`ID: ${task._id}`);\n      console.log(`Title: ${task.title}`);\n      console.log(`AssignedTo: ${JSON.stringify(task.assignedTo)}`);\n      console.log('---');\n    });\n    \n    console.log('\\n=== LEAVES (Raw Data) ===');\n    const leaves = await Leave.find({}).limit(3).lean();\n    leaves.forEach(leave => {\n      console.log(`ID: ${leave._id}`);\n      console.log(`EmployeeId: ${leave.employeeId}`);\n      console.log(`EmployeeId Type: ${typeof leave.employeeId}`);\n      console.log('---');\n    });\n    \n    console.log('\\n=== LEAVES (Populated) ===');\n    const leavesPopulated = await Leave.find({}).limit(3)\n      .populate('employeeId')\n      .populate('approvedBy');\n    leavesPopulated.forEach(leave => {\n      console.log(`ID: ${leave._id}`);\n      console.log(`EmployeeId: ${JSON.stringify(leave.employeeId)}`);\n      console.log('---');\n    });\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('Error:', error);\n    process.exit(1);\n  }\n}\n\ncheckData();\n","size_bytes":1787},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"server/models/Task.ts":{"content":"import mongoose from 'mongoose';\n\nconst taskSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  description: { type: String },\n  assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  assignedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  priority: { \n    type: String, \n    enum: ['low', 'medium', 'high', 'urgent'],\n    default: 'medium'\n  },\n  status: { \n    type: String, \n    enum: ['pending', 'in_progress', 'completed', 'cancelled'],\n    default: 'pending'\n  },\n  dueDate: { type: Date },\n  completedDate: { type: Date },\n  notes: { type: String },\n}, { timestamps: true });\n\nexport const Task = mongoose.models.Task || mongoose.model('Task', taskSchema);\n","size_bytes":715},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/scripts/add-manager.ts":{"content":"import mongoose from 'mongoose';\nimport { createUser } from '../auth.js';\n\nasync function addManager() {\n  try {\n    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/mauli-car-world';\n    await mongoose.connect(mongoUri);\n    console.log('✅ Connected to MongoDB');\n\n    const email = 'manager@maulicarworld.com';\n    const password = 'manager123';\n    const name = 'Test Manager';\n    const role = 'Manager';\n    const mobileNumber = '9999999999';\n\n    const user = await createUser(email, password, name, role, mobileNumber);\n    console.log('✅ Manager user created successfully:');\n    console.log(`   Name: ${user.name}`);\n    console.log(`   Email: ${user.email}`);\n    console.log(`   Mobile: ${user.mobileNumber}`);\n    console.log(`   Role: ${user.role}`);\n    console.log(`   Password: ${password}`);\n\n    await mongoose.disconnect();\n    console.log('✅ Disconnected from MongoDB');\n  } catch (error: any) {\n    console.error('❌ Error:', error.message);\n    if (error.code === 11000) {\n      console.log('User with this email or mobile number already exists');\n    }\n    process.exit(1);\n  }\n}\n\naddManager();\n","size_bytes":1147},"client/src/hooks/useScreenshotProtection.ts":{"content":"import { useEffect } from 'react';\n\nexport function useScreenshotProtection() {\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        document.body.style.filter = 'blur(20px)';\n      } else {\n        document.body.style.filter = 'none';\n      }\n    };\n\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (\n        (e.key === 'PrintScreen') ||\n        (e.metaKey && e.shiftKey && (e.key === '3' || e.key === '4' || e.key === '5')) ||\n        (e.ctrlKey && e.shiftKey && e.key === 'S')\n      ) {\n        e.preventDefault();\n        document.body.style.filter = 'blur(20px)';\n        setTimeout(() => {\n          document.body.style.filter = 'none';\n        }, 500);\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    document.addEventListener('keydown', handleKeyPress);\n    document.addEventListener('keyup', handleKeyPress);\n\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      document.removeEventListener('keydown', handleKeyPress);\n      document.removeEventListener('keyup', handleKeyPress);\n      document.body.style.filter = 'none';\n    };\n  }, []);\n}\n","size_bytes":1210},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/utils/notifications.ts":{"content":"import { Notification } from '../models/Notification';\n\nexport type NotificationType = 'low_stock' | 'new_order' | 'payment_due' | 'info';\n\ninterface CreateNotificationParams {\n  message: string;\n  type: NotificationType;\n  targetRole?: string;\n  relatedId?: string;\n}\n\nexport async function createNotification(params: CreateNotificationParams) {\n  try {\n    const notification = await Notification.create({\n      message: params.message,\n      type: params.type,\n      read: false,\n      targetRole: params.targetRole,\n      relatedId: params.relatedId,\n    });\n    return notification;\n  } catch (error) {\n    console.error('Failed to create notification:', error);\n    return null;\n  }\n}\n\nexport async function checkAndNotifyLowStock(product: any) {\n  if (product.stockQty <= product.minStockLevel) {\n    await createNotification({\n      message: `Low stock alert: ${product.name} (${product.stockQty} units remaining)`,\n      type: 'low_stock',\n      targetRole: 'Inventory Manager',\n      relatedId: product._id,\n    });\n  }\n}\n\nexport async function notifyNewOrder(order: any, customerName: string) {\n  await createNotification({\n    message: `New order received from ${customerName} - Order #${order.invoiceNumber || order._id}`,\n    type: 'new_order',\n    targetRole: 'Sales Executive',\n    relatedId: order._id,\n  });\n}\n\nexport async function notifyPaymentOverdue(order: any, customerName: string, daysOverdue: number) {\n  await createNotification({\n    message: `Payment overdue: Order #${order.invoiceNumber || order._id} - ${customerName} (${daysOverdue} days overdue)`,\n    type: 'payment_due',\n    targetRole: 'Admin',\n    relatedId: order._id,\n  });\n}\n\nexport async function notifyPaymentDue(order: any, customerName: string) {\n  await createNotification({\n    message: `Payment due: Order #${order.invoiceNumber || order._id} - ${customerName}`,\n    type: 'payment_due',\n    targetRole: 'Sales Executive',\n    relatedId: order._id,\n  });\n}\n\nexport async function notifyServiceVisitStatus(visit: any, customerName: string, newStatus: string) {\n  const statusMessages: Record<string, string> = {\n    inquired: `New service inquiry from ${customerName}`,\n    working: `Service work started for ${customerName}`,\n    completed: `Service completed for ${customerName}`,\n    waiting: `Service waiting for parts - ${customerName}`,\n  };\n\n  const message = statusMessages[newStatus] || `Service status updated for ${customerName}: ${newStatus}`;\n  \n  await createNotification({\n    message,\n    type: 'info',\n    targetRole: 'Service Staff',\n    relatedId: visit._id,\n  });\n}\n\nexport async function notifyInventoryAdjustment(product: any, adjustment: any) {\n  if (adjustment.type === 'OUT' && product.stockQty <= product.minStockLevel) {\n    await checkAndNotifyLowStock(product);\n  }\n}\n","size_bytes":2794},"client/src/pages/CustomerRegistration.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { CheckCircle2, Car, User, MapPin } from \"lucide-react\";\nimport { getAllBrandNames, getModelsByBrand, getPartsByBrandAndModel } from \"@shared/vehicleData\";\nimport { ScreenshotProtection } from \"@/components/ScreenshotProtection\";\n\n// States in India - predefined list\nconst INDIAN_STATES = [\n  \"Andhra Pradesh\", \"Arunachal Pradesh\", \"Assam\", \"Bihar\", \"Chhattisgarh\",\n  \"Goa\", \"Gujarat\", \"Haryana\", \"Himachal Pradesh\", \"Jharkhand\",\n  \"Karnataka\", \"Kerala\", \"Madhya Pradesh\", \"Maharashtra\", \"Manipur\",\n  \"Meghalaya\", \"Mizoram\", \"Nagaland\", \"Odisha\", \"Punjab\",\n  \"Rajasthan\", \"Sikkim\", \"Tamil Nadu\", \"Telangana\", \"Tripura\",\n  \"Uttar Pradesh\", \"Uttarakhand\", \"West Bengal\"\n];\n\n// Vehicle Brands from shared data\nconst VEHICLE_BRANDS = getAllBrandNames();\n\n// Referral sources\nconst REFERRAL_SOURCES = [\n  \"Facebook\",\n  \"Instagram\",\n  \"WhatsApp\",\n  \"Google Search\",\n  \"Friend/Family Referral\",\n  \"Billboard/Hoarding\",\n  \"Newspaper/Magazine\",\n  \"Radio/TV\",\n  \"Direct Visit\",\n  \"Other\"\n];\n\n// Customer form schema\nconst customerFormSchema = z.object({\n  fullName: z.string().min(1, \"Name is required\"),\n  mobileNumber: z.string().min(10, \"Mobile number must be at least 10 digits\"),\n  alternativeNumber: z.string().optional(),\n  email: z.string().email(\"Invalid email address\"),\n  address: z.string().min(1, \"Address is required\"),\n  city: z.string().min(1, \"City is required\"),\n  taluka: z.string().min(1, \"Taluka is required\"),\n  district: z.string().min(1, \"District is required\"),\n  state: z.string().min(1, \"State is required\"),\n  pinCode: z.string().min(6, \"Pin code must be 6 digits\"),\n  referralSource: z.string().optional(),\n});\n\n// Warranty card schema\nconst warrantyCardSchema = z.object({\n  partId: z.string(),\n  partName: z.string(),\n  fileData: z.string(),\n});\n\n// Vehicle form schema\nconst vehicleFormSchema = z.object({\n  vehicleNumber: z.string().optional(),\n  vehicleBrand: z.string().min(1, \"Vehicle brand is required\"),\n  vehicleModel: z.string().min(1, \"Vehicle model is required\"),\n  customModel: z.string().optional(),\n  variant: z.enum(['Top', 'Base']).optional(),\n  color: z.string().optional(),\n  customColor: z.string().optional(),\n  yearOfPurchase: z.string().optional(),\n  vehiclePhoto: z.string().min(1, \"Vehicle photo is required\"),\n  isNewVehicle: z.string().min(1, \"Please select vehicle condition\"),\n  chassisNumber: z.string().optional(),\n  selectedParts: z.array(z.string()).default([]),\n  warrantyCards: z.array(warrantyCardSchema).default([]),\n}).refine((data) => {\n  if (data.isNewVehicle === \"true\" && !data.chassisNumber) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Chassis number is required for new vehicles\",\n  path: [\"chassisNumber\"],\n}).refine((data) => {\n  if (data.isNewVehicle === \"false\" && !data.vehicleNumber) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Vehicle number is required for used vehicles\",\n  path: [\"vehicleNumber\"],\n}).refine((data) => {\n  if (data.vehicleModel === \"Other\" && !data.customModel) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Please specify the model name\",\n  path: [\"customModel\"],\n}).refine((data) => {\n  if (data.color === \"Others\" && !data.customColor) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Please specify the color\",\n  path: [\"customColor\"],\n});\n\ntype CustomerFormData = z.infer<typeof customerFormSchema>;\ntype VehicleFormData = z.infer<typeof vehicleFormSchema>;\n\nexport default function CustomerRegistration() {\n  const { toast } = useToast();\n  const [step, setStep] = useState<\"customer\" | \"otp\" | \"vehicle\" | \"success\">(\"customer\");\n  const [customerId, setCustomerId] = useState<string>(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const [otpInput, setOtpInput] = useState(\"\");\n  const [customerData, setCustomerData] = useState<any>(null);\n  const [vehicleData, setVehicleData] = useState<any>(null);\n  const [registeredVehicles, setRegisteredVehicles] = useState<any[]>([]);\n  const [selectedBrand, setSelectedBrand] = useState<string>(\"\");\n  const [selectedModel, setSelectedModel] = useState<string>(\"\");\n  const [availableModels, setAvailableModels] = useState<string[]>([]);\n  const [availableParts, setAvailableParts] = useState<any[]>([]);\n\n  const customerForm = useForm<CustomerFormData>({\n    resolver: zodResolver(customerFormSchema),\n    defaultValues: {\n      fullName: \"\",\n      mobileNumber: \"\",\n      alternativeNumber: \"\",\n      email: \"\",\n      address: \"\",\n      city: \"\",\n      taluka: \"\",\n      district: \"\",\n      state: \"\",\n      pinCode: \"\",\n      referralSource: \"\",\n    },\n  });\n\n  const vehicleForm = useForm<VehicleFormData>({\n    resolver: zodResolver(vehicleFormSchema),\n    defaultValues: {\n      vehicleNumber: \"\",\n      vehicleBrand: \"\",\n      vehicleModel: \"\",\n      customModel: \"\",\n      variant: undefined,\n      color: \"\",\n      customColor: \"\",\n      yearOfPurchase: \"\",\n      vehiclePhoto: \"\",\n      isNewVehicle: \"\",\n      chassisNumber: \"\",\n      selectedParts: [],\n      warrantyCards: [],\n    },\n  });\n\n  // Register customer mutation\n  const registerCustomer = useMutation({\n    mutationFn: async (data: CustomerFormData) => {\n      console.log('📱 CUSTOMER REGISTRATION - STARTING');\n      console.log('================================');\n      console.log('Customer Data:', data);\n      console.log('================================\\n');\n      \n      const response = await apiRequest(\"POST\", \"/api/registration/customers\", data);\n      const result = await response.json();\n      \n      console.log('📱 CUSTOMER REGISTRATION - RESPONSE');\n      console.log('================================');\n      console.log('Customer ID:', result.customerId);\n      console.log('OTP (Dev Mode):', result.otp || 'Not shown in production');\n      console.log('WhatsApp OTP Sent:', result.whatsappSent ? '✅ SUCCESS' : '❌ FAILED');\n      if (result.whatsappError) {\n        console.error('WhatsApp Error:', result.whatsappError);\n      }\n      console.log('Response:', JSON.stringify(result, null, 2));\n      console.log('================================\\n');\n      \n      return result;\n    },\n    onSuccess: (data) => {\n      setCustomerId(data.customerId);\n      if (data.otp) setOtp(data.otp); // For development\n      setStep(\"otp\");\n      \n      const description = data.whatsappSent \n        ? \"OTP sent to your WhatsApp\" \n        : data.whatsappError \n          ? `OTP not sent via WhatsApp: ${data.whatsappError}` \n          : \"Please check your mobile for the OTP\";\n      \n      toast({\n        title: \"OTP Sent\",\n        description,\n        variant: data.whatsappSent ? \"default\" : \"destructive\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('❌ CUSTOMER REGISTRATION FAILED');\n      console.error('Error:', error);\n      \n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to register customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Verify OTP mutation\n  const verifyOTP = useMutation({\n    mutationFn: async ({ customerId, otp }: { customerId: string; otp: string }) => {\n      console.log('📱 OTP VERIFICATION - STARTING');\n      console.log('================================');\n      console.log('Customer ID:', customerId);\n      console.log('OTP Entered:', otp);\n      console.log('================================\\n');\n      \n      const response = await apiRequest(\"POST\", \"/api/registration/verify-otp\", { customerId, otp });\n      const result = await response.json();\n      \n      console.log('📱 OTP VERIFICATION - RESPONSE');\n      console.log('================================');\n      console.log('Verification Success:', result.success ? '✅' : '❌');\n      console.log('Customer Reference Code:', result.customer?.referenceCode);\n      console.log('Response:', JSON.stringify(result, null, 2));\n      console.log('================================\\n');\n      \n      return result;\n    },\n    onSuccess: (data) => {\n      setCustomerData(data.customer);\n      setStep(\"vehicle\");\n      \n      toast({\n        title: \"Verification Successful\",\n        description: \"Now add your vehicle details\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('❌ OTP VERIFICATION FAILED');\n      console.error('Error:', error);\n      \n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid OTP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Register vehicle mutation\n  const registerVehicle = useMutation({\n    mutationFn: async (data: VehicleFormData) => {\n      console.log('🚗 VEHICLE REGISTRATION - STARTING');\n      console.log('================================');\n      console.log('Vehicle Data:', data);\n      console.log('================================\\n');\n      \n      const response = await apiRequest(\"POST\", \"/api/registration/vehicles\", {\n        ...data,\n        customerId,\n        vehicleNumber: data.vehicleNumber || undefined,\n        customModel: data.vehicleModel === \"Other\" ? data.customModel : undefined,\n        yearOfPurchase: data.yearOfPurchase ? parseInt(data.yearOfPurchase) : undefined,\n        isNewVehicle: data.isNewVehicle === \"true\",\n        chassisNumber: data.isNewVehicle === \"true\" ? data.chassisNumber : undefined,\n        selectedParts: data.selectedParts || [],\n        warrantyCards: data.warrantyCards || [],\n      });\n      const result = await response.json();\n      \n      console.log('🚗 VEHICLE REGISTRATION - RESPONSE');\n      console.log('================================');\n      console.log('Vehicle ID:', result.vehicle?.vehicleId);\n      console.log('Customer Reference Code:', result.customer?.referenceCode);\n      console.log('Response:', JSON.stringify(result, null, 2));\n      console.log('================================\\n');\n      \n      return result;\n    },\n    onSuccess: (data) => {\n      setRegisteredVehicles(prev => [...prev, data.vehicle]);\n      setVehicleData(data.vehicle);\n      setCustomerData(data.customer);\n      \n      // Invalidate vehicles cache for search functionality\n      queryClient.invalidateQueries({ queryKey: [\"/api/registration/vehicles\"] });\n      \n      toast({\n        title: \"Vehicle Added!\",\n        description: `Vehicle registered successfully. Total vehicles: ${registeredVehicles.length + 1}. Click \"Complete Registration\" when done adding vehicles.`,\n      });\n      // Reset vehicle form for next vehicle\n      vehicleForm.reset({\n        vehicleNumber: \"\",\n        vehicleBrand: \"\",\n        vehicleModel: \"\",\n        customModel: \"\",\n        variant: undefined,\n        color: \"\",\n        yearOfPurchase: \"\",\n        vehiclePhoto: \"\",\n        isNewVehicle: \"\",\n        chassisNumber: \"\",\n        selectedParts: [],\n        warrantyCards: [],\n      });\n      setSelectedBrand(\"\");\n      setSelectedModel(\"\");\n      setAvailableModels([]);\n      setAvailableParts([]);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Vehicle Registration Failed\",\n        description: error.message || \"Failed to register vehicle\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Complete registration mutation - sends welcome message\n  const completeRegistration = useMutation({\n    mutationFn: async () => {\n      console.log('✅ COMPLETING REGISTRATION - STARTING');\n      console.log('================================');\n      console.log('Customer ID:', customerId);\n      console.log('================================\\n');\n      \n      const response = await apiRequest(\"POST\", \"/api/registration/complete\", { customerId });\n      \n      if (!response.ok) {\n        console.error('❌ FAILED TO COMPLETE REGISTRATION');\n        console.error('Status:', response.status);\n        console.error('================================\\n');\n        throw new Error('Failed to complete registration. Please try again.');\n      }\n      \n      const result = await response.json();\n      \n      console.log('✅ COMPLETING REGISTRATION - RESPONSE');\n      console.log('================================');\n      console.log('WhatsApp Welcome Sent:', result.whatsappSent ? '✅ SUCCESS' : '❌ FAILED');\n      if (result.whatsappError) {\n        console.error('WhatsApp Welcome Error:', result.whatsappError);\n      }\n      console.log('Response:', JSON.stringify(result, null, 2));\n      console.log('================================\\n');\n      \n      // Fetch complete customer data\n      const customerResponse = await apiRequest(\"GET\", `/api/registration/customers/${customerId}`);\n      \n      if (!customerResponse.ok) {\n        console.error('❌ FAILED TO FETCH CUSTOMER DATA');\n        console.error('Status:', customerResponse.status);\n        console.error('================================\\n');\n        throw new Error('Failed to fetch complete customer data. Please refresh the page to view your details.');\n      }\n      \n      const customerFullData = await customerResponse.json();\n      \n      console.log('📊 FETCHED COMPLETE CUSTOMER DATA');\n      console.log('Customer:', customerFullData.customer);\n      console.log('Vehicles:', customerFullData.vehicles);\n      console.log('================================\\n');\n      \n      return { ...result, ...customerFullData };\n    },\n    onSuccess: (data) => {\n      // Update customer data with complete information\n      if (data.customer) {\n        setCustomerData(data.customer);\n        // Set the last registered vehicle as vehicleData for display\n        if (data.vehicles && data.vehicles.length > 0) {\n          setVehicleData(data.vehicles[data.vehicles.length - 1]);\n        }\n      }\n      \n      setStep(\"success\");\n      \n      const description = data.whatsappSent \n        ? `WhatsApp welcome message sent with your Customer ID!`\n        : data.whatsappError \n          ? `Registration complete! (WhatsApp message failed: ${data.whatsappError})`\n          : 'Registration complete!';\n      \n      toast({\n        title: \"Registration Successful!\",\n        description,\n        variant: data.whatsappSent ? \"default\" : \"destructive\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('❌ COMPLETE REGISTRATION FAILED');\n      console.error('Error:', error);\n      \n      toast({\n        title: \"Failed to Complete\",\n        description: error.message || \"Failed to complete registration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onCustomerSubmit = (data: CustomerFormData) => {\n    registerCustomer.mutate(data);\n  };\n\n  const onOTPSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    verifyOTP.mutate({ customerId, otp: otpInput });\n  };\n\n  const onVehicleSubmit = (data: VehicleFormData) => {\n    registerVehicle.mutate(data);\n  };\n\n  const handlePhotoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        vehicleForm.setValue(\"vehiclePhoto\", reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleWarrantyCardUpload = (partId: string, partName: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const fileData = reader.result as string;\n        const currentWarrantyCards = vehicleForm.getValues(\"warrantyCards\") || [];\n        const existingIndex = currentWarrantyCards.findIndex(wc => wc.partId === partId);\n        \n        if (existingIndex >= 0) {\n          const updatedCards = [...currentWarrantyCards];\n          updatedCards[existingIndex] = { partId, partName, fileData };\n          vehicleForm.setValue(\"warrantyCards\", updatedCards);\n        } else {\n          vehicleForm.setValue(\"warrantyCards\", [...currentWarrantyCards, { partId, partName, fileData }]);\n        }\n        \n        const fileType = file.type.includes('pdf') ? 'PDF' : 'Image';\n        toast({\n          title: \"Warranty Card Uploaded\",\n          description: `${fileType} warranty card for ${partName} has been uploaded successfully.`,\n        });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const removeWarrantyCard = (partId: string) => {\n    const currentWarrantyCards = vehicleForm.getValues(\"warrantyCards\") || [];\n    const updatedCards = currentWarrantyCards.filter(wc => wc.partId !== partId);\n    vehicleForm.setValue(\"warrantyCards\", updatedCards);\n    \n    toast({\n      title: \"Warranty Card Removed\",\n      description: \"The warranty card has been removed.\",\n    });\n  };\n\n  // Step configuration for progress bar\n  const steps = [\n    { id: 'customer', label: 'Step 1', title: 'Customer Info' },\n    { id: 'otp', label: 'Step 2', title: 'OTP Verification' },\n    { id: 'vehicle', label: 'Step 3', title: 'Vehicle Details' },\n  ];\n\n  const getCurrentStepIndex = () => {\n    if (step === 'success') return 3;\n    return steps.findIndex(s => s.id === step);\n  };\n\n  const currentStepIndex = getCurrentStepIndex();\n  const progressPercentage = step === 'success' ? 100 : ((currentStepIndex + 1) / steps.length) * 100;\n\n  return (\n    <ScreenshotProtection enabled={step !== 'success'}>\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4 sm:p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-6 sm:mb-8\">\n            <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-2\">\n              Customer Registration\n            </h1>\n            <p className=\"text-sm sm:text-base text-gray-600 dark:text-gray-400\">\n              Register your vehicle with us for exclusive services and offers\n            </p>\n          </div>\n\n          {/* Progress Bar - Only show if not on success page */}\n          {step !== 'success' && (\n            <div className=\"mb-8\" data-testid=\"progress-bar-container\">\n              {/* Step Labels */}\n              <div className=\"flex justify-between mb-3\">\n                {steps.map((s, index) => (\n                  <div key={s.id} className=\"flex flex-col items-center flex-1\">\n                    <div className={`text-xs sm:text-sm font-semibold mb-1 ${\n                      index <= currentStepIndex \n                        ? 'text-blue-600 dark:text-blue-400' \n                        : 'text-gray-400 dark:text-gray-500'\n                    }`} data-testid={`step-label-${index + 1}`}>\n                      {s.label}\n                    </div>\n                    <div className={`text-xs ${\n                      index <= currentStepIndex \n                        ? 'text-gray-700 dark:text-gray-300' \n                        : 'text-gray-400 dark:text-gray-500'\n                    }`}>\n                      {s.title}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"relative\">\n                {/* Background bar */}\n                <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n                  {/* Filled portion */}\n                  <div \n                    className=\"h-full bg-gradient-to-r from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-700 transition-all duration-500 ease-in-out\"\n                    style={{ width: `${progressPercentage}%` }}\n                    data-testid=\"progress-bar-fill\"\n                  />\n                </div>\n                \n                {/* Step circles */}\n                <div className=\"absolute top-1/2 -translate-y-1/2 w-full flex justify-between px-1\">\n                  {steps.map((s, index) => (\n                    <div\n                      key={s.id}\n                      className={`w-5 h-5 sm:w-6 sm:h-6 rounded-full border-2 flex items-center justify-center transition-all duration-300 ${\n                        index <= currentStepIndex\n                          ? 'bg-blue-600 dark:bg-blue-500 border-blue-600 dark:border-blue-500'\n                          : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600'\n                      }`}\n                      data-testid={`step-circle-${index + 1}`}\n                    >\n                      {index < currentStepIndex && (\n                        <CheckCircle2 className=\"w-3 h-3 sm:w-4 sm:h-4 text-white\" />\n                      )}\n                      {index === currentStepIndex && (\n                        <div className=\"w-2 h-2 sm:w-2.5 sm:h-2.5 rounded-full bg-white\" />\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n        {/* Step 1: Customer Information */}\n        {step === \"customer\" && (\n          <Card data-testid=\"card-customer-form\">\n            <CardHeader>\n              <div className=\"flex items-center gap-2\">\n                <User className=\"w-6 h-6\" />\n                <CardTitle>Customer Information</CardTitle>\n              </div>\n              <CardDescription>Please provide your personal details</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...customerForm}>\n                <form onSubmit={customerForm.handleSubmit(onCustomerSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={customerForm.control}\n                      name=\"fullName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Full Name *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Enter your full name\" data-testid=\"input-full-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={customerForm.control}\n                      name=\"mobileNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mobile Number *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"10-digit mobile number\" data-testid=\"input-mobile\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={customerForm.control}\n                      name=\"alternativeNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Alternative Number</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Optional\" data-testid=\"input-alt-mobile\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={customerForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address *</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"email\" placeholder=\"your@email.com\" data-testid=\"input-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={customerForm.control}\n                      name=\"referralSource\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>How did you hear about us?</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-referral-source\">\n                                <SelectValue placeholder=\"Select referral source\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {REFERRAL_SOURCES.map((source) => (\n                                <SelectItem key={source} value={source}>\n                                  {source}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={customerForm.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Address *</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Street address\" data-testid=\"input-address\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <FormField\n                      control={customerForm.control}\n                      name=\"city\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>City/Village *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"City name\" data-testid=\"input-city\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={customerForm.control}\n                      name=\"taluka\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Taluka *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Taluka name\" data-testid=\"input-taluka\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={customerForm.control}\n                      name=\"district\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>District *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"District name\" data-testid=\"input-district\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={customerForm.control}\n                      name=\"state\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>State *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-state\">\n                                <SelectValue placeholder=\"Select state\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {INDIAN_STATES.map((state) => (\n                                <SelectItem key={state} value={state}>\n                                  {state}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={customerForm.control}\n                      name=\"pinCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Pin Code *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"6-digit pin code\" data-testid=\"input-pincode\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={registerCustomer.isPending}\n                    data-testid=\"button-submit-customer\"\n                  >\n                    {registerCustomer.isPending ? \"Submitting...\" : \"Submit & Verify\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 2: OTP Verification */}\n        {step === \"otp\" && (\n          <Card data-testid=\"card-otp-verification\">\n            <CardHeader>\n              <CardTitle>OTP Verification</CardTitle>\n              <CardDescription>\n                Enter the 6-digit OTP sent to your mobile\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={onOTPSubmit} className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Enter OTP *</label>\n                  <Input\n                    type=\"text\"\n                    maxLength={6}\n                    value={otpInput}\n                    onChange={(e) => setOtpInput(e.target.value)}\n                    placeholder=\"Enter 6-digit OTP\"\n                    className=\"text-center text-2xl tracking-widest\"\n                    data-testid=\"input-otp\"\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={verifyOTP.isPending || otpInput.length !== 6}\n                  data-testid=\"button-verify-otp\"\n                >\n                  {verifyOTP.isPending ? \"Verifying...\" : \"Verify OTP\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 3: Vehicle Information */}\n        {step === \"vehicle\" && (\n          <Card data-testid=\"card-vehicle-form\">\n            <CardHeader>\n              <div className=\"flex items-center gap-2\">\n                <Car className=\"w-6 h-6\" />\n                <CardTitle>Vehicle Information</CardTitle>\n              </div>\n              <CardDescription>\n                {registeredVehicles.length > 0 \n                  ? `You have added ${registeredVehicles.length} vehicle${registeredVehicles.length > 1 ? 's' : ''}. Add another vehicle or complete registration.`\n                  : \"Add your vehicle details. You can add multiple vehicles.\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...vehicleForm}>\n                <form onSubmit={vehicleForm.handleSubmit(onVehicleSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={vehicleForm.control}\n                      name=\"isNewVehicle\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vehicle Condition *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-vehicle-condition\">\n                                <SelectValue placeholder=\"Select condition\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"true\">New Vehicle</SelectItem>\n                              <SelectItem value=\"false\">Used Vehicle</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {vehicleForm.watch(\"isNewVehicle\") === \"false\" && (\n                      <FormField\n                        control={vehicleForm.control}\n                        name=\"vehicleNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Vehicle Number *</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"MH12AB1234\" className=\"uppercase\" data-testid=\"input-vehicle-number\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    <FormField\n                      control={vehicleForm.control}\n                      name=\"vehicleBrand\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vehicle Brand *</FormLabel>\n                          <Select \n                            onValueChange={(value) => {\n                              field.onChange(value);\n                              setSelectedBrand(value);\n                              const models = getModelsByBrand(value);\n                              setAvailableModels(models.map(m => m.name));\n                              vehicleForm.setValue(\"vehicleModel\", \"\");\n                              vehicleForm.setValue(\"selectedParts\", []);\n                              setSelectedModel(\"\");\n                              setAvailableParts([]);\n                            }} \n                            defaultValue={field.value}\n                          >\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-vehicle-brand\">\n                                <SelectValue placeholder=\"Select brand\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {VEHICLE_BRANDS.map((brand) => (\n                                <SelectItem key={brand} value={brand}>\n                                  {brand}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={vehicleForm.control}\n                      name=\"vehicleModel\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vehicle Model *</FormLabel>\n                          <Select \n                            onValueChange={(value) => {\n                              field.onChange(value);\n                              setSelectedModel(value);\n                              if (value !== \"Other\") {\n                                const parts = getPartsByBrandAndModel(selectedBrand, value);\n                                setAvailableParts(parts);\n                              }\n                            }} \n                            defaultValue={field.value}\n                            disabled={!selectedBrand}\n                          >\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-vehicle-model\">\n                                <SelectValue placeholder={selectedBrand ? \"Select model\" : \"Select brand first\"} />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {availableModels.map((model) => (\n                                <SelectItem key={model} value={model}>\n                                  {model}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {vehicleForm.watch(\"vehicleModel\") === \"Other\" && (\n                      <FormField\n                        control={vehicleForm.control}\n                        name=\"customModel\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Specify Model Name *</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Enter model name\" data-testid=\"input-custom-model\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    <FormField\n                      control={vehicleForm.control}\n                      name=\"variant\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Variant</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-variant\">\n                                <SelectValue placeholder=\"Select variant\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"Top\">Top</SelectItem>\n                              <SelectItem value=\"Base\">Base</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={vehicleForm.control}\n                      name=\"color\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Color</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-color\">\n                                <SelectValue placeholder=\"Select color\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"White\">White</SelectItem>\n                              <SelectItem value=\"Black\">Black</SelectItem>\n                              <SelectItem value=\"Silver\">Silver</SelectItem>\n                              <SelectItem value=\"Grey\">Grey</SelectItem>\n                              <SelectItem value=\"Red\">Red</SelectItem>\n                              <SelectItem value=\"Blue\">Blue</SelectItem>\n                              <SelectItem value=\"Brown\">Brown</SelectItem>\n                              <SelectItem value=\"Orange\">Orange</SelectItem>\n                              <SelectItem value=\"Green\">Green</SelectItem>\n                              <SelectItem value=\"Yellow\">Yellow</SelectItem>\n                              <SelectItem value=\"Others\">Others</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {vehicleForm.watch(\"color\") === \"Others\" && (\n                      <FormField\n                        control={vehicleForm.control}\n                        name=\"customColor\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Specify Color *</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Enter color name\" data-testid=\"input-custom-color\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    <FormField\n                      control={vehicleForm.control}\n                      name=\"yearOfPurchase\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Year of Purchase</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"2023\" type=\"number\" data-testid=\"input-year\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {vehicleForm.watch(\"isNewVehicle\") === \"true\" && (\n                    <FormField\n                      control={vehicleForm.control}\n                      name=\"chassisNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Chassis Number *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Enter chassis number\" className=\"uppercase\" data-testid=\"input-chassis-number\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  {selectedModel && selectedModel !== \"Other\" && availableParts.length > 0 && (\n                    <FormField\n                      control={vehicleForm.control}\n                      name=\"selectedParts\"\n                      render={() => (\n                        <FormItem>\n                          <div className=\"mb-4\">\n                            <FormLabel className=\"text-base\">Parts Needed for Service/Replacement</FormLabel>\n                            <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\n                              Select parts needed for this vehicle\n                            </p>\n                          </div>\n                          <div className=\"grid grid-cols-1 gap-3 max-h-96 overflow-y-auto border rounded-lg p-4\">\n                            {availableParts.map((part) => (\n                              <FormField\n                                key={part.id}\n                                control={vehicleForm.control}\n                                name=\"selectedParts\"\n                                render={({ field }) => {\n                                  const isSelected = field.value?.includes(part.id);\n                                  const hasWarrantyCard = vehicleForm.watch(\"warrantyCards\")?.some(wc => wc.partId === part.id);\n                                  return (\n                                    <FormItem\n                                      key={part.id}\n                                      className=\"flex flex-col space-y-2 p-3 border rounded-md bg-muted/30\"\n                                    >\n                                      <div className=\"flex items-start space-x-3\">\n                                        <FormControl>\n                                          <Checkbox\n                                            checked={isSelected}\n                                            onCheckedChange={(checked) => {\n                                              if (checked) {\n                                                field.onChange([...field.value, part.id]);\n                                              } else {\n                                                field.onChange(field.value?.filter((value) => value !== part.id));\n                                                removeWarrantyCard(part.id);\n                                              }\n                                            }}\n                                            data-testid={`checkbox-part-${part.id}`}\n                                          />\n                                        </FormControl>\n                                        <div className=\"flex-1\">\n                                          <FormLabel className=\"text-sm font-normal cursor-pointer\">\n                                            {part.name}\n                                            <span className=\"text-xs text-gray-500 dark:text-gray-400 block\">\n                                              {part.category}\n                                            </span>\n                                          </FormLabel>\n                                        </div>\n                                      </div>\n                                    </FormItem>\n                                  );\n                                }}\n                              />\n                            ))}\n                          </div>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  <FormField\n                    control={vehicleForm.control}\n                    name=\"vehiclePhoto\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Vehicle Photo *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"file\" \n                            accept=\"image/*\"\n                            onChange={handlePhotoUpload}\n                            data-testid=\"input-vehicle-photo\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {vehicleForm.watch(\"warrantyCards\")?.length > 0 && (\n                    <div className=\"border rounded-lg p-4 bg-muted/20\">\n                      <h3 className=\"text-sm font-semibold mb-3\">Uploaded Warranty Cards ({vehicleForm.watch(\"warrantyCards\").length})</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                        {vehicleForm.watch(\"warrantyCards\").map((wc) => (\n                          <div key={wc.partId} className=\"flex items-center justify-between p-2 bg-white dark:bg-gray-800 rounded border\" data-testid={`warranty-card-${wc.partId}`}>\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900 rounded flex items-center justify-center\">\n                                <span className=\"text-green-600 dark:text-green-400 text-xs\">✓</span>\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium\">{wc.partName}</p>\n                                <p className=\"text-xs text-muted-foreground\">Warranty card uploaded</p>\n                              </div>\n                            </div>\n                            <button\n                              type=\"button\"\n                              onClick={() => removeWarrantyCard(wc.partId)}\n                              className=\"text-xs text-red-600 dark:text-red-400 hover:underline\"\n                              data-testid={`button-remove-warranty-display-${wc.partId}`}\n                            >\n                              Remove\n                            </button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"space-y-3\">\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={registerVehicle.isPending}\n                      data-testid=\"button-submit-vehicle\"\n                    >\n                      {registerVehicle.isPending ? \"Adding Vehicle...\" : registeredVehicles.length > 0 ? \"Add Another Vehicle\" : \"Add Vehicle\"}\n                    </Button>\n                    {registeredVehicles.length > 0 && (\n                      <Button \n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"w-full\" \n                        onClick={() => completeRegistration.mutate()}\n                        disabled={completeRegistration.isPending}\n                        data-testid=\"button-complete-registration\"\n                      >\n                        {completeRegistration.isPending ? \"Completing...\" : `Complete Registration (${registeredVehicles.length} vehicle${registeredVehicles.length > 1 ? 's' : ''} added)`}\n                      </Button>\n                    )}\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 4: Success Message */}\n        {step === \"success\" && customerData && vehicleData && (\n          <Card data-testid=\"card-success\" className=\"bg-green-50 dark:bg-green-900/20\">\n            <CardHeader>\n              <div className=\"flex items-center justify-center gap-2\">\n                <CheckCircle2 className=\"w-12 h-12 text-green-600 dark:text-green-400\" />\n              </div>\n              <CardTitle className=\"text-center text-2xl\">Registration Successful!</CardTitle>\n              <CardDescription className=\"text-center\">\n                Your vehicle has been registered successfully\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg space-y-3\">\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Your Reference ID</p>\n                  <p className=\"text-3xl font-bold text-blue-600 dark:text-blue-400\" data-testid=\"text-reference-code\">\n                    {customerData.referenceCode}\n                  </p>\n                </div>\n                \n                <div className=\"border-t pt-4 mt-4\">\n                  <h3 className=\"font-semibold mb-2\">Customer Details:</h3>\n                  <p data-testid=\"text-customer-name\">Name: {customerData.fullName}</p>\n                  <p data-testid=\"text-customer-mobile\">Mobile: {customerData.mobileNumber}</p>\n                  <p data-testid=\"text-customer-email\">Email: {customerData.email}</p>\n                </div>\n\n                <div className=\"border-t pt-4 mt-4\">\n                  <h3 className=\"font-semibold mb-2\">Vehicle Details:</h3>\n                  <p data-testid=\"text-vehicle-number\">\n                    {vehicleData.vehicleNumber \n                      ? `Registration Number: ${vehicleData.vehicleNumber}` \n                      : vehicleData.chassisNumber \n                        ? `Chassis Number: ${vehicleData.chassisNumber}`\n                        : 'Vehicle Number: Not provided'}\n                  </p>\n                  <p data-testid=\"text-vehicle-info\">{vehicleData.vehicleBrand} {vehicleData.vehicleModel}</p>\n                  {vehicleData.yearOfPurchase && <p>Year: {vehicleData.yearOfPurchase}</p>}\n                </div>\n              </div>\n\n              <div className=\"text-center text-sm text-gray-600 dark:text-gray-400\">\n                <p>You will receive SMS, WhatsApp, and Email confirmations shortly.</p>\n                <p className=\"mt-2\">We'll notify you about offers, services & discounts soon!</p>\n              </div>\n\n              <Button \n                onClick={() => {\n                  // Reset all state\n                  setStep(\"customer\");\n                  setCustomerId(\"\");\n                  setOtp(\"\");\n                  setOtpInput(\"\");\n                  setCustomerData(null);\n                  setVehicleData(null);\n                  setRegisteredVehicles([]);\n                  setSelectedBrand(\"\");\n                  setSelectedModel(\"\");\n                  setAvailableModels([]);\n                  setAvailableParts([]);\n                  \n                  // Reset forms\n                  customerForm.reset();\n                  vehicleForm.reset();\n                  \n                  console.log('✅ Form reset - Ready for new customer registration');\n                }} \n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-6 text-lg shadow-lg\"\n                data-testid=\"button-register-another\"\n              >\n                Register Another Customer\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n        </div>\n      </div>\n    </ScreenshotProtection>\n  );\n}\n","size_bytes":54685},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/models/PerformanceLog.ts":{"content":"import mongoose from 'mongoose';\n\nconst performanceLogSchema = new mongoose.Schema({\n  employeeId: { type: mongoose.Schema.Types.ObjectId, ref: 'Employee', required: true },\n  employeeName: { type: String, required: true },\n  employeeCode: { type: String },\n  month: { type: Number, required: true },\n  year: { type: Number, required: true },\n  totalSales: { type: Number, default: 0 },\n  orderCount: { type: Number, default: 0 },\n  avgOrderValue: { type: Number, default: 0 },\n  attendanceRate: { type: Number, default: 0 },\n  tasksCompleted: { type: Number, default: 0 },\n  customerFeedbackScore: { type: Number, default: 0 },\n  performanceScore: { type: Number, default: 0 },\n  notes: { type: String },\n  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n}, { timestamps: true });\n\nperformanceLogSchema.index({ employeeId: 1, month: 1, year: 1 }, { unique: true });\n\nexport const PerformanceLog = mongoose.models.PerformanceLog || mongoose.model('PerformanceLog', performanceLogSchema);\n","size_bytes":1006},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { NotificationBell } from \"@/components/NotificationBell\";\nimport { AuthProvider, useAuth } from \"@/lib/auth\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Products from \"@/pages/Products\";\nimport Inventory from \"@/pages/Inventory\";\nimport ServiceVisits from \"@/pages/ServiceVisits\";\nimport Orders from \"@/pages/Orders\";\nimport Employees from \"@/pages/Employees\";\nimport Attendance from \"@/pages/Attendance\";\nimport Reports from \"@/pages/Reports\";\nimport Analytics from \"@/pages/Analytics\";\nimport Settings from \"@/pages/Settings\";\nimport Login from \"@/pages/Login\";\nimport ForgotPassword from \"@/pages/ForgotPassword\";\nimport Profile from \"@/pages/Profile\";\nimport RoleSelection from \"@/pages/RoleSelection\";\nimport ShopSelection from \"@/pages/ShopSelection\";\nimport UserManagement from \"@/pages/UserManagement\";\nimport Tasks from \"@/pages/Tasks\";\nimport Leaves from \"@/pages/Leaves\";\nimport Communications from \"@/pages/Communications\";\nimport CustomerRegistration from \"@/pages/CustomerRegistration\";\nimport CustomerRegistrationDashboard from \"@/pages/CustomerRegistrationDashboard\";\nimport Invoices from \"@/pages/Invoices\";\nimport SupportFeedback from \"@/pages/SupportFeedback\";\nimport { useEffect } from \"react\";\nimport { User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\n// Route to resource permission mapping\nconst ROUTE_PERMISSIONS: Record<string, { resource: string; action: string } | null> = {\n  '/': null, // Dashboard is accessible to all authenticated users\n  '/profile': null, // Profile is accessible to all authenticated users\n  '/settings': null, // Settings is accessible to all authenticated users\n  '/register-customer': { resource: 'customers', action: 'create' },\n  '/registration-dashboard': { resource: 'customers', action: 'create' },\n  '/products': { resource: 'products', action: 'read' },\n  '/inventory': { resource: 'inventory', action: 'read' },\n  '/orders': { resource: 'orders', action: 'read' },\n  '/employees': { resource: 'employees', action: 'read' },\n  '/attendance': { resource: 'attendance', action: 'read' },\n  '/visits': { resource: 'orders', action: 'read' }, // Service visits use orders permission\n  '/reports': { resource: 'reports', action: 'read' },\n  '/users': { resource: 'users', action: 'read' }, // User management is admin-only\n  '/tasks': { resource: 'tasks', action: 'read' },\n  '/leaves': { resource: 'leaves', action: 'read' },\n  '/communications': { resource: 'communications', action: 'read' },\n  '/invoices': { resource: 'invoices', action: 'read' },\n  '/analytics': { resource: 'reports', action: 'read' },\n  '/support': { resource: 'supportTickets', action: 'read' },\n};\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { user, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !user && location !== '/login' && location !== '/select-role' && location !== '/select-shop' && location !== '/forgot-password') {\n      const timer = setTimeout(() => {\n        setLocation('/select-shop');\n      }, 100);\n      return () => clearTimeout(timer);\n    }\n  }, [user, isLoading, setLocation, location]);\n\n  // Check route permissions after user is loaded\n  useEffect(() => {\n    if (user && !isLoading) {\n      const routePermission = ROUTE_PERMISSIONS[location];\n      \n      // If route requires specific permission, check it\n      if (routePermission) {\n        const { resource, action } = routePermission;\n        const hasAccess = user.permissions?.[resource]?.includes(action);\n        \n        if (!hasAccess) {\n          // Redirect to dashboard if user doesn't have permission\n          setLocation('/');\n        }\n      }\n    }\n  }, [user, isLoading, location, setLocation]);\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-screen\">Loading...</div>;\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return <Component />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/select-shop\" component={ShopSelection} />\n      <Route path=\"/select-role\" component={RoleSelection} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/forgot-password\" component={ForgotPassword} />\n      <Route path=\"/\">\n        {() => <ProtectedRoute component={Dashboard} />}\n      </Route>\n      <Route path=\"/users\">\n        {() => <ProtectedRoute component={UserManagement} />}\n      </Route>\n      <Route path=\"/products\">\n        {() => <ProtectedRoute component={Products} />}\n      </Route>\n      <Route path=\"/inventory\">\n        {() => <ProtectedRoute component={Inventory} />}\n      </Route>\n      <Route path=\"/visits\">\n        {() => <ProtectedRoute component={ServiceVisits} />}\n      </Route>\n      <Route path=\"/orders\">\n        {() => <ProtectedRoute component={Orders} />}\n      </Route>\n      <Route path=\"/employees\">\n        {() => <ProtectedRoute component={Employees} />}\n      </Route>\n      <Route path=\"/attendance\">\n        {() => <ProtectedRoute component={Attendance} />}\n      </Route>\n      <Route path=\"/reports\">\n        {() => <ProtectedRoute component={Reports} />}\n      </Route>\n      <Route path=\"/settings\">\n        {() => <ProtectedRoute component={Settings} />}\n      </Route>\n      <Route path=\"/profile\">\n        {() => <ProtectedRoute component={Profile} />}\n      </Route>\n      <Route path=\"/tasks\">\n        {() => <ProtectedRoute component={Tasks} />}\n      </Route>\n      <Route path=\"/leaves\">\n        {() => <ProtectedRoute component={Leaves} />}\n      </Route>\n      <Route path=\"/communications\">\n        {() => <ProtectedRoute component={Communications} />}\n      </Route>\n      <Route path=\"/invoices\">\n        {() => <ProtectedRoute component={Invoices} />}\n      </Route>\n      <Route path=\"/register-customer\">\n        {() => <ProtectedRoute component={CustomerRegistration} />}\n      </Route>\n      <Route path=\"/registration-dashboard\">\n        {() => <ProtectedRoute component={CustomerRegistrationDashboard} />}\n      </Route>\n      <Route path=\"/analytics\">\n        {() => <ProtectedRoute component={Analytics} />}\n      </Route>\n      <Route path=\"/support\">\n        {() => <ProtectedRoute component={SupportFeedback} />}\n      </Route>\n    </Switch>\n  );\n}\n\nfunction AppLayout() {\n  const { user, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  const pathname = location.split('?')[0];\n  if (isLoading || pathname === '/select-shop' || pathname === '/select-role' || pathname === '/login' || pathname === '/forgot-password') {\n    return <Router />;\n  }\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between gap-4 px-6 py-3 border-b border-border bg-background\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <div className=\"flex items-center gap-2\">\n              {user && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setLocation('/profile')}\n                  data-testid=\"button-profile\"\n                >\n                  <User className=\"h-4 w-4 mr-2\" />\n                  {user.name}\n                </Button>\n              )}\n              <NotificationBell />\n              <ThemeToggle />\n            </div>\n          </header>\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <Router />\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider>\n          <AuthProvider>\n            <AppLayout />\n            <Toaster />\n          </AuthProvider>\n        </ThemeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":8600},"client/src/pages/Communications.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Search, MessageSquare } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { format } from \"date-fns\";\n\nexport default function Communications() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: communications = [], isLoading: commLoading, error: commError } = useQuery<any[]>({\n    queryKey: [\"/api/communication-logs\"],\n  });\n\n  const { data: feedbacks = [], isLoading: feedbackLoading, error: feedbackError } = useQuery<any[]>({\n    queryKey: [\"/api/feedbacks\"],\n  });\n\n  const isLoading = commLoading || feedbackLoading;\n  const error = commError || feedbackError;\n\n  const getCommunicationTypeBadge = (type: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"outline\"> = {\n      call: \"default\",\n      email: \"secondary\",\n      meeting: \"outline\",\n      message: \"outline\",\n    };\n    return <Badge variant={variants[type] || \"outline\"} data-testid={`type-${type}`}>\n      {type.charAt(0).toUpperCase() + type.slice(1)}\n    </Badge>;\n  };\n\n  const filteredComms = communications.filter((comm: any) => {\n    return comm.customerName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      comm.subject?.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  const filteredFeedbacks = feedbacks.filter((feedback: any) => {\n    return feedback.customerName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      feedback.subject?.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"grid gap-4\">\n          {[...Array(5)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold\">Communications & Feedback</h1>\n        <Card className=\"border-destructive\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <MessageSquare className=\"h-12 w-12 mx-auto text-destructive mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Failed to load communications</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {(error as Error)?.message || 'An error occurred while fetching data'}\n              </p>\n              <Button onClick={() => window.location.reload()}>Retry</Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Communications & Feedback</h1>\n        <Button data-testid=\"button-create-communication\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          New Communication\n        </Button>\n      </div>\n\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search communications...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10\"\n          data-testid=\"input-search\"\n        />\n      </div>\n\n      {filteredComms.length > 0 && (\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\">Communication Logs</h2>\n          <div className=\"grid gap-4\">\n            {filteredComms.map((comm: any) => (\n              <Card key={comm._id} className=\"hover-elevate\" data-testid={`card-comm-${comm._id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{comm.subject}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{comm.customerName}</p>\n                    </div>\n                    <MessageSquare className=\"h-5 w-5 text-muted-foreground\" />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Date</p>\n                      <p className=\"text-sm font-medium\">{format(new Date(comm.date), 'dd MMM yyyy')}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Type</p>\n                      <div className=\"mt-1\">{getCommunicationTypeBadge(comm.type)}</div>\n                    </div>\n                    <div className=\"col-span-2\">\n                      <p className=\"text-xs text-muted-foreground\">Notes</p>\n                      <p className=\"text-sm mt-1 truncate\">{comm.notes}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {filteredFeedbacks.length > 0 && (\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\">Customer Feedback</h2>\n          <div className=\"grid gap-4\">\n            {filteredFeedbacks.map((feedback: any) => (\n              <Card key={feedback._id} className=\"hover-elevate\" data-testid={`card-feedback-${feedback._id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{feedback.subject}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{feedback.customerName}</p>\n                    </div>\n                    <Badge variant={feedback.rating >= 4 ? \"default\" : feedback.rating >= 3 ? \"secondary\" : \"destructive\"}>\n                      {feedback.rating}/5\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Date</p>\n                      <p className=\"text-sm font-medium\">{format(new Date(feedback.date), 'dd MMM yyyy')}</p>\n                    </div>\n                    {feedback.comments && (\n                      <div>\n                        <p className=\"text-xs text-muted-foreground\">Comments</p>\n                        <p className=\"text-sm mt-1\">{feedback.comments}</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {filteredComms.length === 0 && filteredFeedbacks.length === 0 && (\n        <div className=\"text-center py-12\">\n          <MessageSquare className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No communications or feedback found.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7280},"server/models/CommunicationLog.ts":{"content":"import mongoose from 'mongoose';\n\nconst communicationLogSchema = new mongoose.Schema({\n  customerId: { type: mongoose.Schema.Types.ObjectId, ref: 'Customer', required: true },\n  type: { \n    type: String, \n    enum: ['call', 'email', 'sms', 'whatsapp', 'visit'],\n    required: true \n  },\n  subject: { type: String },\n  message: { type: String, required: true },\n  direction: { \n    type: String, \n    enum: ['inbound', 'outbound'],\n    required: true \n  },\n  handledBy: { type: mongoose.Schema.Types.ObjectId, ref: 'Employee' },\n  date: { type: Date, default: Date.now },\n  followUpRequired: { type: Boolean, default: false },\n  followUpDate: { type: Date },\n}, { timestamps: true });\n\nexport const CommunicationLog = mongoose.models.CommunicationLog || mongoose.model('CommunicationLog', communicationLogSchema);\n","size_bytes":814},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/KPICard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface KPICardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  trend?: {\n    value: number;\n    isPositive: boolean;\n  };\n  className?: string;\n  color?: \"blue\" | \"yellow\" | \"green\" | \"purple\" | \"orange\" | \"pink\";\n}\n\nexport function KPICard({ title, value, icon: Icon, trend, className, color = \"blue\" }: KPICardProps) {\n  const colorClasses = {\n    blue: \"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900 border-blue-200 dark:border-blue-800\",\n    yellow: \"bg-gradient-to-br from-yellow-50 to-yellow-100 dark:from-yellow-950 dark:to-yellow-900 border-yellow-200 dark:border-yellow-800\",\n    green: \"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950 dark:to-green-900 border-green-200 dark:border-green-800\",\n    purple: \"bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950 dark:to-purple-900 border-purple-200 dark:border-purple-800\",\n    orange: \"bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950 dark:to-orange-900 border-orange-200 dark:border-orange-800\",\n    pink: \"bg-gradient-to-br from-pink-50 to-pink-100 dark:from-pink-950 dark:to-pink-900 border-pink-200 dark:border-pink-800\",\n  };\n\n  const iconColorClasses = {\n    blue: \"bg-blue-500/20 dark:bg-blue-500/30\",\n    yellow: \"bg-yellow-500/20 dark:bg-yellow-500/30\",\n    green: \"bg-green-500/20 dark:bg-green-500/30\",\n    purple: \"bg-purple-500/20 dark:bg-purple-500/30\",\n    orange: \"bg-orange-500/20 dark:bg-orange-500/30\",\n    pink: \"bg-pink-500/20 dark:bg-pink-500/30\",\n  };\n\n  const iconTextColorClasses = {\n    blue: \"text-blue-600 dark:text-blue-400\",\n    yellow: \"text-yellow-600 dark:text-yellow-400\",\n    green: \"text-green-600 dark:text-green-400\",\n    purple: \"text-purple-600 dark:text-purple-400\",\n    orange: \"text-orange-600 dark:text-orange-400\",\n    pink: \"text-pink-600 dark:text-pink-400\",\n  };\n\n  return (\n    <Card className={cn(\"hover-elevate border-2\", colorClasses[color], className)} data-testid={`kpi-${title.toLowerCase().replace(/\\s+/g, \"-\")}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-2\">\n            <p className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">{title}</p>\n            <p className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\" data-testid={`value-${title.toLowerCase().replace(/\\s+/g, \"-\")}`}>{value}</p>\n            {trend && (\n              <p className={cn(\n                \"text-xs font-medium\",\n                trend.isPositive ? \"text-success\" : \"text-destructive\"\n              )}>\n                {trend.isPositive ? \"+\" : \"\"}{trend.value}% from last month\n              </p>\n            )}\n          </div>\n          <div className={cn(\"p-3 rounded-lg\", iconColorClasses[color])}>\n            <Icon className={cn(\"h-6 w-6\", iconTextColorClasses[color])} />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3092},"client/src/components/examples/DataTable.tsx":{"content":"import { DataTable } from \"../DataTable\";\nimport { StatusBadge } from \"../StatusBadge\";\n\nconst sampleData = [\n  { id: \"1\", name: \"Engine Oil Filter\", category: \"Engine Parts\", stock: 45, status: \"in_stock\" },\n  { id: \"2\", name: \"Brake Pads Set\", category: \"Brake System\", stock: 12, status: \"low_stock\" },\n  { id: \"3\", name: \"Air Filter\", category: \"Engine Parts\", stock: 0, status: \"out_of_stock\" },\n];\n\nexport default function DataTableExample() {\n  return (\n    <div className=\"p-6 bg-background\">\n      <DataTable\n        columns={[\n          { header: \"Product Name\", accessor: \"name\" },\n          { header: \"Category\", accessor: \"category\" },\n          { header: \"Stock\", accessor: \"stock\", className: \"text-right\" },\n          { \n            header: \"Status\", \n            accessor: (row) => <StatusBadge type=\"stock\" status={row.status as any} />,\n            className: \"text-right\"\n          },\n        ]}\n        data={sampleData}\n        onRowClick={(row) => console.log(\"Row clicked:\", row)}\n      />\n    </div>\n  );\n}\n","size_bytes":1032},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/pages/Attendance.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Calendar, Clock, Fingerprint } from \"lucide-react\";\n\nexport default function Attendance() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Attendance Management</h1>\n        <p className=\"text-muted-foreground mt-1\">Employee attendance tracking system</p>\n      </div>\n\n      <Card className=\"border-dashed\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-muted-foreground\">\n            <Calendar className=\"h-5 w-5\" />\n            Coming Soon\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <p className=\"text-muted-foreground\">\n            The attendance management module is currently under development and will be available soon.\n            This feature will include:\n          </p>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"flex items-start gap-3 p-4 rounded-lg border border-border\">\n              <Clock className=\"h-5 w-5 text-primary mt-0.5\" />\n              <div>\n                <h3 className=\"font-semibold mb-1\">Manual Attendance</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Track employee check-in and check-out times manually with leave management\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3 p-4 rounded-lg border border-border\">\n              <Fingerprint className=\"h-5 w-5 text-primary mt-0.5\" />\n              <div>\n                <h3 className=\"font-semibold mb-1\">Biometric Integration</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Connect with biometric devices for automated attendance tracking\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"p-4 rounded-lg bg-info/10 border border-info/20\">\n            <p className=\"text-sm text-info\">\n              This module will be integrated in the next update. Stay tuned for more information.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2221},"server/services/whatsapp.ts":{"content":"interface WhatsAppResponse {\n  success: boolean;\n  statusDesc?: string;\n  statusCode?: number;\n  data?: any;\n  error?: string;\n}\n\nconst WHATSAPP_API_KEY = process.env.WHATSAPP_API_KEY;\nconst WHATSAPP_PHONE_NUMBER_ID = process.env.WHATSAPP_PHONE_NUMBER_ID || '919970127778';\nconst WHATSAPP_BASE_URL = 'https://cloudapi.akst.in/api/v1.0/messages';\n\nconst MAX_RETRIES = 3;\nconst INITIAL_RETRY_DELAY = 1000;\n\nasync function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  retries: number = MAX_RETRIES,\n  delay: number = INITIAL_RETRY_DELAY,\n  attempt: number = 1\n): Promise<T> {\n  try {\n    return await fn();\n  } catch (error) {\n    if (attempt >= retries) {\n      throw error;\n    }\n    \n    console.log(`⚠️ Attempt ${attempt} failed, retrying in ${delay}ms... (${retries - attempt} retries left)`);\n    await new Promise(resolve => setTimeout(resolve, delay));\n    \n    return retryWithBackoff(fn, retries, delay * 2, attempt + 1);\n  }\n}\n\nfunction formatPhoneNumber(phone: string): string | null {\n  if (!phone || typeof phone !== 'string') {\n    console.error('⚠️ Invalid phone number: empty or not a string');\n    return null;\n  }\n\n  let formattedPhone = phone.trim().replace(/\\D/g, '');\n  \n  if (!formattedPhone) {\n    console.error('⚠️ Phone number contains no digits');\n    return null;\n  }\n  \n  if (formattedPhone.startsWith('0') && formattedPhone.length === 11) {\n    formattedPhone = formattedPhone.substring(1);\n  }\n  \n  if (formattedPhone.startsWith('91') && formattedPhone.length === 12) {\n    return formattedPhone;\n  }\n  \n  if (formattedPhone.length === 10) {\n    formattedPhone = '91' + formattedPhone;\n  }\n  \n  if (formattedPhone.length !== 12 || !formattedPhone.startsWith('91')) {\n    console.error(`⚠️ Invalid phone number format after normalization: \"${formattedPhone}\" (original: \"${phone}\")`);\n    console.error('Expected format: 12 digits starting with 91 (e.g., 919619523254)');\n    return null;\n  }\n  \n  return formattedPhone;\n}\n\nfunction validatePhoneNumber(phone: string | null): boolean {\n  if (!phone) return false;\n  return phone.length === 12 && phone.startsWith('91') && /^\\d+$/.test(phone);\n}\n\nexport async function sendWhatsAppOTP({ \n  to, \n  otp \n}: { \n  to: string; \n  otp: string;\n}): Promise<WhatsAppResponse> {\n  if (!WHATSAPP_API_KEY) {\n    console.error('❌ WhatsApp API key not configured');\n    return { success: false, error: 'WhatsApp credentials not configured' };\n  }\n\n  const formattedPhone = formatPhoneNumber(to);\n  \n  if (!formattedPhone) {\n    console.error('❌ Invalid phone number format');\n    return { success: false, error: 'Invalid phone number format. Please provide a valid Indian mobile number (10 digits or with +91/91 prefix)' };\n  }\n  \n  const url = `${WHATSAPP_BASE_URL}/send-template/${WHATSAPP_PHONE_NUMBER_ID}`;\n  \n  console.log('\\n📱 Sending WhatsApp OTP Template');\n  console.log('================================');\n  console.log('API URL:', url);\n  console.log('API Key:', WHATSAPP_API_KEY.substring(0, 8) + '...');\n  console.log('Channel Number:', WHATSAPP_PHONE_NUMBER_ID);\n  console.log('Template Name: otptest');\n  console.log('To (Original):', to);\n  console.log('To (Formatted):', formattedPhone);\n  console.log('OTP:', otp);\n  console.log('================================\\n');\n\n  try {\n    const startTime = Date.now();\n    \n    const payload = {\n      messaging_product: 'whatsapp',\n      recipient_type: 'individual',\n      to: formattedPhone,\n      type: 'template',\n      template: {\n        name: 'otptest',\n        language: {\n          code: 'en'\n        },\n        components: [\n          {\n            type: 'body',\n            parameters: [\n              {\n                type: 'text',\n                text: otp\n              }\n            ]\n          },\n          {\n            type: 'button',\n            sub_type: 'url',\n            index: '0',\n            parameters: [\n              {\n                type: 'text',\n                text: otp\n              }\n            ]\n          }\n        ]\n      }\n    };\n\n    console.log('Request Payload:', JSON.stringify(payload, null, 2));\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${WHATSAPP_API_KEY}`\n      },\n      body: JSON.stringify(payload)\n    });\n\n    const responseTime = Date.now() - startTime;\n    const data = await response.json();\n\n    console.log(`\\n✅ WhatsApp OTP Response (${responseTime}ms)`);\n    console.log('Status:', response.status);\n    console.log('Response:', JSON.stringify(data, null, 2));\n    console.log('================================\\n');\n\n    if (data.success) {\n      return { \n        success: true, \n        statusDesc: data.statusDesc,\n        data: data.data \n      };\n    } else {\n      return { \n        success: false, \n        error: data.statusDesc || 'Failed to send WhatsApp OTP template',\n        statusCode: data.statusCode\n      };\n    }\n  } catch (error) {\n    console.error('❌ WhatsApp OTP Template API Error:', error);\n    return { \n      success: false, \n      error: error instanceof Error ? error.message : 'Failed to send WhatsApp OTP template'\n    };\n  }\n}\n\nexport async function sendRoleOTP({ \n  to, \n  otp \n}: { \n  to: string; \n  otp: string;\n}): Promise<WhatsAppResponse> {\n  if (!WHATSAPP_API_KEY) {\n    console.error('❌ WhatsApp API key not configured');\n    return { success: false, error: 'WhatsApp credentials not configured' };\n  }\n\n  const formattedPhone = formatPhoneNumber(to);\n  const url = `${WHATSAPP_BASE_URL}/send-template/${WHATSAPP_PHONE_NUMBER_ID}`;\n  \n  console.log('\\n📱 Sending WhatsApp Role OTP Template');\n  console.log('================================');\n  console.log('API URL:', url);\n  console.log('API Key:', WHATSAPP_API_KEY.substring(0, 8) + '...');\n  console.log('Channel Number:', WHATSAPP_PHONE_NUMBER_ID);\n  console.log('Template Name: roleotp');\n  console.log('To (Original):', to);\n  console.log('To (Formatted):', formattedPhone);\n  console.log('OTP:', otp);\n  console.log('================================\\n');\n\n  try {\n    const startTime = Date.now();\n    \n    const payload = {\n      messaging_product: 'whatsapp',\n      recipient_type: 'individual',\n      to: formattedPhone,\n      type: 'template',\n      template: {\n        name: 'roleotp',\n        language: {\n          code: 'en'\n        },\n        components: [\n          {\n            type: 'body',\n            parameters: [\n              {\n                type: 'text',\n                text: otp\n              }\n            ]\n          },\n          {\n            type: 'button',\n            sub_type: 'url',\n            index: '0',\n            parameters: [\n              {\n                type: 'text',\n                text: otp\n              }\n            ]\n          }\n        ]\n      }\n    };\n\n    console.log('Request Payload:', JSON.stringify(payload, null, 2));\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${WHATSAPP_API_KEY}`\n      },\n      body: JSON.stringify(payload)\n    });\n\n    const responseTime = Date.now() - startTime;\n    const data = await response.json();\n\n    console.log(`\\n✅ WhatsApp Role OTP Response (${responseTime}ms)`);\n    console.log('Status:', response.status);\n    console.log('Response:', JSON.stringify(data, null, 2));\n    console.log('================================\\n');\n\n    if (data.success) {\n      return { \n        success: true, \n        statusDesc: data.statusDesc,\n        data: data.data \n      };\n    } else {\n      return { \n        success: false, \n        error: data.statusDesc || 'Failed to send WhatsApp Role OTP template',\n        statusCode: data.statusCode\n      };\n    }\n  } catch (error) {\n    console.error('❌ WhatsApp Role OTP Template API Error:', error);\n    return { \n      success: false, \n      error: error instanceof Error ? error.message : 'Failed to send WhatsApp Role OTP template'\n    };\n  }\n}\n\nexport function generateOTP(): string {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n}\n\nexport async function sendWhatsAppWelcome({ \n  to, \n  templateName,\n  customerId\n}: { \n  to: string; \n  templateName: string;\n  customerId: string;\n}): Promise<WhatsAppResponse> {\n  if (!WHATSAPP_API_KEY) {\n    console.error('❌ WhatsApp API key not configured');\n    return { success: false, error: 'WhatsApp credentials not configured' };\n  }\n\n  const formattedPhone = formatPhoneNumber(to);\n  const url = `${WHATSAPP_BASE_URL}/send-template/${WHATSAPP_PHONE_NUMBER_ID}`;\n  \n  console.log('\\n📱 Sending WhatsApp Welcome Template');\n  console.log('================================');\n  console.log('API URL:', url);\n  console.log('API Key:', WHATSAPP_API_KEY.substring(0, 8) + '...');\n  console.log('Channel Number:', WHATSAPP_PHONE_NUMBER_ID);\n  console.log('Template Name:', templateName);\n  console.log('To (Original):', to);\n  console.log('To (Formatted):', formattedPhone);\n  console.log('Customer ID:', customerId);\n  console.log('================================\\n');\n\n  try {\n    const startTime = Date.now();\n    \n    const payload = {\n      messaging_product: 'whatsapp',\n      recipient_type: 'individual',\n      to: formattedPhone,\n      type: 'template',\n      template: {\n        name: templateName,\n        language: {\n          code: 'en'\n        },\n        components: [\n          {\n            type: 'body',\n            parameters: [\n              {\n                type: 'text',\n                text: customerId\n              }\n            ]\n          }\n        ]\n      }\n    };\n\n    console.log('Request Payload:', JSON.stringify(payload, null, 2));\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${WHATSAPP_API_KEY}`\n      },\n      body: JSON.stringify(payload)\n    });\n\n    const responseTime = Date.now() - startTime;\n    const data = await response.json();\n\n    console.log(`\\n✅ WhatsApp Welcome Response (${responseTime}ms)`);\n    console.log('Status:', response.status);\n    console.log('Response:', JSON.stringify(data, null, 2));\n    console.log('================================\\n');\n\n    if (data.success) {\n      return { \n        success: true, \n        statusDesc: data.statusDesc,\n        data: data.data \n      };\n    } else {\n      return { \n        success: false, \n        error: data.statusDesc || 'Failed to send WhatsApp template',\n        statusCode: data.statusCode\n      };\n    }\n  } catch (error) {\n    console.error('❌ WhatsApp Template API Error:', error);\n    return { \n      success: false, \n      error: error instanceof Error ? error.message : 'Failed to send WhatsApp template'\n    };\n  }\n}\n\nexport async function sendWhatsAppInvoice({ \n  to, \n  customerName,\n  invoiceNumber,\n  service,\n  totalAmount,\n  pdfUrl\n}: { \n  to: string; \n  customerName: string;\n  invoiceNumber: string;\n  service: string;\n  totalAmount: string;\n  pdfUrl: string;\n}): Promise<WhatsAppResponse> {\n  if (!WHATSAPP_API_KEY) {\n    console.error('❌ WhatsApp API key not configured');\n    return { success: false, error: 'WhatsApp credentials not configured' };\n  }\n\n  if (!pdfUrl || !pdfUrl.startsWith('http')) {\n    console.error('❌ Invalid PDF URL provided:', pdfUrl);\n    return { success: false, error: 'Invalid PDF URL - must be a valid HTTP/HTTPS URL' };\n  }\n\n  const formattedPhone = formatPhoneNumber(to);\n  \n  if (!validatePhoneNumber(formattedPhone)) {\n    console.error('❌ Phone number validation failed');\n    return { \n      success: false, \n      error: `Invalid phone number format: \"${to}\". Expected Indian mobile number (10 digits or with +91/91 prefix)` \n    };\n  }\n\n  const url = `${WHATSAPP_BASE_URL}/send-template/${WHATSAPP_PHONE_NUMBER_ID}`;\n  const templateName = process.env.WHATSAPP_INVOICE_TEMPLATE || 'invoicetest1';\n  \n  console.log('\\n📱 Sending WhatsApp Invoice Template with PDF');\n  console.log('================================');\n  console.log('API URL:', url);\n  console.log('API Key:', WHATSAPP_API_KEY.substring(0, 8) + '...');\n  console.log('Channel Number:', WHATSAPP_PHONE_NUMBER_ID);\n  console.log('Template Name:', templateName);\n  console.log('To (Original):', to);\n  console.log('To (Formatted):', formattedPhone);\n  console.log('Customer Name:', customerName);\n  console.log('Invoice Number:', invoiceNumber);\n  console.log('Service:', service);\n  console.log('Total Amount:', totalAmount);\n  console.log('PDF URL:', pdfUrl);\n  console.log('================================\\n');\n\n  try {\n    const startTime = Date.now();\n    \n    const payload = {\n      messaging_product: 'whatsapp',\n      recipient_type: 'individual',\n      to: formattedPhone,\n      type: 'template',\n      template: {\n        name: templateName,\n        language: {\n          code: 'en'\n        },\n        components: [\n          {\n            type: 'header',\n            parameters: [\n              {\n                type: 'document',\n                document: {\n                  link: pdfUrl,\n                  caption: '',\n                  filename: `Invoice_${invoiceNumber.replace(/\\//g, '_')}.pdf`\n                }\n              }\n            ]\n          }\n        ]\n      }\n    };\n\n    console.log('Request Payload:', JSON.stringify(payload, null, 2));\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${WHATSAPP_API_KEY}`\n      },\n      body: JSON.stringify(payload)\n    });\n\n    const responseTime = Date.now() - startTime;\n    \n    if (!response.ok) {\n      console.warn(`⚠️ WhatsApp API returned HTTP ${response.status}`);\n    }\n    \n    const data = await response.json();\n\n    console.log(`\\n✅ WhatsApp Invoice Response (${responseTime}ms)`);\n    console.log('Status:', response.status);\n    console.log('Response:', JSON.stringify(data, null, 2));\n    console.log('================================\\n');\n\n    if (data.success) {\n      return { \n        success: true, \n        statusDesc: data.statusDesc,\n        data: data.data \n      };\n    } else {\n      console.error('❌ WhatsApp API returned error:', data.statusDesc || data.error || 'Unknown error');\n      console.error('Error details:', JSON.stringify(data, null, 2));\n      return { \n        success: false, \n        error: data.statusDesc || data.error || 'Failed to send WhatsApp invoice template',\n        statusCode: data.statusCode\n      };\n    }\n  } catch (error) {\n    console.error('❌ WhatsApp Invoice API Error:', error);\n    console.error('Error details:', error instanceof Error ? error.stack : error);\n    return { \n      success: false, \n      error: error instanceof Error ? error.message : 'Failed to send WhatsApp invoice template'\n    };\n  }\n}\n","size_bytes":14855},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = await res.text();\n    let json: any;\n    \n    try {\n      json = JSON.parse(text);\n    } catch {\n      throw new Error(text || res.statusText);\n    }\n    \n    if (json.code === 'INACTIVITY_TIMEOUT') {\n      queryClient.clear();\n      window.location.href = '/';\n      throw new Error('Session expired due to inactivity. Please login again.');\n    }\n    \n    throw new Error(json.error || json.message || text || res.statusText);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nqueryClient.setDefaultOptions({\n  queries: {\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  },\n});\n","size_bytes":1780},"client/src/pages/Reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Download, TrendingUp, Package, Users, DollarSign, FileText, Calendar, TrendingDown, AlertCircle } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  exportToExcel, \n  formatSalesDataForExcel, \n  formatInventoryDataForExcel, \n  formatTopProductsForExcel, \n  formatEmployeePerformanceForExcel \n} from \"@/lib/excelExport\";\n\ntype ReportPeriod = \"today\" | \"week\" | \"month\" | \"year\";\n\ninterface SalesReportData {\n  _id: { year: number; month: number; day?: number };\n  totalSales: number;\n  totalOrders: number;\n  avgOrderValue: number;\n}\n\ninterface InventoryReportData {\n  lowStockProducts: any[];\n  outOfStockProducts: any[];\n  totalInventoryValue: {\n    totalValue: number;\n    totalItems: number;\n  };\n}\n\ninterface TopProductData {\n  _id: string;\n  totalQuantity: number;\n  totalRevenue: number;\n  orderCount: number;\n  product: {\n    name: string;\n    category: string;\n  };\n}\n\ninterface EmployeePerformanceData {\n  _id: string;\n  totalSales: number;\n  orderCount: number;\n  avgOrderValue: number;\n  employee: {\n    name: string;\n    role: string;\n  };\n}\n\nexport default function Reports() {\n  const [selectedPeriod, setSelectedPeriod] = useState<ReportPeriod>(\"month\");\n  const [detailsDialog, setDetailsDialog] = useState<{\n    open: boolean;\n    type: string;\n    title: string;\n  }>({ open: false, type: \"\", title: \"\" });\n  const { toast } = useToast();\n\n  const getDateRange = (period: ReportPeriod) => {\n    const end = new Date();\n    const start = new Date();\n\n    switch (period) {\n      case \"today\":\n        start.setHours(0, 0, 0, 0);\n        break;\n      case \"week\":\n        start.setDate(start.getDate() - 7);\n        break;\n      case \"month\":\n        start.setMonth(start.getMonth() - 1);\n        break;\n      case \"year\":\n        start.setFullYear(start.getFullYear() - 1);\n        break;\n    }\n\n    return {\n      startDate: start.toISOString(),\n      endDate: end.toISOString(),\n    };\n  };\n\n  const dateRange = getDateRange(selectedPeriod);\n\n  const { data: salesReport, isLoading: salesLoading } = useQuery<SalesReportData[]>({\n    queryKey: [\"/api/reports/sales\", selectedPeriod],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/reports/sales?startDate=${dateRange.startDate}&endDate=${dateRange.endDate}&period=${selectedPeriod === \"month\" || selectedPeriod === \"year\" ? \"monthly\" : \"daily\"}`\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch sales report\");\n      return response.json();\n    },\n  });\n\n  const { data: inventoryReport, isLoading: inventoryLoading } = useQuery<InventoryReportData>({\n    queryKey: [\"/api/reports/inventory\"],\n  });\n\n  const { data: topProducts, isLoading: topProductsLoading } = useQuery<TopProductData[]>({\n    queryKey: [\"/api/reports/top-products\"],\n  });\n\n  const { data: employeePerformance, isLoading: employeeLoading } = useQuery<EmployeePerformanceData[]>({\n    queryKey: [\"/api/reports/employee-performance\"],\n  });\n\n  const totalSales = salesReport?.reduce((sum, item) => sum + item.totalSales, 0) || 0;\n  const totalOrders = salesReport?.reduce((sum, item) => sum + item.totalOrders, 0) || 0;\n  const avgOrderValue = totalOrders > 0 ? totalSales / totalOrders : 0;\n\n  const reportCards = [\n    {\n      title: \"Sales Report\",\n      description: \"Total sales and order analysis\",\n      icon: DollarSign,\n      value: `₹${totalSales.toLocaleString('en-IN', { maximumFractionDigits: 0 })}`,\n      period: `${totalOrders} Orders`,\n      isLoading: salesLoading,\n      type: \"sales\",\n    },\n    {\n      title: \"Inventory Status\",\n      description: \"Stock levels and inventory value\",\n      icon: Package,\n      value: `₹${(inventoryReport?.totalInventoryValue.totalValue || 0).toLocaleString('en-IN', { maximumFractionDigits: 0 })}`,\n      period: `${inventoryReport?.totalInventoryValue.totalItems || 0} Items`,\n      isLoading: inventoryLoading,\n      type: \"inventory\",\n    },\n    {\n      title: \"Top Products\",\n      description: \"Best selling products and revenue\",\n      icon: TrendingUp,\n      value: `${topProducts?.length || 0}`,\n      period: \"Products Sold\",\n      isLoading: topProductsLoading,\n      type: \"products\",\n    },\n    {\n      title: \"Employee Performance\",\n      description: \"Sales team performance metrics\",\n      icon: Users,\n      value: `${employeePerformance?.length || 0}`,\n      period: \"Active Salespeople\",\n      isLoading: employeeLoading,\n      type: \"employee\",\n    },\n  ];\n\n  const handleExport = (type: string) => {\n    let sheets: any[] = [];\n    let filename = \"\";\n\n    switch (type) {\n      case \"sales\":\n        if (salesReport && salesReport.length > 0) {\n          sheets = [{\n            name: 'Sales Report',\n            data: formatSalesDataForExcel(salesReport)\n          }];\n        }\n        filename = \"sales-report\";\n        break;\n      case \"inventory\":\n        if (inventoryReport) {\n          sheets = formatInventoryDataForExcel(inventoryReport);\n        }\n        filename = \"inventory-report\";\n        break;\n      case \"products\":\n        if (topProducts && topProducts.length > 0) {\n          sheets = [{\n            name: 'Top Products',\n            data: formatTopProductsForExcel(topProducts)\n          }];\n        }\n        filename = \"top-products-report\";\n        break;\n      case \"employee\":\n        if (employeePerformance && employeePerformance.length > 0) {\n          sheets = [{\n            name: 'Employee Performance',\n            data: formatEmployeePerformanceForExcel(employeePerformance)\n          }];\n        }\n        filename = \"employee-performance-report\";\n        break;\n      case \"all\":\n        sheets = [];\n        if (salesReport && salesReport.length > 0) {\n          sheets.push({\n            name: 'Sales Report',\n            data: formatSalesDataForExcel(salesReport)\n          });\n        }\n        if (topProducts && topProducts.length > 0) {\n          sheets.push({\n            name: 'Top Products',\n            data: formatTopProductsForExcel(topProducts)\n          });\n        }\n        if (employeePerformance && employeePerformance.length > 0) {\n          sheets.push({\n            name: 'Employee Performance',\n            data: formatEmployeePerformanceForExcel(employeePerformance)\n          });\n        }\n        if (inventoryReport) {\n          const inventorySheets = formatInventoryDataForExcel(inventoryReport);\n          sheets.push(...inventorySheets);\n        }\n        filename = \"complete-report\";\n        break;\n    }\n\n    if (sheets.length > 0) {\n      exportToExcel(sheets, filename);\n      toast({\n        title: \"Report Exported\",\n        description: `${filename} has been downloaded as Excel file successfully.`,\n      });\n    } else {\n      toast({\n        title: \"No Data\",\n        description: \"No data available to export.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const openDetails = (type: string, title: string) => {\n    setDetailsDialog({ open: true, type, title });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Reports & Analytics</h1>\n          <p className=\"text-muted-foreground mt-1\">Business insights and performance metrics</p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <Select value={selectedPeriod} onValueChange={(v) => setSelectedPeriod(v as ReportPeriod)}>\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-report-period\">\n              <SelectValue placeholder=\"Select period\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"today\">Today</SelectItem>\n              <SelectItem value=\"week\">This Week</SelectItem>\n              <SelectItem value=\"month\">This Month</SelectItem>\n              <SelectItem value=\"year\">This Year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" onClick={() => handleExport(\"all\")} data-testid=\"button-export-report\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export All\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {reportCards.map((report) => (\n          <Card\n            key={report.title}\n            className=\"hover-elevate cursor-pointer\"\n            data-testid={`report-${report.title.toLowerCase().replace(/\\s+/g, \"-\")}`}\n            onClick={() => openDetails(report.type, report.title)}\n          >\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3\">\n                <div className=\"p-3 rounded-lg bg-primary/10\">\n                  <report.icon className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">{report.title}</h3>\n                  <p className=\"text-sm text-muted-foreground font-normal mt-1\">\n                    {report.description}\n                  </p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {report.isLoading ? (\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-10 w-32\" />\n                  <Skeleton className=\"h-4 w-24\" />\n                </div>\n              ) : (\n                <div className=\"flex items-end justify-between\">\n                  <div>\n                    <p className=\"text-3xl font-bold\">{report.value}</p>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{report.period}</p>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      openDetails(report.type, report.title);\n                    }}\n                    data-testid={`button-view-${report.title.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                  >\n                    View Details\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Inventory Alerts */}\n      {inventoryReport && (inventoryReport.lowStockProducts.length > 0 || inventoryReport.outOfStockProducts.length > 0) && (\n        <Card className=\"border-orange-500/50 bg-orange-50 dark:bg-orange-950/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-orange-700 dark:text-orange-400\">\n              <AlertCircle className=\"h-5 w-5\" />\n              Inventory Alerts\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            {inventoryReport.outOfStockProducts.length > 0 && (\n              <div className=\"text-sm\">\n                <span className=\"font-semibold text-red-600 dark:text-red-400\">Out of Stock:</span>{\" \"}\n                {inventoryReport.outOfStockProducts.length} products\n              </div>\n            )}\n            {inventoryReport.lowStockProducts.length > 0 && (\n              <div className=\"text-sm\">\n                <span className=\"font-semibold text-orange-600 dark:text-orange-400\">Low Stock:</span>{\" \"}\n                {inventoryReport.lowStockProducts.length} products\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Additional Reports */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Additional Analysis</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center justify-between p-3 rounded-lg border border-border hover-elevate\">\n            <div className=\"flex items-center gap-3\">\n              <TrendingUp className=\"h-5 w-5 text-primary\" />\n              <div>\n                <span className=\"font-medium\">Average Order Value</span>\n                <p className=\"text-sm text-muted-foreground\">₹{avgOrderValue.toLocaleString('en-IN', { maximumFractionDigits: 0 })}</p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleExport(\"sales\")}\n              data-testid=\"button-generate-profit/loss-summary\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 rounded-lg border border-border hover-elevate\">\n            <div className=\"flex items-center gap-3\">\n              <Package className=\"h-5 w-5 text-primary\" />\n              <div>\n                <span className=\"font-medium\">Stock Status Overview</span>\n                <p className=\"text-sm text-muted-foreground\">\n                  {inventoryReport?.lowStockProducts.length || 0} low stock,{\" \"}\n                  {inventoryReport?.outOfStockProducts.length || 0} out of stock\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleExport(\"inventory\")}\n              data-testid=\"button-generate-stock-aging-report\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 rounded-lg border border-border hover-elevate\">\n            <div className=\"flex items-center gap-3\">\n              <Users className=\"h-5 w-5 text-primary\" />\n              <div>\n                <span className=\"font-medium\">Top Performing Salesperson</span>\n                <p className=\"text-sm text-muted-foreground\">\n                  {employeePerformance?.[0]?.employee?.name || \"N/A\"}\n                  {employeePerformance?.[0]?.totalSales ? ` - ₹${employeePerformance[0].totalSales.toLocaleString('en-IN')}` : \"\"}\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleExport(\"employee\")}\n              data-testid=\"button-generate-employee-performance\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 rounded-lg border border-border hover-elevate\">\n            <div className=\"flex items-center gap-3\">\n              <TrendingUp className=\"h-5 w-5 text-primary\" />\n              <div>\n                <span className=\"font-medium\">Top Selling Product</span>\n                <p className=\"text-sm text-muted-foreground\">\n                  {topProducts?.[0]?.product?.name || \"N/A\"}\n                  {topProducts?.[0]?.totalRevenue ? ` - ₹${topProducts[0].totalRevenue.toLocaleString('en-IN')}` : \"\"}\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleExport(\"products\")}\n              data-testid=\"button-generate-payment-due-summary\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 rounded-lg border border-border hover-elevate\">\n            <div className=\"flex items-center gap-3\">\n              <Calendar className=\"h-5 w-5 text-primary\" />\n              <div>\n                <span className=\"font-medium\">Period Analysis</span>\n                <p className=\"text-sm text-muted-foreground\">\n                  {selectedPeriod === \"today\" ? \"Today\" : selectedPeriod === \"week\" ? \"Last 7 days\" : selectedPeriod === \"month\" ? \"Last 30 days\" : \"Last year\"}\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleExport(\"all\")}\n              data-testid=\"button-generate-service-completion-rate\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export All\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Details Dialog */}\n      <Dialog open={detailsDialog.open} onOpenChange={(open) => setDetailsDialog({ ...detailsDialog, open })}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>{detailsDialog.title} - Detailed View</DialogTitle>\n          </DialogHeader>\n\n          {detailsDialog.type === \"sales\" && salesReport && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-2xl font-bold\">₹{totalSales.toLocaleString('en-IN')}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Sales</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-2xl font-bold\">{totalOrders}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Orders</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-2xl font-bold\">₹{avgOrderValue.toLocaleString('en-IN', { maximumFractionDigits: 0 })}</div>\n                    <div className=\"text-sm text-muted-foreground\">Avg Order Value</div>\n                  </CardContent>\n                </Card>\n              </div>\n              <div className=\"border rounded-lg\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted\">\n                    <tr>\n                      <th className=\"p-3 text-left\">Period</th>\n                      <th className=\"p-3 text-right\">Sales</th>\n                      <th className=\"p-3 text-right\">Orders</th>\n                      <th className=\"p-3 text-right\">Avg Value</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {salesReport.map((item, idx) => (\n                      <tr key={idx} className=\"border-t\">\n                        <td className=\"p-3\">\n                          {item._id.day ? `${item._id.year}-${String(item._id.month).padStart(2, '0')}-${String(item._id.day).padStart(2, '0')}` : `${item._id.year}-${String(item._id.month).padStart(2, '0')}`}\n                        </td>\n                        <td className=\"p-3 text-right\">₹{item.totalSales.toLocaleString('en-IN')}</td>\n                        <td className=\"p-3 text-right\">{item.totalOrders}</td>\n                        <td className=\"p-3 text-right\">₹{item.avgOrderValue.toLocaleString('en-IN', { maximumFractionDigits: 0 })}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {detailsDialog.type === \"inventory\" && inventoryReport && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-2xl font-bold\">₹{inventoryReport.totalInventoryValue.totalValue.toLocaleString('en-IN')}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Value</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-2xl font-bold\">{inventoryReport.lowStockProducts.length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Low Stock</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-2xl font-bold\">{inventoryReport.outOfStockProducts.length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Out of Stock</div>\n                  </CardContent>\n                </Card>\n              </div>\n              {inventoryReport.lowStockProducts.length > 0 && (\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Low Stock Products</h3>\n                  <div className=\"border rounded-lg\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-muted\">\n                        <tr>\n                          <th className=\"p-3 text-left\">Product</th>\n                          <th className=\"p-3 text-right\">Stock</th>\n                          <th className=\"p-3 text-right\">Min Level</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {inventoryReport.lowStockProducts.slice(0, 10).map((product, idx) => (\n                          <tr key={idx} className=\"border-t\">\n                            <td className=\"p-3\">{product.name}</td>\n                            <td className=\"p-3 text-right\">{product.stockQty}</td>\n                            <td className=\"p-3 text-right\">{product.minStockLevel}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {detailsDialog.type === \"products\" && topProducts && (\n            <div className=\"border rounded-lg\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted\">\n                  <tr>\n                    <th className=\"p-3 text-left\">Product</th>\n                    <th className=\"p-3 text-left\">Category</th>\n                    <th className=\"p-3 text-right\">Quantity</th>\n                    <th className=\"p-3 text-right\">Revenue</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {topProducts.map((product, idx) => (\n                    <tr key={idx} className=\"border-t\">\n                      <td className=\"p-3\">{product.product.name}</td>\n                      <td className=\"p-3\">{product.product.category}</td>\n                      <td className=\"p-3 text-right\">{product.totalQuantity}</td>\n                      <td className=\"p-3 text-right\">₹{product.totalRevenue.toLocaleString('en-IN')}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n\n          {detailsDialog.type === \"employee\" && employeePerformance && (\n            <div className=\"border rounded-lg\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted\">\n                  <tr>\n                    <th className=\"p-3 text-left\">Employee</th>\n                    <th className=\"p-3 text-left\">Role</th>\n                    <th className=\"p-3 text-right\">Total Sales</th>\n                    <th className=\"p-3 text-right\">Orders</th>\n                    <th className=\"p-3 text-right\">Avg Value</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {employeePerformance.map((emp, idx) => (\n                    <tr key={idx} className=\"border-t\">\n                      <td className=\"p-3\">{emp.employee.name}</td>\n                      <td className=\"p-3\">{emp.employee.role}</td>\n                      <td className=\"p-3 text-right\">₹{emp.totalSales.toLocaleString('en-IN')}</td>\n                      <td className=\"p-3 text-right\">{emp.orderCount}</td>\n                      <td className=\"p-3 text-right\">₹{emp.avgOrderValue.toLocaleString('en-IN', { maximumFractionDigits: 0 })}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n\n          <div className=\"flex justify-end\">\n            <Button onClick={() => handleExport(detailsDialog.type)} data-testid=\"button-export-detailed-report\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export This Report\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":24713},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"server/scripts/add-admin.ts":{"content":"import mongoose from 'mongoose';\nimport { createUser } from '../auth.js';\n\nasync function addAdmin() {\n  try {\n    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/mauli-car-world';\n    await mongoose.connect(mongoUri);\n    console.log('✅ Connected to MongoDB');\n\n    const email = 'aniket@maulicarworld.com';\n    const password = 'admin123';\n    const name = 'Aniket Rane';\n    const role = 'Admin';\n    const mobileNumber = '7507219775';\n\n    const user = await createUser(email, password, name, role, mobileNumber);\n    console.log('✅ Admin user created successfully:');\n    console.log(`   Name: ${user.name}`);\n    console.log(`   Email: ${user.email}`);\n    console.log(`   Mobile: ${user.mobileNumber}`);\n    console.log(`   Role: ${user.role}`);\n    console.log(`   Password: ${password}`);\n\n    await mongoose.disconnect();\n    console.log('✅ Disconnected from MongoDB');\n  } catch (error: any) {\n    console.error('❌ Error:', error.message);\n    if (error.code === 11000) {\n      console.log('User with this email or mobile number already exists');\n    }\n    process.exit(1);\n  }\n}\n\naddAdmin();\n","size_bytes":1135},"client/src/pages/ServiceVisits.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { ServiceWorkflowCard } from \"@/components/ServiceWorkflowCard\";\nimport { InvoiceGenerationDialog } from \"@/components/InvoiceGenerationDialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Wrench, Edit, X, Receipt } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { formatDistance } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth, hasPermission } from \"@/lib/auth\";\n\nexport default function ServiceVisits() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [isServiceDialogOpen, setIsServiceDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [isInvoiceDialogOpen, setIsInvoiceDialogOpen] = useState(false);\n  const [isImagePreviewOpen, setIsImagePreviewOpen] = useState(false);\n  const [selectedImageUrl, setSelectedImageUrl] = useState<string>(\"\");\n  const [selectedService, setSelectedService] = useState<any>(null);\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"\");\n  const [selectedHandlers, setSelectedHandlers] = useState<string[]>([]);\n  const [beforeImages, setBeforeImages] = useState<string[]>([]);\n  const [afterImages, setAfterImages] = useState<string[]>([]);\n  const [customerVehicles, setCustomerVehicles] = useState<any[]>([]);\n  const [isLoadingVehicles, setIsLoadingVehicles] = useState(false);\n  const [serviceForm, setServiceForm] = useState({\n    customerId: \"\",\n    vehicleReg: \"\",\n    handlerIds: [] as string[],\n    notes: \"\",\n    status: \"inquired\",\n  });\n\n  const canDelete = hasPermission(user, 'orders', 'delete');\n\n  const { data: serviceVisits = [], isLoading, error, refetch } = useQuery<any[]>({\n    queryKey: [\"/api/service-visits\"],\n  });\n\n  const { data: customers = [], isLoading: isLoadingCustomers, error: customersError } = useQuery<any[]>({\n    queryKey: [\"/api/registration/customers\"],\n  });\n\n  const { data: employees = [] } = useQuery<any[]>({\n    queryKey: [\"/api/service-handlers\"],\n  });\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/service-visits', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/service-visits'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n      setIsServiceDialogOpen(false);\n      setServiceForm({ customerId: \"\", vehicleReg: \"\", handlerIds: [] as string[], notes: \"\", status: \"inquired\" });\n      toast({\n        title: \"Success\",\n        description: \"Service visit created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create service visit\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateServiceMutation = useMutation({\n    mutationFn: async ({ id, status, beforeImages, afterImages, handlerIds }: { id: string; status: string; beforeImages?: string[]; afterImages?: string[]; handlerIds?: string[] }) => {\n      console.log('🚀 [FRONTEND] Sending update request:', { id, status, beforeImages: beforeImages?.length, afterImages: afterImages?.length, handlerIds });\n      const response = await apiRequest('PATCH', `/api/service-visits/${id}`, { status, beforeImages, afterImages, handlerIds });\n      const data = await response.json();\n      console.log('✅ [FRONTEND] Update response received:', data);\n      console.log('🔍 [DEBUG] Handler IDs in response:', data.handlerIds);\n      return data;\n    },\n    onSuccess: async (updatedVisit) => {\n      console.log('🎉 [FRONTEND] Update successful:', updatedVisit);\n      console.log('🔍 [DEBUG] Updated visit handlerIds:', updatedVisit.handlerIds);\n      \n      await queryClient.invalidateQueries({ queryKey: ['/api/service-visits'] });\n      await queryClient.refetchQueries({ queryKey: ['/api/service-visits'] });\n      await queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n      \n      setSelectedService(updatedVisit);\n      setSelectedStatus(updatedVisit.status);\n      setSelectedHandlers(updatedVisit.handlerIds?.map((h: any) => h._id || h) || []);\n      setBeforeImages(updatedVisit.beforeImages || []);\n      setAfterImages(updatedVisit.afterImages || []);\n      \n      setIsEditDialogOpen(false);\n      \n      toast({\n        title: \"Success\",\n        description: \"Service status updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('❌ [FRONTEND] Update failed:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update service status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/service-visits/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/service-visits'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n      setIsEditDialogOpen(false);\n      setSelectedService(null);\n      setSelectedStatus(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Service visit deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete service visit\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCustomerChange = async (customerId: string) => {\n    setServiceForm({ ...serviceForm, customerId, vehicleReg: \"\" });\n    setCustomerVehicles([]);\n    \n    if (!customerId) return;\n    \n    setIsLoadingVehicles(true);\n    try {\n      const response = await fetch(`/api/registration/customers/${customerId}/vehicles`);\n      if (response.ok) {\n        const vehicles = await response.json();\n        setCustomerVehicles(vehicles);\n        if (vehicles.length === 1) {\n          setServiceForm(prev => ({ ...prev, vehicleReg: vehicles[0].vehicleNumber || vehicles[0].vehicleId }));\n        }\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to load customer vehicles\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load customer vehicles\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoadingVehicles(false);\n    }\n  };\n\n  const handleCreateService = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!serviceForm.customerId || !serviceForm.vehicleReg) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (serviceForm.status !== 'inquired' && serviceForm.handlerIds.length === 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select at least one service handler\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createServiceMutation.mutate(serviceForm);\n  };\n\n  const handleViewService = (service: any) => {\n    setSelectedService(service);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleEditService = (service: any) => {\n    setSelectedService(service);\n    setSelectedStatus(service.status);\n    setSelectedHandlers(service.handlerIds?.map((h: any) => h._id || h) || []);\n    setBeforeImages(service.beforeImages || []);\n    setAfterImages(service.afterImages || []);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleImageClick = (imageUrl: string) => {\n    setSelectedImageUrl(imageUrl);\n    setIsImagePreviewOpen(true);\n  };\n\n  const handleStatusUpdate = () => {\n    if (!selectedService || !selectedStatus) return;\n    \n    // Validate service handlers - only required for non-inquired statuses\n    if (selectedStatus !== 'inquired' && selectedHandlers.length === 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select at least one service handler for this phase\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Validate mandatory image uploads based on phase\n    if (selectedStatus === 'working' || selectedStatus === 'waiting') {\n      if (beforeImages.length === 0) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Please upload at least one 'Before' image before moving to this phase\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n    \n    if (selectedStatus === 'completed') {\n      if (afterImages.length === 0) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Please upload at least one 'After' image before marking as completed\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n    \n    const originalHandlers = selectedService.handlerIds?.map((h: any) => h._id || h) || [];\n    const handlersChanged = JSON.stringify(selectedHandlers.sort()) !== JSON.stringify(originalHandlers.sort());\n    \n    if (selectedStatus === selectedService.status && \n        JSON.stringify(beforeImages) === JSON.stringify(selectedService.beforeImages || []) &&\n        JSON.stringify(afterImages) === JSON.stringify(selectedService.afterImages || []) &&\n        !handlersChanged) {\n      toast({\n        title: \"No Changes\",\n        description: \"No changes detected\",\n        variant: \"default\",\n      });\n      return;\n    }\n    \n    updateServiceMutation.mutate({\n      id: selectedService._id,\n      status: selectedStatus,\n      beforeImages,\n      afterImages,\n      handlerIds: selectedHandlers,\n    });\n  };\n\n  const compressImage = async (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select a valid image file (PNG, JPEG, GIF, WebP)\",\n          variant: \"destructive\",\n        });\n        reject(new Error('Please select a valid image file'));\n        return;\n      }\n\n      const fileSizeInMB = file.size / (1024 * 1024);\n      \n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const img = new Image();\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          let width = img.width;\n          let height = img.height;\n          \n          const maxDimension = fileSizeInMB > 5 ? 1280 : 1920;\n          if (width > maxDimension || height > maxDimension) {\n            if (width > height) {\n              height = (height * maxDimension) / width;\n              width = maxDimension;\n            } else {\n              width = (width * maxDimension) / height;\n              height = maxDimension;\n            }\n          }\n          \n          canvas.width = width;\n          canvas.height = height;\n          \n          const ctx = canvas.getContext('2d');\n          ctx?.drawImage(img, 0, 0, width, height);\n          \n          let quality = 0.8;\n          if (fileSizeInMB > 10) {\n            quality = 0.5;\n          } else if (fileSizeInMB > 5) {\n            quality = 0.6;\n          } else if (fileSizeInMB > 2) {\n            quality = 0.7;\n          }\n          \n          const compressedDataUrl = canvas.toDataURL('image/jpeg', quality);\n          \n          const compressedSizeInMB = (compressedDataUrl.length * 0.75) / (1024 * 1024);\n          \n          if (compressedSizeInMB > 15) {\n            toast({\n              title: \"Image still too large\",\n              description: \"Image is too large even after maximum compression. Please use a smaller image\",\n              variant: \"destructive\",\n            });\n            reject(new Error('Image too large after compression'));\n            return;\n          }\n          \n          const savedSize = fileSizeInMB - compressedSizeInMB;\n          if (savedSize > 1) {\n            toast({\n              title: \"Image compressed\",\n              description: `Compressed from ${fileSizeInMB.toFixed(1)}MB to ${compressedSizeInMB.toFixed(1)}MB`,\n            });\n          }\n          \n          resolve(compressedDataUrl);\n        };\n        img.onerror = () => {\n          toast({\n            title: \"Failed to load image\",\n            description: \"Unable to process the image file\",\n            variant: \"destructive\",\n          });\n          reject(new Error('Failed to load image'));\n        };\n        img.src = e.target?.result as string;\n      };\n      reader.onerror = () => {\n        toast({\n          title: \"Failed to read file\",\n          description: \"Unable to read the selected file\",\n          variant: \"destructive\",\n        });\n        reject(new Error('Failed to read file'));\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleBeforeImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      try {\n        const compressedImage = await compressImage(file);\n        setBeforeImages([...beforeImages, compressedImage]);\n        toast({\n          title: \"Image added\",\n          description: \"Before image uploaded successfully\",\n        });\n      } catch (error) {\n        console.error('Image upload error:', error);\n      }\n      e.target.value = '';\n    }\n  };\n\n  const handleAfterImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      try {\n        const compressedImage = await compressImage(file);\n        setAfterImages([...afterImages, compressedImage]);\n        toast({\n          title: \"Image added\",\n          description: \"After image uploaded successfully\",\n        });\n      } catch (error) {\n        console.error('Image upload error:', error);\n      }\n      e.target.value = '';\n    }\n  };\n\n  const handleDeleteService = () => {\n    if (selectedService) {\n      deleteServiceMutation.mutate(selectedService._id);\n      setIsDeleteDialogOpen(false);\n    }\n  };\n\n  const servicesByStage = {\n    inquired: serviceVisits.filter((v: any) => v.status === 'inquired'),\n    working: serviceVisits.filter((v: any) => v.status === 'working'),\n    waiting: serviceVisits.filter((v: any) => v.status === 'waiting'),\n    completed: serviceVisits.filter((v: any) => v.status === 'completed'),\n  };\n\n  const stages = [\n    { id: \"inquired\", label: \"Inquired\", phase: \"Phase 1\", count: servicesByStage.inquired.length, color: \"text-blue-700 dark:text-blue-400\" },\n    { id: \"working\", label: \"Working\", phase: \"Phase 2\", count: servicesByStage.working.length, color: \"text-amber-700 dark:text-amber-400\" },\n    { id: \"waiting\", label: \"Waiting\", phase: \"Phase 3\", count: servicesByStage.waiting.length, color: \"text-purple-700 dark:text-purple-400\" },\n    { id: \"completed\", label: \"Completed\", phase: \"Phase 4\", count: servicesByStage.completed.length, color: \"text-green-700 dark:text-green-400\" },\n  ];\n  \n  const totalVisits = serviceVisits.length;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          {[...Array(4)].map((_, i) => (\n            <Skeleton key={i} className=\"h-64\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold\">Service Workflow</h1>\n        <Card className=\"border-destructive\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <Wrench className=\"h-12 w-12 mx-auto text-destructive mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Failed to load service visits</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {(error as Error)?.message || 'An error occurred while fetching service visits'}\n              </p>\n              <Button onClick={() => refetch()}>Retry</Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Service Workflow</h1>\n        <Dialog open={isServiceDialogOpen} onOpenChange={setIsServiceDialogOpen}>\n          <DialogTrigger asChild className=\"hidden\">\n            <Button data-testid=\"button-new-service\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Service\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create New Service Visit</DialogTitle>\n              <DialogDescription>\n                Create a new service visit for a customer vehicle\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreateService} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"customer\">Customer *</Label>\n                <Select \n                  value={serviceForm.customerId} \n                  onValueChange={handleCustomerChange}\n                  required\n                  disabled={isLoadingCustomers}\n                >\n                  <SelectTrigger id=\"customer\" data-testid=\"select-customer\">\n                    <SelectValue placeholder={\n                      isLoadingCustomers \n                        ? \"Loading customers...\" \n                        : customersError \n                        ? \"Error loading customers\" \n                        : customers.length === 0 \n                        ? \"No customers available\" \n                        : \"Select a customer\"\n                    } />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {customers.map((customer: any) => (\n                      <SelectItem key={customer.id} value={customer.id}>\n                        {customer.fullName} ({customer.referenceCode})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {customersError && (\n                  <p className=\"text-sm text-destructive\">Failed to load customers. Please try again.</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"vehicleReg\">Vehicle *</Label>\n                <Select \n                  value={serviceForm.vehicleReg} \n                  onValueChange={(value) => setServiceForm({ ...serviceForm, vehicleReg: value })}\n                  required\n                  disabled={!serviceForm.customerId || isLoadingVehicles}\n                >\n                  <SelectTrigger id=\"vehicleReg\" data-testid=\"select-vehicle\">\n                    <SelectValue placeholder={\n                      !serviceForm.customerId\n                        ? \"Select a customer first\"\n                        : isLoadingVehicles \n                        ? \"Loading vehicles...\" \n                        : customerVehicles.length === 0 \n                        ? \"No vehicles registered for this customer\" \n                        : \"Select a vehicle\"\n                    } />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {customerVehicles.map((vehicle: any) => (\n                      <SelectItem key={vehicle.id} value={vehicle.vehicleNumber || vehicle.vehicleId}>\n                        {vehicle.vehicleNumber || vehicle.vehicleId} - {vehicle.vehicleBrand} {vehicle.vehicleModel} {vehicle.variant ? `(${vehicle.variant})` : ''}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {serviceForm.customerId && customerVehicles.length === 0 && !isLoadingVehicles && (\n                  <p className=\"text-sm text-muted-foreground\">This customer has no registered vehicles.</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Service Handlers * (Select one or more)</Label>\n                <div className=\"border rounded-md p-4 space-y-3 max-h-48 overflow-y-auto\">\n                  {employees.length > 0 ? (\n                    employees.map((employee: any) => (\n                      <div key={employee._id} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`handler-${employee._id}`}\n                          checked={serviceForm.handlerIds.includes(employee._id)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setServiceForm({ \n                                ...serviceForm, \n                                handlerIds: [...serviceForm.handlerIds, employee._id] \n                              });\n                            } else {\n                              setServiceForm({ \n                                ...serviceForm, \n                                handlerIds: serviceForm.handlerIds.filter(id => id !== employee._id) \n                              });\n                            }\n                          }}\n                          data-testid={`checkbox-handler-${employee._id}`}\n                        />\n                        <label\n                          htmlFor={`handler-${employee._id}`}\n                          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                        >\n                          {employee.name} - {employee.role}\n                        </label>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">No service handlers available</p>\n                  )}\n                </div>\n                {serviceForm.handlerIds.length > 0 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    {serviceForm.handlerIds.length} handler{serviceForm.handlerIds.length > 1 ? 's' : ''} selected\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"status\">Service Status *</Label>\n                <Select \n                  value={serviceForm.status} \n                  onValueChange={(value) => setServiceForm({ ...serviceForm, status: value })}\n                  required\n                >\n                  <SelectTrigger id=\"status\" data-testid=\"select-status\">\n                    <SelectValue placeholder=\"Select initial status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem key=\"inquired\" value=\"inquired\">Inquired</SelectItem>\n                    <SelectItem key=\"working\" value=\"working\">Working</SelectItem>\n                    <SelectItem key=\"waiting\" value=\"waiting\">Waiting</SelectItem>\n                    <SelectItem key=\"completed\" value=\"completed\">Completed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={serviceForm.notes}\n                  onChange={(e) => setServiceForm({ ...serviceForm, notes: e.target.value })}\n                  placeholder=\"Add any additional notes\"\n                  rows={3}\n                  data-testid=\"textarea-notes\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsServiceDialogOpen(false)}\n                  data-testid=\"button-cancel-service\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createServiceMutation.isPending}\n                  data-testid=\"button-submit-service\"\n                >\n                  {createServiceMutation.isPending ? 'Creating...' : 'Create Service'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"flex gap-2 flex-wrap\">\n        {stages.map((stage) => (\n          <Badge\n            key={stage.id}\n            variant=\"outline\"\n            className=\"text-sm py-1.5 px-3\"\n            data-testid={`badge-${stage.id}`}\n          >\n            {stage.label} ({stage.count})\n          </Badge>\n        ))}\n      </div>\n\n      <div className=\"space-y-6\">\n        {stages.map((stage) => (\n          <Card key={stage.id} data-testid={`card-stage-${stage.id}`}>\n            <CardHeader className=\"pb-4 border-b\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <div className={`text-sm font-bold uppercase tracking-wide ${stage.color}`}>\n                    {stage.phase}\n                  </div>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Wrench className=\"h-5 w-5\" />\n                    {stage.label}\n                  </CardTitle>\n                </div>\n                <Badge variant=\"secondary\" className=\"text-base px-3 py-1\">\n                  {stage.count}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"pt-4\">\n              {servicesByStage[stage.id as keyof typeof servicesByStage].length > 0 ? (\n                <div className=\"overflow-x-auto pb-2\">\n                  <div className=\"flex gap-4 min-w-max\">\n                    {servicesByStage[stage.id as keyof typeof servicesByStage].map((service: any) => (\n                      <div key={service._id} className=\"w-80 flex-shrink-0\">\n                        <ServiceWorkflowCard\n                          customerName={service.customerId?.fullName || 'Unknown'}\n                          vehicleReg={service.vehicleReg}\n                          status={service.status}\n                          handlers={service.handlerIds?.map((h: any) => h?.name).filter((name: string | undefined) => name) || []}\n                          startTime={formatDistance(new Date(service.createdAt), new Date(), { addSuffix: true })}\n                          totalAmount={service.totalAmount}\n                          partsCount={service.partsUsed?.length || 0}\n                          notes={service.notes}\n                          onView={() => handleViewService(service)}\n                          onEdit={() => handleEditService(service)}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : (\n                <p className=\"text-muted-foreground text-sm text-center py-8\" data-testid={`empty-${stage.id}`}>\n                  No services in {stage.label.toLowerCase()} stage\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      \n      {totalVisits === 0 && (\n        <div className=\"text-center py-12\">\n          <Wrench className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No service visits found. Create your first service visit to get started.</p>\n        </div>\n      )}\n\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Service Details</DialogTitle>\n            <DialogDescription>\n              Complete information about this service visit\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedService && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-3 gap-4 p-4 bg-muted/50 rounded-lg\">\n                <div className=\"space-y-1\">\n                  <Label className=\"text-xs text-muted-foreground\">Customer</Label>\n                  <p className=\"text-sm font-medium\" data-testid=\"view-customer\">\n                    {selectedService.customerId?.fullName || 'Unknown'}\n                  </p>\n                  {selectedService.customerId?.referenceCode && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      {selectedService.customerId.referenceCode}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-1\">\n                  <Label className=\"text-xs text-muted-foreground\">Vehicle Registration</Label>\n                  <p className=\"text-sm font-medium font-mono\" data-testid=\"view-vehicle\">\n                    {selectedService.vehicleReg}\n                  </p>\n                </div>\n\n                <div className=\"space-y-1\">\n                  <Label className=\"text-xs text-muted-foreground\">Status</Label>\n                  <Badge variant=\"outline\" className=\"capitalize\" data-testid=\"view-status\">\n                    {selectedService.status}\n                  </Badge>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Service Handlers</Label>\n                  {selectedService.handlerIds && selectedService.handlerIds.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      {selectedService.handlerIds.map((handler: any) => (\n                        <div key={handler._id} className=\"flex items-center gap-2 p-2 bg-muted/30 rounded\">\n                          <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                            <span className=\"text-xs font-medium text-primary\">\n                              {handler.name?.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                            </span>\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium\">{handler.name}</p>\n                            <p className=\"text-xs text-muted-foreground capitalize\">{handler.role}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground italic\">No handlers assigned</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Service Timeline</Label>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Started:</span>\n                      <span className=\"font-medium\">{formatDistance(new Date(selectedService.createdAt), new Date(), { addSuffix: true })}</span>\n                    </div>\n                    {selectedService.totalAmount !== undefined && selectedService.totalAmount > 0 && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Total Amount:</span>\n                        <span className=\"font-medium\">\n                          {new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR', maximumFractionDigits: 0 }).format(selectedService.totalAmount)}\n                        </span>\n                      </div>\n                    )}\n                    {selectedService.partsUsed && selectedService.partsUsed.length > 0 && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Parts Used:</span>\n                        <span className=\"font-medium\">{selectedService.partsUsed.length}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {selectedService.status === 'completed' && (selectedService.invoiceNumber || selectedService.invoiceDate) && (\n                <div className=\"p-4 bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg\">\n                  <Label className=\"text-sm font-medium text-green-900 dark:text-green-100\">Invoice Details</Label>\n                  <div className=\"grid grid-cols-2 gap-4 mt-2\">\n                    {selectedService.invoiceNumber && (\n                      <div>\n                        <Label className=\"text-xs text-green-700 dark:text-green-300\">Invoice Number</Label>\n                        <p className=\"text-sm font-medium text-green-900 dark:text-green-100\">{selectedService.invoiceNumber}</p>\n                      </div>\n                    )}\n                    {selectedService.invoiceDate && (\n                      <div>\n                        <Label className=\"text-xs text-green-700 dark:text-green-300\">Invoice Date</Label>\n                        <p className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n                          {new Date(selectedService.invoiceDate).toLocaleDateString('en-IN')}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {selectedService.notes && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <p className=\"text-sm text-muted-foreground p-3 bg-muted/30 rounded-lg whitespace-pre-wrap\">\n                    {selectedService.notes}\n                  </p>\n                </div>\n              )}\n\n              {(selectedService.beforeImages?.length > 0 || selectedService.afterImages?.length > 0) && (\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm font-medium\">Before Service Images</Label>\n                    {selectedService.beforeImages && selectedService.beforeImages.length > 0 ? (\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {selectedService.beforeImages.map((img: string, idx: number) => (\n                          <div key={idx} className=\"relative border-2 border-orange-300 dark:border-orange-700 rounded overflow-hidden cursor-pointer hover:opacity-80 transition-opacity\" onClick={() => handleImageClick(img)}>\n                            <img src={img} alt={`Before ${idx + 1}`} className=\"w-full h-32 object-cover\" />\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground italic\">No images uploaded</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm font-medium\">After Service Images</Label>\n                    {selectedService.afterImages && selectedService.afterImages.length > 0 ? (\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {selectedService.afterImages.map((img: string, idx: number) => (\n                          <div key={idx} className=\"relative border-2 border-green-300 dark:border-green-700 rounded overflow-hidden cursor-pointer hover:opacity-80 transition-opacity\" onClick={() => handleImageClick(img)}>\n                            <img src={img} alt={`After ${idx + 1}`} className=\"w-full h-32 object-cover\" />\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground italic\">No images uploaded</p>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex justify-between gap-2 pt-4 border-t\">\n                <div className=\"flex gap-2\">\n                  {selectedService?.status === 'completed' && hasPermission(user, 'invoices', 'create') && (\n                    <Button\n                      variant=\"default\"\n                      onClick={() => {\n                        setIsViewDialogOpen(false);\n                        setIsInvoiceDialogOpen(true);\n                      }}\n                      data-testid=\"button-generate-invoice\"\n                    >\n                      <Receipt className=\"h-4 w-4 mr-2\" />\n                      Generate Invoice\n                    </Button>\n                  )}\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsViewDialogOpen(false)}\n                    data-testid=\"button-close-view\"\n                  >\n                    Close\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      setIsViewDialogOpen(false);\n                      handleEditService(selectedService);\n                    }}\n                    data-testid=\"button-edit-from-view\"\n                  >\n                    <Edit className=\"h-4 w-4 mr-2\" />\n                    Edit Service\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Update Service Status</DialogTitle>\n            <DialogDescription>\n              Update the status of the service visit to move it through the pipeline\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedService && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Customer</Label>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-edit-customer\">\n                    {selectedService.customerId?.fullName || 'Unknown'}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Vehicle Registration</Label>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-edit-vehicle\">\n                    {selectedService.vehicleReg}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Current Status</Label>\n                  <p className=\"text-sm text-muted-foreground capitalize\" data-testid=\"text-edit-current-status\">\n                    {selectedService.status}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newStatus\">New Status *</Label>\n                  <Select \n                    value={selectedStatus}\n                    onValueChange={setSelectedStatus}\n                    disabled={updateServiceMutation.isPending || deleteServiceMutation.isPending}\n                  >\n                    <SelectTrigger id=\"newStatus\" data-testid=\"select-new-status\">\n                      <SelectValue placeholder=\"Select new status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem key=\"inquired\" value=\"inquired\">Inquired</SelectItem>\n                      <SelectItem key=\"working\" value=\"working\">Working</SelectItem>\n                      <SelectItem key=\"waiting\" value=\"waiting\">Waiting</SelectItem>\n                      <SelectItem key=\"completed\" value=\"completed\">Completed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Service Handlers * (Select one or more)</Label>\n                <div className=\"border rounded-md p-4 space-y-3 max-h-48 overflow-y-auto\">\n                  {employees.length > 0 ? (\n                    employees.map((employee: any) => (\n                      <div key={employee._id} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`edit-handler-${employee._id}`}\n                          checked={selectedHandlers.includes(employee._id)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setSelectedHandlers([...selectedHandlers, employee._id]);\n                            } else {\n                              setSelectedHandlers(selectedHandlers.filter(id => id !== employee._id));\n                            }\n                          }}\n                          disabled={updateServiceMutation.isPending || deleteServiceMutation.isPending}\n                          data-testid={`checkbox-edit-handler-${employee._id}`}\n                        />\n                        <label\n                          htmlFor={`edit-handler-${employee._id}`}\n                          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                        >\n                          {employee.name} - {employee.role}\n                        </label>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">No service handlers available</p>\n                  )}\n                </div>\n                {selectedHandlers.length > 0 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedHandlers.length} handler{selectedHandlers.length > 1 ? 's' : ''} selected\n                  </p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label>Before Service Images</Label>\n                  <Input \n                    type=\"file\" \n                    accept=\"image/*\"\n                    onChange={handleBeforeImageUpload}\n                    data-testid=\"input-before-image\"\n                  />\n                  {beforeImages.length > 0 && (\n                    <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                      {beforeImages.map((img, idx) => (\n                        <div key={idx} className=\"relative border-2 border-orange-300 dark:border-orange-700 rounded p-1 cursor-pointer hover:opacity-90 transition-opacity\" onClick={() => handleImageClick(img)}>\n                          <img src={img} alt={`Before ${idx + 1}`} className=\"w-full h-24 object-cover rounded\" />\n                          <button\n                            type=\"button\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setBeforeImages(beforeImages.filter((_, i) => i !== idx));\n                            }}\n                            className=\"absolute top-1 right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600 z-10\"\n                            data-testid={`button-remove-before-${idx}`}\n                          >\n                            ×\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>After Service Images</Label>\n                  <Input \n                    type=\"file\" \n                    accept=\"image/*\"\n                    onChange={handleAfterImageUpload}\n                    data-testid=\"input-after-image\"\n                  />\n                  {afterImages.length > 0 && (\n                    <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                      {afterImages.map((img, idx) => (\n                        <div key={idx} className=\"relative border-2 border-orange-300 dark:border-orange-700 rounded p-1 cursor-pointer hover:opacity-90 transition-opacity\" onClick={() => handleImageClick(img)}>\n                          <img src={img} alt={`After ${idx + 1}`} className=\"w-full h-24 object-cover rounded\" />\n                          <button\n                            type=\"button\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setAfterImages(afterImages.filter((_, i) => i !== idx));\n                            }}\n                            className=\"absolute top-1 right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600 z-10\"\n                            data-testid={`button-remove-after-${idx}`}\n                          >\n                            ×\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className={`flex ${canDelete ? 'justify-between' : 'justify-end'} gap-2 pt-4`}>\n                {canDelete && (\n                  <Button\n                    type=\"button\"\n                    variant=\"destructive\"\n                    onClick={() => setIsDeleteDialogOpen(true)}\n                    disabled={updateServiceMutation.isPending || deleteServiceMutation.isPending}\n                    data-testid=\"button-delete-service\"\n                  >\n                    Delete Service\n                  </Button>\n                )}\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsEditDialogOpen(false)}\n                    disabled={updateServiceMutation.isPending || deleteServiceMutation.isPending}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    onClick={handleStatusUpdate}\n                    disabled={updateServiceMutation.isPending || deleteServiceMutation.isPending || !selectedStatus}\n                    data-testid=\"button-update-status\"\n                  >\n                    {updateServiceMutation.isPending ? 'Updating...' : 'Update'}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Service Visit</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this service visit? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteService}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteServiceMutation.isPending ? 'Deleting...' : 'Delete'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <Dialog open={isImagePreviewOpen} onOpenChange={setIsImagePreviewOpen}>\n        <DialogContent className=\"max-w-4xl p-0 overflow-hidden\">\n          <div className=\"relative\">\n            <button\n              onClick={() => setIsImagePreviewOpen(false)}\n              className=\"absolute top-4 right-4 z-50 bg-black/50 hover:bg-black/70 text-white rounded-full w-8 h-8 flex items-center justify-center transition-colors\"\n              data-testid=\"button-close-image-preview\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n            <img \n              src={selectedImageUrl} \n              alt=\"Full size preview\" \n              className=\"w-full h-auto max-h-[90vh] object-contain\"\n              data-testid=\"image-preview\"\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {selectedService && (\n        <InvoiceGenerationDialog\n          open={isInvoiceDialogOpen}\n          onOpenChange={setIsInvoiceDialogOpen}\n          serviceVisit={selectedService}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":50042},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1084},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/SupportFeedback.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Plus, Search, MessageSquare, Send, Star, Check, ChevronsUpDown, User, Phone, Mail, MapPin, Eye, Edit, Trash2, AlertCircle } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { formatDistance } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function SupportFeedback() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [ticketSearchQuery, setTicketSearchQuery] = useState(\"\");\n  const [customerSearchQuery, setCustomerSearchQuery] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedTicket, setSelectedTicket] = useState<any>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [openCustomerCombobox, setOpenCustomerCombobox] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);\n  const [newTicketForm, setNewTicketForm] = useState({\n    customerId: \"\",\n    subject: \"\",\n    description: \"\",\n    category: \"general\",\n    priority: \"medium\"\n  });\n  const [newNote, setNewNote] = useState(\"\");\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editTicketForm, setEditTicketForm] = useState<any>(null);\n  const [isDeleteAlertOpen, setIsDeleteAlertOpen] = useState(false);\n  const [ticketToDelete, setTicketToDelete] = useState<string | null>(null);\n\n  const { data: tickets = [], isLoading, refetch } = useQuery<any[]>({\n    queryKey: [\"/api/support-tickets\"],\n    queryFn: () => fetch('/api/support-tickets').then(res => res.json()),\n  });\n\n  const { data: ticketSearchResults, isLoading: isSearchingTickets } = useQuery({\n    queryKey: [\"/api/support-tickets/search\", ticketSearchQuery],\n    queryFn: () => fetch(`/api/support-tickets/search?query=${ticketSearchQuery}`).then(res => res.json()),\n    enabled: ticketSearchQuery.length > 2\n  });\n\n  const displayedTickets = ticketSearchQuery.length > 2 && ticketSearchResults?.tickets \n    ? ticketSearchResults.tickets \n    : tickets;\n\n  const isLoadingTickets = ticketSearchQuery.length > 2 ? isSearchingTickets : isLoading;\n\n  const { data: customers = [], isLoading: isLoadingCustomers } = useQuery<any[]>({\n    queryKey: [\"/api/registration/customers\"],\n    queryFn: () => fetch('/api/registration/customers').then(res => res.json()),\n  });\n\n  const filteredCustomers = customerSearchQuery\n    ? customers.filter((c: any) => \n        c.fullName?.toLowerCase().includes(customerSearchQuery.toLowerCase()) ||\n        c.referenceCode?.toLowerCase().includes(customerSearchQuery.toLowerCase()) ||\n        c.email?.toLowerCase().includes(customerSearchQuery.toLowerCase())\n      )\n    : customers;\n\n  const { data: feedbackAnalytics } = useQuery<any>({\n    queryKey: [\"/api/feedbacks/analytics/ratings\"],\n  });\n\n  const ticketsByStatus = {\n    pending: displayedTickets.filter((t: any) => t.status === 'pending'),\n    in_progress: displayedTickets.filter((t: any) => t.status === 'in_progress'),\n    resolved: displayedTickets.filter((t: any) => t.status === 'resolved'),\n    closed: displayedTickets.filter((t: any) => t.status === 'closed'),\n  };\n\n  const statuses = [\n    { id: \"pending\", label: \"Pending\", count: ticketsByStatus.pending.length, color: \"text-yellow-700 dark:text-yellow-400\", bgColor: \"bg-yellow-50 dark:bg-yellow-950/20\", borderColor: \"border-yellow-300 dark:border-yellow-700\" },\n    { id: \"in_progress\", label: \"In Progress\", count: ticketsByStatus.in_progress.length, color: \"text-blue-700 dark:text-blue-400\", bgColor: \"bg-blue-50 dark:bg-blue-950/20\", borderColor: \"border-blue-300 dark:border-blue-700\" },\n    { id: \"resolved\", label: \"Resolved\", count: ticketsByStatus.resolved.length, color: \"text-green-700 dark:text-green-400\", bgColor: \"bg-green-50 dark:bg-green-950/20\", borderColor: \"border-green-300 dark:border-green-700\" },\n    { id: \"closed\", label: \"Closed\", count: ticketsByStatus.closed.length, color: \"text-gray-700 dark:text-gray-400\", bgColor: \"bg-gray-50 dark:bg-gray-950/20\", borderColor: \"border-gray-300 dark:border-gray-700\" },\n  ];\n\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/support-tickets', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/support-tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/support-tickets/search'] });\n      setIsCreateDialogOpen(false);\n      setCustomerSearchQuery(\"\");\n      setSelectedCustomer(null);\n      setNewTicketForm({\n        customerId: \"\",\n        subject: \"\",\n        description: \"\",\n        category: \"general\",\n        priority: \"medium\"\n      });\n      toast({\n        title: \"Success\",\n        description: \"Support ticket created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTicketMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await apiRequest('PATCH', `/api/support-tickets/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/support-tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/support-tickets/search'] });\n      refetch();\n      toast({\n        title: \"Success\",\n        description: \"Ticket updated successfully\",\n      });\n    },\n  });\n\n  const addNoteMutation = useMutation({\n    mutationFn: async ({ id, note }: { id: string; note: string }) => {\n      const response = await apiRequest('POST', `/api/support-tickets/${id}/notes`, { note });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/support-tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/support-tickets/search'] });\n      setSelectedTicket(data);\n      setNewNote(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Note added successfully\",\n      });\n    },\n  });\n\n  const sendWhatsAppMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('POST', `/api/support-tickets/${id}/send-whatsapp`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"WhatsApp follow-up marked as sent (dummy)\",\n      });\n    },\n  });\n\n  const sendFeedbackMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('POST', `/api/support-tickets/${id}/send-feedback`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Feedback form link sent (dummy)\",\n      });\n    },\n  });\n\n  const deleteTicketMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/support-tickets/${id}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/support-tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/support-tickets/search'] });\n      setIsViewDialogOpen(false);\n      setSelectedTicket(null);\n      toast({\n        title: \"Success\",\n        description: \"Support ticket deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const editTicketMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await apiRequest('PATCH', `/api/support-tickets/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/support-tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/support-tickets/search'] });\n      setIsEditDialogOpen(false);\n      setEditTicketForm(null);\n      toast({\n        title: \"Success\",\n        description: \"Ticket updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const styles = {\n      pending: \"bg-yellow-500/10 text-yellow-700 dark:text-yellow-400 border-yellow-500/20\",\n      in_progress: \"bg-blue-500/10 text-blue-700 dark:text-blue-400 border-blue-500/20\",\n      resolved: \"bg-green-500/10 text-green-700 dark:text-green-400 border-green-500/20\",\n      closed: \"bg-gray-500/10 text-gray-700 dark:text-gray-400 border-gray-500/20\"\n    };\n    return <Badge className={styles[status as keyof typeof styles] || \"\"}>{status.replace('_', ' ')}</Badge>;\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const styles = {\n      low: \"bg-gray-500/10 text-gray-700 dark:text-gray-400\",\n      medium: \"bg-blue-500/10 text-blue-700 dark:text-blue-400\",\n      high: \"bg-orange-500/10 text-orange-700 dark:text-orange-400\",\n      urgent: \"bg-red-500/10 text-red-700 dark:text-red-400\"\n    };\n    return <Badge variant=\"outline\" className={styles[priority as keyof typeof styles] || \"\"}>{priority}</Badge>;\n  };\n\n  const handleCustomerSelect = (customer: any) => {\n    setSelectedCustomer(customer);\n    setNewTicketForm({\n      ...newTicketForm,\n      customerId: customer.id || customer._id\n    });\n    setOpenCustomerCombobox(false);\n  };\n\n  const handleEditClick = (ticket: any) => {\n    setEditTicketForm({\n      id: ticket._id,\n      subject: ticket.subject,\n      description: ticket.description,\n      category: ticket.category,\n      priority: ticket.priority,\n      status: ticket.status\n    });\n    setIsViewDialogOpen(false);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteClick = (id: string) => {\n    setTicketToDelete(id);\n    setIsDeleteAlertOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (ticketToDelete) {\n      deleteTicketMutation.mutate(ticketToDelete);\n      setIsDeleteAlertOpen(false);\n      setTicketToDelete(null);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Support & Feedback</h1>\n          <p className=\"text-muted-foreground\">Manage customer support tickets and feedback</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-ticket\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Ticket\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create Support Ticket</DialogTitle>\n              <DialogDescription>Log a new customer support ticket</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Select Customer *</Label>\n                <Popover open={openCustomerCombobox} onOpenChange={setOpenCustomerCombobox}>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      role=\"combobox\"\n                      aria-expanded={openCustomerCombobox}\n                      className=\"w-full justify-between\"\n                      data-testid=\"button-select-customer\"\n                    >\n                      {selectedCustomer ? (\n                        <span className=\"flex items-center gap-2\">\n                          <User className=\"h-4 w-4\" />\n                          {selectedCustomer.fullName} ({selectedCustomer.referenceCode})\n                        </span>\n                      ) : (\n                        <span className=\"text-muted-foreground\">Search and select customer...</span>\n                      )}\n                      <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-[600px] p-0\" align=\"start\">\n                    <Command>\n                      <CommandInput \n                        placeholder=\"Search by name, ID, or email...\" \n                        value={customerSearchQuery}\n                        onValueChange={setCustomerSearchQuery}\n                        data-testid=\"input-customer-search\"\n                      />\n                      <CommandList>\n                        <CommandEmpty>\n                          {isLoadingCustomers ? \"Loading customers...\" : \"No customers found.\"}\n                        </CommandEmpty>\n                        <CommandGroup heading=\"Recent Customers (Latest First)\">\n                          {filteredCustomers.slice(0, 50).map((customer: any) => (\n                            <CommandItem\n                              key={customer.id || customer._id}\n                              value={`${customer.fullName} ${customer.referenceCode} ${customer.mobileNumber} ${customer.email}`}\n                              onSelect={() => handleCustomerSelect(customer)}\n                              data-testid={`customer-option-${customer.referenceCode}`}\n                            >\n                              <Check\n                                className={cn(\n                                  \"mr-2 h-4 w-4\",\n                                  selectedCustomer?.id === customer.id || selectedCustomer?._id === customer._id\n                                    ? \"opacity-100\"\n                                    : \"opacity-0\"\n                                )}\n                              />\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"font-medium\">{customer.fullName}</span>\n                                  <Badge variant=\"outline\" className=\"text-xs\">{customer.referenceCode}</Badge>\n                                  {customer.isVerified && <Badge variant=\"outline\" className=\"text-xs bg-green-500/10 text-green-600\">Verified</Badge>}\n                                </div>\n                                <div className=\"flex items-center gap-4 text-xs text-muted-foreground mt-1\">\n                                  <span className=\"flex items-center gap-1\">\n                                    <Mail className=\"h-3 w-3\" />\n                                    {customer.email}\n                                  </span>\n                                  <span className=\"flex items-center gap-1\">\n                                    <MapPin className=\"h-3 w-3\" />\n                                    {customer.city}\n                                  </span>\n                                </div>\n                              </div>\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {selectedCustomer && (\n                <Card className=\"bg-muted/50\">\n                  <CardContent className=\"pt-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Customer ID</Label>\n                        <p className=\"font-medium\">{selectedCustomer.referenceCode}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Email</Label>\n                        <p className=\"font-medium\">{selectedCustomer.email}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Location</Label>\n                        <p className=\"font-medium\">{selectedCustomer.city}, {selectedCustomer.district}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Address</Label>\n                        <p className=\"font-medium\">{selectedCustomer.address}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label>Subject *</Label>\n                <Input\n                  data-testid=\"input-subject\"\n                  placeholder=\"Brief description of the issue\"\n                  value={newTicketForm.subject}\n                  onChange={(e) => setNewTicketForm({...newTicketForm, subject: e.target.value})}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Description *</Label>\n                <Textarea\n                  data-testid=\"input-description\"\n                  placeholder=\"Detailed description of the issue\"\n                  value={newTicketForm.description}\n                  onChange={(e) => setNewTicketForm({...newTicketForm, description: e.target.value})}\n                  rows={4}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Category</Label>\n                  <Select value={newTicketForm.category} onValueChange={(val) => setNewTicketForm({...newTicketForm, category: val})}>\n                    <SelectTrigger data-testid=\"select-category\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"service_quality\">Service Quality</SelectItem>\n                      <SelectItem value=\"product_issue\">Product Issue</SelectItem>\n                      <SelectItem value=\"billing\">Billing</SelectItem>\n                      <SelectItem value=\"parts_warranty\">Parts/Warranty</SelectItem>\n                      <SelectItem value=\"general\">General</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Priority</Label>\n                  <Select value={newTicketForm.priority} onValueChange={(val) => setNewTicketForm({...newTicketForm, priority: val})}>\n                    <SelectTrigger data-testid=\"select-priority\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Button \n                onClick={() => createTicketMutation.mutate(newTicketForm)}\n                disabled={!newTicketForm.customerId || !newTicketForm.subject || !newTicketForm.description || createTicketMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-submit-ticket\"\n              >\n                {createTicketMutation.isPending ? \"Creating...\" : \"Create Ticket\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs defaultValue=\"tickets\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"tickets\">Support Tickets</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Feedback Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"tickets\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Search className=\"h-5 w-5\" />\n                Quick Search\n              </CardTitle>\n              <CardDescription>Search by Customer ID, Vehicle Number, or Ticket Number</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Input\n                data-testid=\"input-search-tickets\"\n                placeholder=\"Enter Customer ID, Vehicle Number, or Ticket Number...\"\n                value={ticketSearchQuery}\n                onChange={(e) => setTicketSearchQuery(e.target.value)}\n              />\n            </CardContent>\n          </Card>\n\n          <div className=\"flex gap-2 flex-wrap\">\n            {statuses.map((status) => (\n              <Badge\n                key={status.id}\n                variant=\"outline\"\n                className=\"text-sm py-1.5 px-3\"\n                data-testid={`badge-${status.id}`}\n              >\n                {status.label} ({status.count})\n              </Badge>\n            ))}\n          </div>\n\n          {isLoadingTickets ? (\n            <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n              {[...Array(4)].map((_, i) => (\n                <Skeleton key={i} className=\"h-64\" />\n              ))}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto pb-4\">\n              <div className=\"flex gap-6 min-w-max\">\n                {statuses.map((status) => (\n                  <Card key={status.id} className={`w-96 flex-shrink-0 border-2 ${status.borderColor}`} data-testid={`card-status-${status.id}`}>\n                    <CardHeader className={`pb-4 border-b ${status.bgColor}`}>\n                      <CardTitle className=\"text-lg flex items-center justify-between\">\n                        <div className={`flex items-center gap-2 ${status.color}`}>\n                          <MessageSquare className=\"h-5 w-5\" />\n                          {status.label}\n                        </div>\n                        <Badge variant=\"secondary\" className=\"ml-2\">\n                          {status.count}\n                        </Badge>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3 pt-4\">\n                      {ticketsByStatus[status.id as keyof typeof ticketsByStatus].length > 0 ? (\n                        ticketsByStatus[status.id as keyof typeof ticketsByStatus].map((ticket: any) => (\n                          <Card key={ticket._id} className={`border ${status.borderColor} ${status.bgColor} hover:shadow-md transition-shadow`} data-testid={`card-ticket-${ticket.ticketNumber}`}>\n                            <CardContent className=\"p-4 space-y-3\">\n                              <div className=\"space-y-2\">\n                                <div className=\"flex items-center justify-between\">\n                                  <Badge variant=\"outline\" className=\"font-mono text-xs\">{ticket.ticketNumber}</Badge>\n                                  {getPriorityBadge(ticket.priority)}\n                                </div>\n                                <h3 className=\"font-semibold text-sm line-clamp-1\">{ticket.subject}</h3>\n                                <p className=\"text-xs text-muted-foreground line-clamp-2\">{ticket.description}</p>\n                              </div>\n\n                              <div className=\"space-y-1 text-xs text-muted-foreground\">\n                                <div className=\"flex items-center gap-1\">\n                                  <User className=\"h-3 w-3\" />\n                                  <span className=\"truncate\">{ticket.customerId?.fullName || 'Unknown'}</span>\n                                  {ticket.customerId?.referenceCode && (\n                                    <span className=\"text-xs opacity-70\">({ticket.customerId.referenceCode})</span>\n                                  )}\n                                </div>\n                                <div>\n                                  {formatDistance(new Date(ticket.createdAt), new Date(), { addSuffix: true })}\n                                </div>\n                              </div>\n\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"flex-1\"\n                                  onClick={() => { setSelectedTicket(ticket); setIsViewDialogOpen(true); }}\n                                  data-testid={`button-view-${ticket.ticketNumber}`}\n                                >\n                                  <Eye className=\"h-3 w-3 mr-1\" />\n                                  View\n                                </Button>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))\n                      ) : (\n                        <p className=\"text-muted-foreground text-sm text-center py-8\" data-testid={`empty-${status.id}`}>\n                          No tickets in {status.label.toLowerCase()}\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium\">Average Rating</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center gap-2\">\n                  <Star className=\"h-8 w-8 fill-yellow-400 text-yellow-400\" />\n                  <div className=\"text-2xl font-bold\">\n                    {feedbackAnalytics?.overallStats?.averageRating?.toFixed(1) || 'N/A'}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium\">Total Feedbacks</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{feedbackAnalytics?.overallStats?.totalFeedbacks || 0}</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium\">5-Star Ratings</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">{feedbackAnalytics?.overallStats?.rating5 || 0}</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium\">1-Star Ratings</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-red-600\">{feedbackAnalytics?.overallStats?.rating1 || 0}</div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Ticket Details - {selectedTicket?.ticketNumber}</DialogTitle>\n          </DialogHeader>\n          {selectedTicket && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-muted-foreground\">Customer</Label>\n                  <p className=\"font-medium\">{selectedTicket.customerId?.fullName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Status</Label>\n                  <div className=\"mt-1\">\n                    <Select \n                      value={selectedTicket.status} \n                      onValueChange={(val) => updateTicketMutation.mutate({ id: selectedTicket._id, updates: { status: val } })}\n                    >\n                      <SelectTrigger data-testid=\"select-ticket-status\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                        <SelectItem value=\"resolved\">Resolved</SelectItem>\n                        <SelectItem value=\"closed\">Closed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-muted-foreground\">Subject</Label>\n                <p className=\"font-medium\">{selectedTicket.subject}</p>\n              </div>\n\n              <div>\n                <Label className=\"text-muted-foreground\">Description</Label>\n                <p>{selectedTicket.description}</p>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => sendWhatsAppMutation.mutate(selectedTicket._id)}\n                  disabled={sendWhatsAppMutation.isPending}\n                  variant=\"outline\"\n                  data-testid=\"button-send-whatsapp\"\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Send WhatsApp Follow-up (Dummy)\n                </Button>\n                <Button \n                  onClick={() => sendFeedbackMutation.mutate(selectedTicket._id)}\n                  disabled={sendFeedbackMutation.isPending || selectedTicket.status !== 'resolved'}\n                  variant=\"outline\"\n                  data-testid=\"button-send-feedback\"\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Send Feedback Form (Dummy)\n                </Button>\n              </div>\n\n              <div>\n                <Label className=\"mb-2 block\">Notes</Label>\n                <div className=\"space-y-2 mb-4\">\n                  {selectedTicket.notes?.map((note: any, idx: number) => (\n                    <div key={idx} className=\"bg-muted p-3 rounded-md\">\n                      <p className=\"text-sm\">{note.note}</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {note.addedBy?.name || 'Unknown'} - {formatDistance(new Date(note.addedAt), new Date(), { addSuffix: true })}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex gap-2\">\n                  <Textarea\n                    data-testid=\"input-new-note\"\n                    placeholder=\"Add a note...\"\n                    value={newNote}\n                    onChange={(e) => setNewNote(e.target.value)}\n                    rows={2}\n                  />\n                  <Button \n                    onClick={() => addNoteMutation.mutate({ id: selectedTicket._id, note: newNote })}\n                    disabled={!newNote || addNoteMutation.isPending}\n                    data-testid=\"button-add-note\"\n                  >\n                    Add Note\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 pt-4 border-t\">\n                <Button \n                  onClick={() => handleEditClick(selectedTicket)}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  data-testid=\"button-edit-ticket\"\n                >\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit Ticket\n                </Button>\n                <Button \n                  onClick={() => handleDeleteClick(selectedTicket._id)}\n                  disabled={deleteTicketMutation.isPending}\n                  variant=\"destructive\"\n                  data-testid=\"button-delete-ticket\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Ticket</DialogTitle>\n            <DialogDescription>Update the ticket details</DialogDescription>\n          </DialogHeader>\n          {editTicketForm && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Subject *</Label>\n                <Input\n                  data-testid=\"input-edit-subject\"\n                  placeholder=\"Brief description of the issue\"\n                  value={editTicketForm.subject}\n                  onChange={(e) => setEditTicketForm({...editTicketForm, subject: e.target.value})}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Description *</Label>\n                <Textarea\n                  data-testid=\"input-edit-description\"\n                  placeholder=\"Detailed description of the issue\"\n                  value={editTicketForm.description}\n                  onChange={(e) => setEditTicketForm({...editTicketForm, description: e.target.value})}\n                  rows={4}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Category</Label>\n                  <Select value={editTicketForm.category} onValueChange={(val) => setEditTicketForm({...editTicketForm, category: val})}>\n                    <SelectTrigger data-testid=\"select-edit-category\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"service_quality\">Service Quality</SelectItem>\n                      <SelectItem value=\"product_issue\">Product Issue</SelectItem>\n                      <SelectItem value=\"billing\">Billing</SelectItem>\n                      <SelectItem value=\"parts_warranty\">Parts/Warranty</SelectItem>\n                      <SelectItem value=\"general\">General</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Priority</Label>\n                  <Select value={editTicketForm.priority} onValueChange={(val) => setEditTicketForm({...editTicketForm, priority: val})}>\n                    <SelectTrigger data-testid=\"select-edit-priority\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Status</Label>\n                  <Select value={editTicketForm.status} onValueChange={(val) => setEditTicketForm({...editTicketForm, status: val})}>\n                    <SelectTrigger data-testid=\"select-edit-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => {\n                    editTicketMutation.mutate({ \n                      id: editTicketForm.id, \n                      updates: {\n                        subject: editTicketForm.subject,\n                        description: editTicketForm.description,\n                        category: editTicketForm.category,\n                        priority: editTicketForm.priority,\n                        status: editTicketForm.status\n                      }\n                    });\n                  }}\n                  disabled={!editTicketForm.subject || !editTicketForm.description || editTicketMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"button-submit-edit\"\n                >\n                  {editTicketMutation.isPending ? \"Updating...\" : \"Update Ticket\"}\n                </Button>\n                <Button \n                  onClick={() => setIsEditDialogOpen(false)}\n                  variant=\"outline\"\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={isDeleteAlertOpen} onOpenChange={setIsDeleteAlertOpen}>\n        <AlertDialogContent data-testid=\"alert-delete-ticket\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Support Ticket</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this support ticket? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              disabled={deleteTicketMutation.isPending}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteTicketMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":39934},"client/src/pages/Analytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Download, TrendingUp, Package, Users, DollarSign, FileText, \n  AlertCircle, Shield, MessageSquare, ShoppingCart, Gift, MapPin\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer \n} from 'recharts';\nimport {\n  exportToExcel,\n  formatSalesEnhancedForExcel,\n  formatCustomersForExcel,\n  formatInventoryEnhancedForExcel,\n  formatWarrantiesForExcel,\n  formatFeedbackForExcel,\n  formatEmployeePerformanceForExcel\n} from \"@/lib/excelExport\";\n\ntype ReportPeriod = \"today\" | \"week\" | \"month\" | \"year\";\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658', '#ff7c7c'];\n\ninterface DashboardData {\n  totalSales: number;\n  totalInvoices: number;\n  lowStockCount: number;\n  activeWarranties: number;\n  openComplaints: number;\n  newCustomers: number;\n}\n\ninterface SalesEnhancedData {\n  invoices: {\n    totalInvoices: number;\n    totalRevenue: number;\n    totalDiscount: number;\n    avgInvoiceValue: number;\n  };\n  coupons: Array<{\n    _id: string;\n    usageCount: number;\n    totalDiscount: number;\n  }>;\n}\n\ninterface CustomerReportData {\n  total: number;\n  active: number;\n  new: number;\n  repeat: number;\n  referred: number;\n  byReferralSource: Array<{\n    _id: string;\n    count: number;\n  }>;\n}\n\ninterface InventoryEnhancedData {\n  brandWise: Array<{\n    _id: string;\n    totalProducts: number;\n    totalStock: number;\n    totalValue: number;\n    avgPrice: number;\n  }>;\n  colorWise: Array<{\n    _id: string;\n    totalProducts: number;\n    totalStock: number;\n  }>;\n  lowStockProducts: Array<any>;\n  outOfStockProducts: Array<any>;\n  totalInventoryValue: {\n    totalValue: number;\n    totalItems: number;\n    totalProducts: number;\n  };\n}\n\ninterface WarrantyReportData {\n  active: number;\n  expiring: Array<any>;\n  expiringCount: number;\n  expired: number;\n  byProduct: Array<{\n    _id: string;\n    count: number;\n    activeCount: number;\n  }>;\n  recentWarranties: Array<any>;\n}\n\ninterface FeedbackReportData {\n  ratingDistribution: Array<{\n    _id: number;\n    count: number;\n  }>;\n  byType: Array<{\n    _id: string;\n    count: number;\n    avgRating: number;\n  }>;\n  byStatus: Array<{\n    _id: string;\n    count: number;\n  }>;\n  byPriority: Array<{\n    _id: string;\n    count: number;\n  }>;\n  averageRating: number;\n  totalRated: number;\n  totalComplaints: number;\n  openComplaints: number;\n  recentFeedback: Array<any>;\n}\n\ninterface EmployeePerformanceData {\n  _id: string;\n  totalSales: number;\n  orderCount: number;\n  avgOrderValue: number;\n  employee: {\n    name: string;\n    role: string;\n  };\n}\n\nexport default function Analytics() {\n  const [selectedPeriod, setSelectedPeriod] = useState<ReportPeriod>(\"month\");\n  const { toast } = useToast();\n\n  const getDateRange = (period: ReportPeriod) => {\n    const end = new Date();\n    const start = new Date();\n\n    switch (period) {\n      case \"today\":\n        start.setHours(0, 0, 0, 0);\n        break;\n      case \"week\":\n        start.setDate(start.getDate() - 7);\n        break;\n      case \"month\":\n        start.setMonth(start.getMonth() - 1);\n        break;\n      case \"year\":\n        start.setFullYear(start.getFullYear() - 1);\n        break;\n    }\n\n    return {\n      startDate: start.toISOString(),\n      endDate: end.toISOString(),\n    };\n  };\n\n  const dateRange = getDateRange(selectedPeriod);\n\n  const { data: dashboard, isLoading: dashboardLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/reports/dashboard\"],\n  });\n\n  const { data: salesEnhanced, isLoading: salesLoading } = useQuery<SalesEnhancedData>({\n    queryKey: [\"/api/reports/sales-enhanced\", selectedPeriod],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/reports/sales-enhanced?startDate=${dateRange.startDate}&endDate=${dateRange.endDate}`\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch sales report\");\n      return response.json();\n    },\n  });\n\n  const { data: customers, isLoading: customersLoading } = useQuery<CustomerReportData>({\n    queryKey: [\"/api/reports/customers\"],\n  });\n\n  const { data: inventoryEnhanced, isLoading: inventoryLoading } = useQuery<InventoryEnhancedData>({\n    queryKey: [\"/api/reports/inventory-enhanced\"],\n  });\n\n  const { data: warranties, isLoading: warrantiesLoading } = useQuery<WarrantyReportData>({\n    queryKey: [\"/api/reports/warranties\"],\n  });\n\n  const { data: feedback, isLoading: feedbackLoading } = useQuery<FeedbackReportData>({\n    queryKey: [\"/api/reports/feedback\"],\n  });\n\n  const { data: employeePerformance, isLoading: employeeLoading } = useQuery<EmployeePerformanceData[]>({\n    queryKey: [\"/api/reports/employee-performance\"],\n  });\n\n  const handleExport = (type: string) => {\n    let sheets: any[] = [];\n    let filename = \"\";\n\n    switch (type) {\n      case \"sales\":\n        if (salesEnhanced) {\n          sheets = formatSalesEnhancedForExcel(salesEnhanced);\n        }\n        filename = \"sales-report\";\n        break;\n      case \"customers\":\n        if (customers) {\n          sheets = formatCustomersForExcel(customers);\n        }\n        filename = \"customer-report\";\n        break;\n      case \"inventory\":\n        if (inventoryEnhanced) {\n          sheets = formatInventoryEnhancedForExcel(inventoryEnhanced);\n        }\n        filename = \"inventory-report\";\n        break;\n      case \"warranties\":\n        if (warranties) {\n          sheets = formatWarrantiesForExcel(warranties);\n        }\n        filename = \"warranty-report\";\n        break;\n      case \"feedback\":\n        if (feedback) {\n          sheets = formatFeedbackForExcel(feedback);\n        }\n        filename = \"feedback-report\";\n        break;\n      case \"employees\":\n        if (employeePerformance && employeePerformance.length > 0) {\n          sheets = [{\n            name: 'Employee Performance',\n            data: formatEmployeePerformanceForExcel(employeePerformance)\n          }];\n        }\n        filename = \"employee-report\";\n        break;\n      case \"all\":\n        sheets = [];\n        if (salesEnhanced) {\n          sheets.push(...formatSalesEnhancedForExcel(salesEnhanced));\n        }\n        if (customers) {\n          sheets.push(...formatCustomersForExcel(customers));\n        }\n        if (inventoryEnhanced) {\n          sheets.push(...formatInventoryEnhancedForExcel(inventoryEnhanced));\n        }\n        if (warranties) {\n          sheets.push(...formatWarrantiesForExcel(warranties));\n        }\n        if (feedback) {\n          sheets.push(...formatFeedbackForExcel(feedback));\n        }\n        if (employeePerformance && employeePerformance.length > 0) {\n          sheets.push({\n            name: 'Employee Performance',\n            data: formatEmployeePerformanceForExcel(employeePerformance)\n          });\n        }\n        filename = \"complete-analytics-report\";\n        break;\n    }\n\n    if (sheets.length > 0) {\n      exportToExcel(sheets, filename);\n      toast({\n        title: \"Report Exported\",\n        description: `${filename} has been downloaded as Excel file successfully.`,\n      });\n    } else {\n      toast({\n        title: \"No Data\",\n        description: \"No data available to export.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-analytics\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Analytics & Reports</h1>\n          <p className=\"text-muted-foreground mt-1\">Comprehensive business insights and performance metrics</p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <Select value={selectedPeriod} onValueChange={(v) => setSelectedPeriod(v as ReportPeriod)}>\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-report-period\">\n              <SelectValue placeholder=\"Select period\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"today\">Today</SelectItem>\n              <SelectItem value=\"week\">This Week</SelectItem>\n              <SelectItem value=\"month\">This Month</SelectItem>\n              <SelectItem value=\"year\">This Year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" onClick={() => handleExport(\"all\")} data-testid=\"button-export-all\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export All\n          </Button>\n        </div>\n      </div>\n\n      {/* Dashboard Overview Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card data-testid=\"card-total-sales\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Sales (30 days)</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {dashboardLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <div className=\"text-2xl font-bold\">₹{(dashboard?.totalSales || 0).toLocaleString('en-IN')}</div>\n            )}\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {dashboard?.totalInvoices || 0} invoices generated\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-new-customers\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">New Customers</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {dashboardLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <div className=\"text-2xl font-bold\">{dashboard?.newCustomers || 0}</div>\n            )}\n            <p className=\"text-xs text-muted-foreground mt-1\">Last 30 days</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-low-stock\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Low Stock Items</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n          </CardHeader>\n          <CardContent>\n            {dashboardLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <div className=\"text-2xl font-bold text-orange-600\">{dashboard?.lowStockCount || 0}</div>\n            )}\n            <p className=\"text-xs text-muted-foreground mt-1\">Requires attention</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-active-warranties\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Warranties</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {dashboardLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <div className=\"text-2xl font-bold\">{dashboard?.activeWarranties || 0}</div>\n            )}\n            <p className=\"text-xs text-muted-foreground mt-1\">Currently valid</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-open-complaints\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Open Complaints</CardTitle>\n            <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {dashboardLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <div className=\"text-2xl font-bold text-red-600\">{dashboard?.openComplaints || 0}</div>\n            )}\n            <p className=\"text-xs text-muted-foreground mt-1\">Needs resolution</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-invoices\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Invoices</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {dashboardLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <div className=\"text-2xl font-bold\">{dashboard?.totalInvoices || 0}</div>\n            )}\n            <p className=\"text-xs text-muted-foreground mt-1\">Last 30 days</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Reports Tabs */}\n      <Tabs defaultValue=\"sales\" className=\"space-y-4\">\n        <TabsList data-testid=\"tabs-reports\">\n          <TabsTrigger value=\"sales\" data-testid=\"tab-sales\">Sales</TabsTrigger>\n          <TabsTrigger value=\"customers\" data-testid=\"tab-customers\">Customers</TabsTrigger>\n          <TabsTrigger value=\"inventory\" data-testid=\"tab-inventory\">Inventory</TabsTrigger>\n          <TabsTrigger value=\"employees\" data-testid=\"tab-employees\">Employees</TabsTrigger>\n          <TabsTrigger value=\"warranties\" data-testid=\"tab-warranties\">Warranties</TabsTrigger>\n          <TabsTrigger value=\"feedback\" data-testid=\"tab-feedback\">Feedback</TabsTrigger>\n        </TabsList>\n\n        {/* Sales Report */}\n        <TabsContent value=\"sales\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold\">Sales Report</h2>\n            <Button onClick={() => handleExport(\"sales\")} data-testid=\"button-export-sales\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Sales Report\n            </Button>\n          </div>\n\n          {salesLoading ? (\n            <Card>\n              <CardContent className=\"pt-6\">\n                <Skeleton className=\"h-64 w-full\" />\n              </CardContent>\n            </Card>\n          ) : (\n            <>\n              <div className=\"grid gap-4 md:grid-cols-4\">\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      ₹{(salesEnhanced?.invoices?.totalRevenue || 0).toLocaleString('en-IN')}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Total Invoices</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      {salesEnhanced?.invoices?.totalInvoices || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Avg Invoice Value</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      ₹{(salesEnhanced?.invoices?.avgInvoiceValue || 0).toLocaleString('en-IN', { maximumFractionDigits: 0 })}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Total Discounts</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-600\">\n                      ₹{(salesEnhanced?.invoices?.totalDiscount || 0).toLocaleString('en-IN')}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {salesEnhanced?.coupons && salesEnhanced.coupons.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Coupon Usage</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {salesEnhanced.coupons.slice(0, 10).map((coupon: any, idx: number) => (\n                        <div key={idx} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div className=\"flex items-center gap-3\">\n                            <Gift className=\"h-5 w-5 text-primary\" />\n                            <div>\n                              <p className=\"font-medium\">{coupon._id}</p>\n                              <p className=\"text-sm text-muted-foreground\">{coupon.usageCount} uses</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-semibold\">₹{coupon.totalDiscount.toLocaleString('en-IN')}</p>\n                            <p className=\"text-sm text-muted-foreground\">Total discount</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </>\n          )}\n        </TabsContent>\n\n        {/* Customer Report */}\n        <TabsContent value=\"customers\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold\">Customer Report</h2>\n            <Button onClick={() => handleExport(\"customers\")} data-testid=\"button-export-customers\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Customer Report\n            </Button>\n          </div>\n\n          {customersLoading ? (\n            <Skeleton className=\"h-64 w-full\" />\n          ) : (\n            <>\n              <div className=\"grid gap-4 md:grid-cols-5\">\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Total Customers</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{customers?.total || 0}</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">{customers?.active || 0}</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">New (30d)</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-600\">{customers?.new || 0}</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Repeat</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-purple-600\">{customers?.repeat || 0}</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Referred</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-600\">{customers?.referred || 0}</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {customers?.byReferralSource && customers.byReferralSource.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Customer Acquisition Sources</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <PieChart>\n                        <Pie\n                          data={customers.byReferralSource}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={(entry) => `${entry._id}: ${entry.count}`}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"count\"\n                        >\n                          {customers.byReferralSource.map((entry: any, index: number) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                        <Legend />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n            </>\n          )}\n        </TabsContent>\n\n        {/* Inventory Report */}\n        <TabsContent value=\"inventory\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold\">Inventory Report</h2>\n            <Button onClick={() => handleExport(\"inventory\")} data-testid=\"button-export-inventory\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Inventory Report\n            </Button>\n          </div>\n\n          {inventoryLoading ? (\n            <Skeleton className=\"h-64 w-full\" />\n          ) : (\n            <>\n              <div className=\"grid gap-4 md:grid-cols-4\">\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Total Inventory Value</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      ₹{(inventoryEnhanced?.totalInventoryValue?.totalValue || 0).toLocaleString('en-IN')}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      {inventoryEnhanced?.totalInventoryValue?.totalProducts || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Low Stock</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-600\">\n                      {inventoryEnhanced?.lowStockProducts?.length || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Out of Stock</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">\n                      {inventoryEnhanced?.outOfStockProducts?.length || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {inventoryEnhanced?.brandWise && inventoryEnhanced.brandWise.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Inventory by Brand</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <BarChart data={inventoryEnhanced.brandWise.slice(0, 10)}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"_id\" />\n                        <YAxis />\n                        <Tooltip formatter={(value) => `₹${Number(value).toLocaleString('en-IN')}`} />\n                        <Legend />\n                        <Bar dataKey=\"totalValue\" fill=\"#8884d8\" name=\"Total Value\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n\n              {inventoryEnhanced?.colorWise && inventoryEnhanced.colorWise.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Inventory by Color</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <PieChart>\n                        <Pie\n                          data={inventoryEnhanced.colorWise.slice(0, 10)}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={(entry) => `${entry._id || 'N/A'}: ${entry.totalProducts}`}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"totalProducts\"\n                        >\n                          {inventoryEnhanced.colorWise.slice(0, 10).map((entry: any, index: number) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                        <Legend />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n            </>\n          )}\n        </TabsContent>\n\n        {/* Employee Performance */}\n        <TabsContent value=\"employees\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold\">Employee Performance Report</h2>\n            <Button onClick={() => handleExport(\"employees\")} data-testid=\"button-export-employees\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Employee Report\n            </Button>\n          </div>\n\n          {employeeLoading ? (\n            <Skeleton className=\"h-64 w-full\" />\n          ) : (\n            <Card>\n              <CardHeader>\n                <CardTitle>Sales Performance by Employee</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {employeePerformance && employeePerformance.length > 0 ? (\n                  <>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <BarChart data={employeePerformance.slice(0, 10)}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"employee.name\" />\n                        <YAxis />\n                        <Tooltip formatter={(value) => `₹${Number(value).toLocaleString('en-IN')}`} />\n                        <Legend />\n                        <Bar dataKey=\"totalSales\" fill=\"#8884d8\" name=\"Total Sales\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n\n                    <div className=\"mt-6 border rounded-lg\">\n                      <table className=\"w-full\">\n                        <thead className=\"bg-muted\">\n                          <tr>\n                            <th className=\"p-3 text-left\">Employee</th>\n                            <th className=\"p-3 text-left\">Role</th>\n                            <th className=\"p-3 text-right\">Total Sales</th>\n                            <th className=\"p-3 text-right\">Orders</th>\n                            <th className=\"p-3 text-right\">Avg Order Value</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {employeePerformance.map((emp: any, idx: number) => (\n                            <tr key={idx} className=\"border-t\">\n                              <td className=\"p-3\">{emp.employee.name}</td>\n                              <td className=\"p-3\">{emp.employee.role}</td>\n                              <td className=\"p-3 text-right\">₹{emp.totalSales.toLocaleString('en-IN')}</td>\n                              <td className=\"p-3 text-right\">{emp.orderCount}</td>\n                              <td className=\"p-3 text-right\">₹{emp.avgOrderValue.toLocaleString('en-IN', { maximumFractionDigits: 0 })}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </>\n                ) : (\n                  <p className=\"text-center text-muted-foreground py-8\">No employee performance data available</p>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Warranty Report */}\n        <TabsContent value=\"warranties\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold\">Warranty Report</h2>\n            <Button onClick={() => handleExport(\"warranties\")} data-testid=\"button-export-warranties\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Warranty Report\n            </Button>\n          </div>\n\n          {warrantiesLoading ? (\n            <Skeleton className=\"h-64 w-full\" />\n          ) : (\n            <>\n              <div className=\"grid gap-4 md:grid-cols-3\">\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Active Warranties</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">{warranties?.active || 0}</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Expiring Soon (30d)</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-600\">{warranties?.expiringCount || 0}</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Expired</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">{warranties?.expired || 0}</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {warranties?.byProduct && warranties.byProduct.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Warranties by Product</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <BarChart data={warranties.byProduct.slice(0, 10)}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"_id\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        <Bar dataKey=\"count\" fill=\"#8884d8\" name=\"Total Warranties\" />\n                        <Bar dataKey=\"activeCount\" fill=\"#82ca9d\" name=\"Active Warranties\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n\n              {warranties?.expiring && warranties.expiring.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-orange-600\">\n                      <AlertCircle className=\"h-5 w-5\" />\n                      Expiring Warranties (Next 30 Days)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"border rounded-lg\">\n                      <table className=\"w-full\">\n                        <thead className=\"bg-muted\">\n                          <tr>\n                            <th className=\"p-3 text-left\">Product</th>\n                            <th className=\"p-3 text-left\">Customer</th>\n                            <th className=\"p-3 text-right\">Expiry Date</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {warranties.expiring.slice(0, 10).map((warranty: any, idx: number) => (\n                            <tr key={idx} className=\"border-t\">\n                              <td className=\"p-3\">{warranty.productName}</td>\n                              <td className=\"p-3\">{warranty.customerId?.fullName || 'N/A'}</td>\n                              <td className=\"p-3 text-right\">\n                                {new Date(warranty.endDate).toLocaleDateString('en-IN')}\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </>\n          )}\n        </TabsContent>\n\n        {/* Feedback Report */}\n        <TabsContent value=\"feedback\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold\">Feedback & Complaints Report</h2>\n            <Button onClick={() => handleExport(\"feedback\")} data-testid=\"button-export-feedback\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Feedback Report\n            </Button>\n          </div>\n\n          {feedbackLoading ? (\n            <Skeleton className=\"h-64 w-full\" />\n          ) : (\n            <>\n              <div className=\"grid gap-4 md:grid-cols-4\">\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Average Rating</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {feedback?.averageRating ? feedback.averageRating.toFixed(1) : '0.0'} / 5.0\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">{feedback?.totalRated || 0} ratings</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Total Complaints</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">{feedback?.totalComplaints || 0}</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Open Complaints</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-600\">{feedback?.openComplaints || 0}</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm font-medium\">Resolution Rate</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {feedback && feedback.totalComplaints > 0\n                        ? (((feedback.totalComplaints - feedback.openComplaints) / feedback.totalComplaints) * 100).toFixed(0)\n                        : 0}%\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                {feedback?.ratingDistribution && feedback.ratingDistribution.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Rating Distribution</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={250}>\n                        <BarChart data={feedback.ratingDistribution}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"_id\" label={{ value: 'Rating', position: 'insideBottom', offset: -5 }} />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"count\" fill=\"#8884d8\" name=\"Count\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {feedback?.byType && feedback.byType.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Feedback by Type</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={250}>\n                        <PieChart>\n                          <Pie\n                            data={feedback.byType}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            labelLine={false}\n                            label={(entry) => `${entry._id}: ${entry.count}`}\n                            outerRadius={80}\n                            fill=\"#8884d8\"\n                            dataKey=\"count\"\n                          >\n                            {feedback.byType.map((entry: any, index: number) => (\n                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                            ))}\n                          </Pie>\n                          <Tooltip />\n                          <Legend />\n                        </PieChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":39242},"server/models/Employee.ts":{"content":"import mongoose from 'mongoose';\n\nconst employeeSchema = new mongoose.Schema({\n  employeeId: { type: String, unique: true },\n  name: { type: String, required: true },\n  role: { \n    type: String, \n    enum: ['Admin', 'Manager', 'Inventory Manager', 'Sales Executive', 'HR Manager', 'Service Staff'],\n    required: true \n  },\n  contact: { type: String, required: true },\n  email: { type: String },\n  department: { type: String },\n  salary: { type: Number },\n  joiningDate: { type: Date, default: Date.now },\n  isActive: { type: Boolean, default: true },\n  panNumber: { type: String },\n  aadharNumber: { type: String },\n  photo: { type: String },\n  documents: [{ type: String }],\n}, { timestamps: true });\n\nexport const Employee = mongoose.models.Employee || mongoose.model('Employee', employeeSchema);\n","size_bytes":801},"server/scripts/fix-null-assignments.ts":{"content":"import { connectDB } from '../db';\nimport { Task } from '../models/Task';\nimport { Leave } from '../models/Leave';\n\nasync function fixNullAssignments() {\n  try {\n    await connectDB();\n    console.log('🔧 Starting to fix null assignments...\\n');\n\n    // Find tasks with null or missing assignedTo\n    const tasksWithNullAssignedTo = await Task.find({\n      $or: [\n        { assignedTo: null },\n        { assignedTo: { $exists: false } }\n      ]\n    });\n    \n    console.log(`Found ${tasksWithNullAssignedTo.length} tasks with null assignedTo`);\n    \n    if (tasksWithNullAssignedTo.length > 0) {\n      // Delete tasks with null assignedTo since they're invalid\n      const taskIds = tasksWithNullAssignedTo.map(t => t._id);\n      await Task.deleteMany({ _id: { $in: taskIds } });\n      console.log(`✅ Deleted ${tasksWithNullAssignedTo.length} tasks with null assignedTo\\n`);\n    }\n\n    // Find leaves with null or missing employeeId\n    const leavesWithNullEmployee = await Leave.find({\n      $or: [\n        { employeeId: null },\n        { employeeId: { $exists: false } }\n      ]\n    });\n    \n    console.log(`Found ${leavesWithNullEmployee.length} leaves with null employeeId`);\n    \n    if (leavesWithNullEmployee.length > 0) {\n      // Delete leaves with null employeeId since they're invalid\n      const leaveIds = leavesWithNullEmployee.map(l => l._id);\n      await Leave.deleteMany({ _id: { $in: leaveIds } });\n      console.log(`✅ Deleted ${leavesWithNullEmployee.length} leaves with null employeeId\\n`);\n    }\n\n    console.log('✨ Database cleanup completed!');\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Error fixing null assignments:', error);\n    process.exit(1);\n  }\n}\n\nfixNullAssignments();\n","size_bytes":1733},"server/models/Attendance.ts":{"content":"import mongoose from 'mongoose';\n\nconst attendanceSchema = new mongoose.Schema({\n  employeeId: { type: mongoose.Schema.Types.ObjectId, ref: 'Employee', required: true },\n  date: { type: Date, required: true },\n  status: { \n    type: String, \n    enum: ['present', 'absent', 'half_day', 'late'],\n    required: true \n  },\n  checkInTime: { type: Date },\n  checkOutTime: { type: Date },\n  notes: { type: String },\n}, { timestamps: true });\n\nattendanceSchema.index({ employeeId: 1, date: 1 }, { unique: true });\n\nexport const Attendance = mongoose.models.Attendance || mongoose.model('Attendance', attendanceSchema);\n","size_bytes":612},"client/src/components/PaymentRecordingDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { CreditCard, Smartphone, Banknote, Building, Receipt } from \"lucide-react\";\n\nconst paymentFormSchema = z.object({\n  amount: z.number().min(0.01, \"Amount must be greater than 0\"),\n  paymentMode: z.enum(['UPI', 'Cash', 'Card', 'Net Banking', 'Cheque'], {\n    required_error: \"Please select a payment mode\",\n  }),\n  transactionId: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype PaymentFormValues = z.infer<typeof paymentFormSchema>;\n\ninterface PaymentRecordingDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  invoice: any;\n}\n\nconst PAYMENT_MODES = [\n  { value: 'UPI', label: 'UPI', icon: Smartphone, color: 'text-blue-600' },\n  { value: 'Cash', label: 'Cash', icon: Banknote, color: 'text-green-600' },\n  { value: 'Card', label: 'Debit/Credit Card', icon: CreditCard, color: 'text-purple-600' },\n  { value: 'Net Banking', label: 'Net Banking', icon: Building, color: 'text-orange-600' },\n  { value: 'Cheque', label: 'Cheque', icon: Receipt, color: 'text-gray-600' },\n];\n\nexport function PaymentRecordingDialog({ open, onOpenChange, invoice }: PaymentRecordingDialogProps) {\n  const { toast } = useToast();\n  const [showRazorpay, setShowRazorpay] = useState(false);\n\n  const form = useForm<PaymentFormValues>({\n    resolver: zodResolver(paymentFormSchema),\n    defaultValues: {\n      amount: invoice?.dueAmount || 0,\n      paymentMode: 'Cash',\n      transactionId: '',\n      notes: '',\n    },\n  });\n\n  const paymentMode = form.watch('paymentMode');\n\n  const recordPaymentMutation = useMutation({\n    mutationFn: (data: PaymentFormValues) =>\n      apiRequest('POST', `/api/invoices/${invoice._id}/payments`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({ title: \"Payment recorded successfully\" });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.message || \"Failed to record payment\";\n      toast({ \n        title: \"Failed to record payment\", \n        description: errorMessage,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const onSubmit = (data: PaymentFormValues) => {\n    recordPaymentMutation.mutate(data);\n  };\n\n  const handleRazorpayPayment = () => {\n    setShowRazorpay(true);\n    setTimeout(() => {\n      toast({\n        title: \"Razorpay Integration (Demo)\",\n        description: \"This is a dummy Razorpay integration. In production, this would process the payment.\",\n      });\n      setShowRazorpay(false);\n    }, 2000);\n  };\n\n  const selectedMode = PAYMENT_MODES.find(m => m.value === paymentMode);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-record-payment\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-5 w-5\" />\n            Record Payment\n          </DialogTitle>\n          <DialogDescription>\n            Invoice: {invoice?.invoiceNumber} | Customer: {invoice?.customerName}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Amount</p>\n                  <p className=\"text-2xl font-bold\">₹{invoice?.totalAmount.toLocaleString()}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Paid</p>\n                  <p className=\"text-2xl font-bold text-green-600\">₹{invoice?.paidAmount.toLocaleString()}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Due</p>\n                  <p className=\"text-2xl font-bold text-red-600\">₹{invoice?.dueAmount.toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Separator />\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Amount</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                        data-testid=\"input-payment-amount\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Maximum amount: ₹{invoice?.dueAmount.toLocaleString()}\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"paymentMode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Mode</FormLabel>\n                    <Select value={field.value} onValueChange={field.onChange}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payment-mode\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {PAYMENT_MODES.map(mode => (\n                          <SelectItem key={mode.value} value={mode.value}>\n                            <div className=\"flex items-center gap-2\">\n                              <mode.icon className={`h-4 w-4 ${mode.color}`} />\n                              {mode.label}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {selectedMode && selectedMode.value !== 'Cash' && (\n                <FormField\n                  control={form.control}\n                  name=\"transactionId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Transaction ID / Reference Number</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder={\n                            selectedMode.value === 'UPI' ? 'UPI Transaction ID' :\n                            selectedMode.value === 'Card' ? 'Card Transaction ID' :\n                            selectedMode.value === 'Cheque' ? 'Cheque Number' :\n                            'Transaction Reference'\n                          }\n                          data-testid=\"input-transaction-id\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"Additional payment notes...\"\n                        data-testid=\"textarea-payment-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Separator />\n\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Quick Payment Options</p>\n                <div className=\"flex gap-2 flex-wrap\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => form.setValue('amount', invoice?.dueAmount || 0)}\n                    data-testid=\"button-pay-full\"\n                  >\n                    Pay Full Amount (₹{invoice?.dueAmount.toLocaleString()})\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => form.setValue('amount', Math.round((invoice?.dueAmount || 0) / 2))}\n                    data-testid=\"button-pay-half\"\n                  >\n                    Pay Half (₹{Math.round((invoice?.dueAmount || 0) / 2).toLocaleString()})\n                  </Button>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Online Payment (Demo)</p>\n                <Button\n                  type=\"button\"\n                  variant=\"secondary\"\n                  className=\"w-full\"\n                  onClick={handleRazorpayPayment}\n                  disabled={showRazorpay}\n                  data-testid=\"button-razorpay\"\n                >\n                  {showRazorpay ? (\n                    \"Processing with Razorpay...\"\n                  ) : (\n                    <>\n                      <CreditCard className=\"h-4 w-4 mr-2\" />\n                      Pay with Razorpay (Demo)\n                    </>\n                  )}\n                </Button>\n                <p className=\"text-xs text-muted-foreground\">\n                  Note: This is a dummy Razorpay integration for demonstration purposes\n                </p>\n              </div>\n\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => onOpenChange(false)}\n                  data-testid=\"button-cancel-payment\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={recordPaymentMutation.isPending}\n                  data-testid=\"button-submit-payment\"\n                >\n                  {recordPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11545},"client/src/components/ImageCropDialog.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ImageCropDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  imageSrc: string;\n  onCropComplete: (croppedImage: string) => void;\n}\n\ninterface Area {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nconst createImage = (url: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", (error) => reject(error));\n    image.setAttribute(\"crossOrigin\", \"anonymous\");\n    image.src = url;\n  });\n\nasync function getCroppedImg(imageSrc: string, pixelCrop: Area): Promise<string> {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  if (!ctx) {\n    throw new Error(\"No 2d context\");\n  }\n\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  ctx.drawImage(\n    image,\n    pixelCrop.x,\n    pixelCrop.y,\n    pixelCrop.width,\n    pixelCrop.height,\n    0,\n    0,\n    pixelCrop.width,\n    pixelCrop.height\n  );\n\n  return new Promise((resolve) => {\n    canvas.toBlob((blob) => {\n      if (!blob) {\n        console.error(\"Canvas is empty\");\n        return;\n      }\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.onloadend = () => {\n        resolve(reader.result as string);\n      };\n    }, \"image/jpeg\");\n  });\n}\n\nexport function ImageCropDialog({ open, onOpenChange, imageSrc, onCropComplete }: ImageCropDialogProps) {\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<Area | null>(null);\n  const { toast } = useToast();\n\n  const onCropCompleteCallback = useCallback((_croppedArea: Area, croppedAreaPixels: Area) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n\n  const handleCropConfirm = useCallback(async () => {\n    if (!croppedAreaPixels) return;\n\n    try {\n      const croppedImage = await getCroppedImg(imageSrc, croppedAreaPixels);\n      onCropComplete(croppedImage);\n      onOpenChange(false);\n    } catch (e) {\n      console.error(\"Error cropping image:\", e);\n      toast({\n        title: \"Error\",\n        description: \"Failed to crop image. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [croppedAreaPixels, imageSrc, onCropComplete, onOpenChange, toast]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Crop Image</DialogTitle>\n        </DialogHeader>\n        <div className=\"relative w-full h-96 bg-muted rounded-md\">\n          <Cropper\n            image={imageSrc}\n            crop={crop}\n            zoom={zoom}\n            aspect={1}\n            cropShape=\"round\"\n            showGrid={false}\n            onCropChange={setCrop}\n            onCropComplete={onCropCompleteCallback}\n            onZoomChange={setZoom}\n          />\n        </div>\n        <div className=\"space-y-2 mt-4\">\n          <label className=\"text-sm font-medium\">Zoom</label>\n          <Slider\n            value={[zoom]}\n            min={1}\n            max={3}\n            step={0.1}\n            onValueChange={([value]) => setZoom(value)}\n            data-testid=\"slider-zoom\"\n          />\n        </div>\n        <DialogFooter>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n            data-testid=\"button-cancel-crop\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"button\"\n            onClick={handleCropConfirm}\n            data-testid=\"button-confirm-crop\"\n          >\n            Crop & Save\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4268},"server/index.ts":{"content":"import dotenv from \"dotenv\";\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport cors from \"cors\";\nimport MemoryStore from \"memorystore\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { checkInactivityTimeout } from \"./middleware\";\n\nconst app = express();\napp.use(\n  cors({\n    origin: true,\n    credentials: true,\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n    allowedHeaders: [\"Content-Type\", \"Authorization\"],\n  }),\n);\napp.use(express.json({ limit: \"50mb\" }));\napp.use(express.urlencoded({ extended: false, limit: \"50mb\" }));\n\nconst MemoryStoreSession = MemoryStore(session);\napp.use(\n  session({\n    secret:\n      process.env.SESSION_SECRET || \"autoshop-secret-key-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    store: new MemoryStoreSession({\n      checkPeriod: 86400000,\n    }),\n    cookie: {\n      secure: false,\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000,\n      sameSite: \"lax\",\n    },\n  }),\n);\n\napp.use(checkInactivityTimeout);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  server.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    },\n    () => {\n      log(`serving on port ${port}`);\n    },\n  );\n})();\n","size_bytes":2959},"client/src/components/examples/NotificationBell.tsx":{"content":"import { NotificationBell } from \"../NotificationBell\";\n\nexport default function NotificationBellExample() {\n  return (\n    <div className=\"p-6 bg-background flex justify-center\">\n      <NotificationBell />\n    </div>\n  );\n}\n","size_bytes":225},"client/src/components/examples/ServiceWorkflowCard.tsx":{"content":"import { ServiceWorkflowCard } from \"../ServiceWorkflowCard\";\n\nexport default function ServiceWorkflowCardExample() {\n  return (\n    <div className=\"p-6 bg-background max-w-sm\">\n      <ServiceWorkflowCard\n        customerName=\"Rajesh Kumar\"\n        vehicleReg=\"MH-12-AB-1234\"\n        status=\"working\"\n        handler=\"Amit Sharma\"\n        startTime=\"2h ago\"\n        onClick={() => console.log(\"Service card clicked\")}\n      />\n    </div>\n  );\n}\n","size_bytes":445},"design_guidelines.md":{"content":"# Design Guidelines: Car Parts & Service Shop Management System\n\n## Design Approach: Modern Dashboard System\n\n**Selected Approach:** Professional dashboard design system inspired by Linear (clean data display), Stripe Dashboard (information hierarchy), and Notion (organized tables).\n\n**Rationale:** This is a utility-focused, information-dense application where efficiency and data clarity are paramount. The design prioritizes rapid information access, clear status indicators, and streamlined workflows for daily shop operations.\n\n**Core Design Principles:**\n- Information clarity over visual flair\n- Consistent data presentation patterns\n- Clear visual hierarchy for status and actions\n- Efficient space usage for dense information\n- Professional, trust-building aesthetics\n\n## Color Palette\n\n### Dark Mode (Primary)\n- **Background Base:** 220 15% 10% (deep slate)\n- **Surface:** 220 15% 14% (elevated panels)\n- **Surface Elevated:** 220 15% 18% (cards, modals)\n- **Border:** 220 10% 25% (subtle divisions)\n- **Text Primary:** 220 10% 95% (main content)\n- **Text Secondary:** 220 8% 70% (labels, metadata)\n- **Text Muted:** 220 5% 50% (placeholders)\n\n### Light Mode\n- **Background Base:** 220 15% 98%\n- **Surface:** 0 0% 100%\n- **Surface Elevated:** 220 10% 97%\n- **Border:** 220 10% 88%\n- **Text Primary:** 220 15% 15%\n- **Text Secondary:** 220 10% 40%\n- **Text Muted:** 220 5% 55%\n\n### Brand & Accent Colors\n- **Primary Brand:** 210 95% 50% (professional blue - CTAs, links, active states)\n- **Success:** 145 65% 45% (completed services, in stock, positive metrics)\n- **Warning:** 35 90% 55% (low stock alerts, pending items)\n- **Danger:** 0 75% 55% (out of stock, overdue, critical alerts)\n- **Info:** 200 85% 50% (informational badges, secondary actions)\n\n### Status Color System\n- **Inquired:** 200 70% 50% (light blue)\n- **Working:** 35 90% 55% (amber - active work)\n- **Waiting for Parts:** 280 60% 55% (purple - blocked state)\n- **Completed:** 145 65% 45% (green - success)\n\n## Typography\n\n**Font Stack:** \n- Primary: Inter (via Google Fonts CDN) - excellent for data display and UI\n- Monospace: JetBrains Mono (for SKUs, serial numbers, codes)\n\n**Type Scale:**\n- **Display (Dashboard Headers):** text-3xl font-bold (30px)\n- **Page Titles:** text-2xl font-semibold (24px)\n- **Section Headers:** text-xl font-semibold (20px)\n- **Card Titles:** text-lg font-medium (18px)\n- **Body Text:** text-base font-normal (16px)\n- **Secondary Text:** text-sm font-normal (14px)\n- **Captions/Labels:** text-xs font-medium (12px)\n- **Table Headers:** text-sm font-semibold uppercase tracking-wide\n- **Data Values:** text-base font-medium (for numbers, prices, quantities)\n\n## Layout System\n\n**Spacing Primitives:** Consistent use of Tailwind units: 2, 4, 6, 8, 12, 16, 20, 24\n\n**Grid Structure:**\n- Dashboard: 12-column responsive grid\n- Sidebar: Fixed 64 (collapsed) / 256px (expanded)\n- Main content: max-w-7xl with px-6 py-8\n- Cards: p-6 standard, p-4 for compact variants\n- Table cells: px-4 py-3 (comfortable data density)\n\n**Responsive Breakpoints:**\n- Mobile: base (stack all columns)\n- Tablet: md: (2-column layouts where appropriate)\n- Desktop: lg: (full dashboard layouts, 3+ columns)\n\n## Component Library\n\n### Navigation\n- **Sidebar:** Fixed left navigation with icon + label, collapsible\n  - Active state: bg-surface-elevated with left border accent (border-l-4 border-primary)\n  - Hover: bg-surface-elevated/50\n  - Section dividers with text-xs uppercase labels\n  - Role-based menu items with subtle badges for restricted access\n\n### Data Display\n- **Tables:** \n  - Zebra striping (even rows: bg-surface)\n  - Hover: bg-surface-elevated\n  - Sticky headers with shadow on scroll\n  - Action column (right-aligned) with icon buttons\n  - Status badges in their own column\n  - Pagination at bottom-right\n  \n- **Cards:**\n  - Standard: bg-surface rounded-lg border border-border shadow-sm\n  - Interactive: hover:shadow-md transition-shadow\n  - Header with title + action button\n  - Content with p-6, footer with border-t\n\n- **Status Badges:**\n  - Pill shape: px-3 py-1 rounded-full text-xs font-medium\n  - Color-coded backgrounds with 10% opacity + solid text\n  - Icons for critical statuses (AlertCircle, CheckCircle)\n\n### Forms\n- **Input Fields:**\n  - bg-surface border border-border rounded-md px-4 py-2.5\n  - Focus: ring-2 ring-primary ring-offset-2 ring-offset-background\n  - Labels: text-sm font-medium mb-2\n  - Helper text: text-xs text-secondary mt-1\n  - Error state: border-danger with text-danger message\n\n- **Buttons:**\n  - Primary: bg-primary text-white hover:bg-primary/90 px-4 py-2.5 rounded-md font-medium\n  - Secondary: bg-surface border border-border hover:bg-surface-elevated\n  - Danger: bg-danger text-white\n  - Ghost: hover:bg-surface-elevated (for table actions)\n  - Icon buttons: p-2 rounded-md (32x32 touch target)\n\n### Dashboard Specific\n- **KPI Cards:**\n  - Large number: text-3xl font-bold\n  - Label: text-sm text-secondary\n  - Trend indicator: small arrow + percentage in success/danger color\n  - Icon in top-right (ghost style, large)\n\n- **Service Workflow Stages:**\n  - Horizontal stepper/pipeline view\n  - Active stage: bold with primary color highlight\n  - Completed: checkmark with success color\n  - Future stages: muted with dashed connectors\n  - Card-based current items under each stage (Kanban style)\n\n- **Digital Customer Card:**\n  - Two-column layout: Customer info (left) + Service history (right)\n  - Timeline view for service history with timestamps\n  - \"Serviced by\" with avatar + name\n  - QR code placeholder (centered, bg-white p-4 rounded)\n\n### Alerts & Notifications\n- **Notification Center:**\n  - Dropdown panel from header bell icon\n  - List of notifications with icon, message, timestamp\n  - Unread: bg-primary/5 with dot indicator\n  - \"Mark all read\" action at bottom\n\n- **Alert Banners:**\n  - Info: bg-info/10 border-l-4 border-info px-4 py-3\n  - Warning: bg-warning/10 border-l-4 border-warning\n  - Success: bg-success/10 border-l-4 border-success\n  - Dismissible with X button\n\n### Data Visualization\n- **Simple Charts:** Use Chart.js or Recharts\n  - Bar charts: primary color fills\n  - Line charts: stroke with gradient fill (10% opacity)\n  - Pie/Donut: status color palette\n  - Grid lines: border-border color, subtle\n\n## Images\n\nThis dashboard application requires minimal imagery:\n\n- **No hero images** - this is a utility application\n- **Employee avatars:** 40px circular thumbnails (use placeholder initials with bg-primary/20)\n- **Product images:** 64x64 thumbnails in product lists, 400x400 in product details\n- **Customer vehicle images (optional):** 200x150 aspect ratio in customer cards\n- **Empty state illustrations:** Simple line-art SVG illustrations for empty tables/lists (use subtle colors)\n- **Logo:** Top-left of sidebar, 40px height, with optional wordmark\n\n## Animations\n\n**Minimal and purposeful only:**\n- Page transitions: None (instant navigation for speed)\n- Dropdown menus: duration-150 ease-out\n- Modal overlays: fade-in duration-200\n- Loading states: Subtle spinner or skeleton screens\n- Toast notifications: slide-in-right duration-300\n\n**No decorative animations** - focus on instant responsiveness\n\n## Special Considerations\n\n**Role-Based Visual Cues:**\n- Restricted features: opacity-50 with lock icon\n- Admin-only sections: subtle red badge indicator\n- Current user role: displayed in sidebar header with badge\n\n**Print Optimization:**\n- Invoices and Digital Cards: @media print styles\n- Remove sidebar/navigation in print view\n- Black text on white background\n- Page break controls for multi-page documents\n\n**Data Density Controls:**\n- Compact view toggle for tables (reduces padding)\n- Expandable rows for detailed information\n- Collapsible sidebar for more content space","size_bytes":7764},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border-2 border-orange-300 dark:border-orange-700 bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1928},"server/models/Order.ts":{"content":"import mongoose from 'mongoose';\n\nconst orderItemSchema = new mongoose.Schema({\n  productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },\n  quantity: { type: Number, required: true },\n  price: { type: Number, required: true },\n}, { _id: false });\n\nconst orderSchema = new mongoose.Schema({\n  customerId: { type: mongoose.Schema.Types.ObjectId, ref: 'RegistrationCustomer' },\n  customerName: { type: String },\n  items: [orderItemSchema],\n  total: { type: Number, required: true },\n  discount: { type: Number, default: 0 },\n  paymentStatus: { \n    type: String, \n    enum: ['paid', 'partial', 'due'],\n    default: 'due'\n  },\n  paidAmount: { type: Number, default: 0 },\n  salespersonId: { type: mongoose.Schema.Types.ObjectId, ref: 'Employee' },\n  invoiceNumber: { type: String, unique: true },\n  deliveryStatus: { \n    type: String, \n    enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],\n    default: 'pending'\n  },\n  shippingAddress: { type: String },\n  trackingNumber: { type: String },\n  deliveryDate: { type: Date },\n}, { timestamps: true });\n\norderSchema.pre('save', function(next) {\n  if (!this.invoiceNumber) {\n    this.invoiceNumber = `ORD-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n  }\n  next();\n});\n\nexport const Order = mongoose.models.Order || mongoose.model('Order', orderSchema);\n","size_bytes":1350},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/app-sidebar.tsx":{"content":"import {\n  LayoutDashboard,\n  Package,\n  Warehouse,\n  Users,\n  UserCircle,\n  ClipboardList,\n  ShoppingCart,\n  BarChart3,\n  Settings,\n  Calendar,\n  LockKeyhole,\n  User,\n  LogOut,\n  Shield,\n  Building2,\n  FileText,\n  CheckSquare,\n  CalendarOff,\n  MessageSquare,\n  UserPlus,\n  ListChecks,\n  Receipt,\n  TrendingUp,\n  Headset,\n} from \"lucide-react\";\nimport logoImage from \"@assets/image_1760164042662.png\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Link, useLocation } from \"wouter\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface MenuItem {\n  title: string;\n  url: string;\n  icon: React.ComponentType<{ className?: string }>;\n  permission?: { resource: string; action: string };\n  disabled?: boolean;\n  group?: string;\n}\n\nconst mainMenuItems: MenuItem[] = [\n  { title: \"Dashboard\", url: \"/\", icon: LayoutDashboard, group: \"dashboard\" },\n  { title: \"Register Customer\", url: \"/register-customer\", icon: UserPlus, permission: { resource: \"customers\", action: \"create\" }, group: \"customer\" },\n  { title: \"Registration Dashboard\", url: \"/registration-dashboard\", icon: ListChecks, permission: { resource: \"customers\", action: \"create\" }, group: \"customer\" },\n  { title: \"Service Visits\", url: \"/visits\", icon: ClipboardList, permission: { resource: \"orders\", action: \"read\" }, group: \"service\" },\n  { title: \"Support & Feedback\", url: \"/support\", icon: Headset, permission: { resource: \"supportTickets\", action: \"read\" }, group: \"support\" },\n  { title: \"Invoices\", url: \"/invoices\", icon: Receipt, permission: { resource: \"invoices\", action: \"read\" }, group: \"invoice\" },\n  { title: \"Products\", url: \"/products\", icon: Package, permission: { resource: \"products\", action: \"read\" }, group: \"inventory\" },\n  { title: \"Inventory\", url: \"/inventory\", icon: Warehouse, permission: { resource: \"inventory\", action: \"read\" }, group: \"inventory\" },\n  { title: \"Orders\", url: \"/orders\", icon: ShoppingCart, permission: { resource: \"orders\", action: \"read\" }, group: \"inventory\" },\n];\n\nconst managementItems: MenuItem[] = [\n  { title: \"Employees\", url: \"/employees\", icon: UserCircle, permission: { resource: \"employees\", action: \"read\" }, group: \"hr\" },\n  { title: \"Attendance\", url: \"/attendance\", icon: Calendar, permission: { resource: \"attendance\", action: \"read\" }, group: \"attendance\" },\n  { title: \"Tasks\", url: \"/tasks\", icon: CheckSquare, permission: { resource: \"tasks\", action: \"read\" }, group: \"tasks\" },\n  { title: \"Leaves\", url: \"/leaves\", icon: CalendarOff, permission: { resource: \"leaves\", action: \"read\" }, group: \"attendance\" },\n  { title: \"Reports\", url: \"/reports\", icon: BarChart3, permission: { resource: \"reports\", action: \"read\" }, group: \"reports\" },\n  { title: \"Analytics\", url: \"/analytics\", icon: TrendingUp, permission: { resource: \"reports\", action: \"read\" }, group: \"reports\" },\n  { title: \"User Management\", url: \"/users\", icon: Shield, permission: { resource: \"users\", action: \"read\" }, group: \"admin\" },\n];\n\nconst systemItems: MenuItem[] = [\n  { title: \"Profile\", url: \"/profile\", icon: User },\n  { title: \"Settings\", url: \"/settings\", icon: Settings },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  // Helper function to check if user has permission\n  const hasPermission = (item: MenuItem) => {\n    if (!item.permission) return true; // No permission required\n    const { resource, action } = item.permission;\n    return user?.permissions?.[resource]?.includes(action) || false;\n  };\n\n  // Helper function to get group background color\n  const getGroupBgColor = (group?: string) => {\n    const groupColors: Record<string, string> = {\n      dashboard: \"bg-blue-50 dark:bg-blue-900/50 data-[active=true]:bg-blue-100 dark:data-[active=true]:bg-blue-800/70\",\n      customer: \"bg-green-50 dark:bg-green-900/50 data-[active=true]:bg-green-100 dark:data-[active=true]:bg-green-800/70\",\n      service: \"bg-purple-50 dark:bg-purple-900/50 data-[active=true]:bg-purple-100 dark:data-[active=true]:bg-purple-800/70\",\n      invoice: \"bg-orange-50 dark:bg-orange-900/50 data-[active=true]:bg-orange-100 dark:data-[active=true]:bg-orange-800/70\",\n      inventory: \"bg-cyan-50 dark:bg-cyan-900/50 data-[active=true]:bg-cyan-100 dark:data-[active=true]:bg-cyan-800/70\",\n      hr: \"bg-indigo-50 dark:bg-indigo-900/50 data-[active=true]:bg-indigo-100 dark:data-[active=true]:bg-indigo-800/70\",\n      attendance: \"bg-yellow-50 dark:bg-yellow-900/50 data-[active=true]:bg-yellow-100 dark:data-[active=true]:bg-yellow-800/70\",\n      tasks: \"bg-pink-50 dark:bg-pink-900/50 data-[active=true]:bg-pink-100 dark:data-[active=true]:bg-pink-800/70\",\n      communication: \"bg-teal-50 dark:bg-teal-900/50 data-[active=true]:bg-teal-100 dark:data-[active=true]:bg-teal-800/70\",\n      reports: \"bg-amber-50 dark:bg-amber-900/50 data-[active=true]:bg-amber-100 dark:data-[active=true]:bg-amber-800/70\",\n      admin: \"bg-red-50 dark:bg-red-900/50 data-[active=true]:bg-red-100 dark:data-[active=true]:bg-red-800/70\",\n      support: \"bg-rose-50 dark:bg-rose-900/50 data-[active=true]:bg-rose-100 dark:data-[active=true]:bg-rose-800/70\",\n    };\n    return group ? groupColors[group] || \"\" : \"\";\n  };\n\n  // Filter menu items based on permissions\n  const visibleMainMenuItems = mainMenuItems.filter(hasPermission);\n  const visibleManagementItems = managementItems.filter(hasPermission);\n  const visibleSystemItems = systemItems.filter(hasPermission);\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <Sidebar data-testid=\"app-sidebar\">\n      <SidebarHeader className=\"p-4 border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-3\">\n          <img src={logoImage} alt=\"Mauli Car World Logo\" className=\"h-10 w-auto\" />\n          <div>\n            <h2 className=\"text-lg font-semibold\">Mauli Car World</h2>\n            <p className=\"text-xs text-muted-foreground\">Manager v1.0</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        {visibleMainMenuItems.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Main Menu</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {visibleMainMenuItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton\n                      asChild\n                      isActive={location === item.url}\n                      data-testid={`link-${item.title.toLowerCase().replace(\" \", \"-\")}`}\n                      className={getGroupBgColor(item.group)}\n                    >\n                      <Link href={item.url}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        {visibleManagementItems.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Management</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {visibleManagementItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton\n                      asChild={!item.disabled}\n                      isActive={location === item.url}\n                      disabled={item.disabled}\n                      data-testid={`link-${item.title.toLowerCase().replace(\" \", \"-\")}`}\n                      className={getGroupBgColor(item.group)}\n                    >\n                      {item.disabled ? (\n                        <div className=\"flex items-center gap-2 opacity-50\">\n                          <item.icon className=\"h-4 w-4\" />\n                          <span>{item.title}</span>\n                          <Badge variant=\"secondary\" className=\"ml-auto text-xs\">\n                            Soon\n                          </Badge>\n                        </div>\n                      ) : (\n                        <Link href={item.url}>\n                          <item.icon className=\"h-4 w-4\" />\n                          <span>{item.title}</span>\n                        </Link>\n                      )}\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        {visibleSystemItems.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>System</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {visibleSystemItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton\n                      asChild\n                      isActive={location === item.url}\n                      data-testid={`link-${item.title.toLowerCase()}`}\n                    >\n                      <Link href={item.url}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4 border-t border-sidebar-border\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"w-full justify-start p-2 h-auto\" data-testid=\"button-user-menu\">\n              <div className=\"flex items-center gap-3 w-full\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                    {user?.name ? getInitials(user.name) : 'U'}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1 min-w-0 text-left\">\n                  <p className=\"text-sm font-medium truncate\">{user?.name || 'User'}</p>\n                  <p className=\"text-xs text-muted-foreground truncate\">{user?.role || 'Role'}</p>\n                </div>\n                <LockKeyhole className=\"h-4 w-4 text-muted-foreground\" />\n              </div>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <DropdownMenuItem asChild>\n              <Link href=\"/profile\" className=\"cursor-pointer\">\n                <User className=\"h-4 w-4 mr-2\" />\n                Profile\n              </Link>\n            </DropdownMenuItem>\n            <DropdownMenuItem asChild>\n              <Link href=\"/settings\" className=\"cursor-pointer\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Settings\n              </Link>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onClick={logout} className=\"cursor-pointer text-destructive\" data-testid=\"button-logout\">\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":11866},"shared/vehicleData.ts":{"content":"export interface VehiclePart {\n  id: string;\n  name: string;\n  category: string;\n  price?: number;\n}\n\nexport interface VehicleModel {\n  name: string;\n  parts: VehiclePart[];\n}\n\nexport interface VehicleBrand {\n  name: string;\n  models: VehicleModel[];\n}\n\nconst MAHINDRA_SCORPIO_CLASSIC_PARTS: VehiclePart[] = [\n  { id: \"finger-guard\", name: \"Finger Guard (Put & Chrome)\", category: \"Body Parts\", price: 850 },\n  { id: \"side-step\", name: \"Side Step\", category: \"Exterior\", price: 3200 },\n  { id: \"tail-light-show\", name: \"Tail Light Show\", category: \"Lights\", price: 1500 },\n  { id: \"pillar-light\", name: \"Pillar Light\", category: \"Lights\", price: 700 },\n  { id: \"antenna\", name: \"Antenna\", category: \"Exterior\", price: 450 },\n  { id: \"spoiler\", name: \"Spoiler\", category: \"Exterior\", price: 2200 },\n  { id: \"rear-bumper-guard\", name: \"Rear Bumper Guard\", category: \"Exterior\", price: 1800 },\n  { id: \"rear-reflector\", name: \"Rear Reflector\", category: \"Lights\", price: 600 },\n  { id: \"side-cladding\", name: \"Side Cladding\", category: \"Exterior\", price: 3000 },\n  { id: \"handle-cover\", name: \"Handle Cover\", category: \"Body Parts\", price: 650 },\n  { id: \"roof-rail\", name: \"Roof Rail\", category: \"Exterior\", price: 2000 },\n  { id: \"head-light\", name: \"Head Light\", category: \"Lights\", price: 4500 },\n  { id: \"front-abs-guard\", name: \"Front ABS Guard\", category: \"Body Parts\", price: 1200 },\n  { id: \"lower-garnish\", name: \"Lower Garnish (ABS & SS)\", category: \"Body Parts\", price: 900 },\n  { id: \"mirror-cover\", name: \"Mirror Cover\", category: \"Body Parts\", price: 500 },\n  { id: \"front-wiper\", name: \"Front Wiper\", category: \"Maintenance\", price: 450 },\n  { id: \"fog-light\", name: \"Fog Light\", category: \"Lights\", price: 1800 },\n  { id: \"front-grill\", name: \"Front Grill\", category: \"Body Parts\", price: 2200 },\n  { id: \"mac-wheel\", name: \"Mac Wheel\", category: \"Exterior\", price: 4000 },\n  { id: \"drl-light\", name: \"DRL Light\", category: \"Lights\", price: 1400 },\n  { id: \"bumper-guard\", name: \"Bumper Guard\", category: \"Exterior\", price: 1800 },\n  { id: \"door-pad\", name: \"Door Pad\", category: \"Interior\", price: 1000 },\n  { id: \"7d-matting\", name: \"7D Matting\", category: \"Interior\", price: 2000 },\n  { id: \"seat-cover\", name: \"Seat Cover\", category: \"Interior\", price: 4500 },\n  { id: \"sunglass-holder\", name: \"Sunglass Holder\", category: \"Interior\", price: 350 },\n  { id: \"steering-wheel\", name: \"Steering Wheel\", category: \"Interior\", price: 2500 },\n  { id: \"armrest\", name: \"Armrest\", category: \"Interior\", price: 1200 },\n  { id: \"accent-chrome\", name: \"Accent Chrome\", category: \"Exterior\", price: 900 },\n];\n\nconst HYUNDAI_CRETA_2025_PARTS: VehiclePart[] = [\n  { id: \"mirror-cover\", name: \"Mirror Cover\", category: \"Body Parts\", price: 550 },\n  { id: \"head-light-show\", name: \"Head Light Show\", category: \"Lights\", price: 4200 },\n  { id: \"finger-guard\", name: \"Finger Guard (Put & Chrome)\", category: \"Body Parts\", price: 800 },\n  { id: \"door-visor\", name: \"Door Visor\", category: \"Exterior\", price: 1000 },\n  { id: \"scuff-plate\", name: \"Scuff Plate\", category: \"Body Parts\", price: 750 },\n  { id: \"side-beading\", name: \"Side Beading\", category: \"Body Parts\", price: 1200 },\n  { id: \"tail-light-show\", name: \"Tail Light Show\", category: \"Lights\", price: 1500 },\n  { id: \"shark-fin-antenna\", name: \"Shark Fin Antenna\", category: \"Exterior\", price: 700 },\n  { id: \"rear-bumper-guard\", name: \"Rear Bumper Guard\", category: \"Exterior\", price: 1900 },\n  { id: \"rear-eye-cat\", name: \"Rear Eye Cat\", category: \"Exterior\", price: 450 },\n  { id: \"mud-flap\", name: \"Mud Flap\", category: \"Exterior\", price: 400 },\n  { id: \"handle-cover\", name: \"Handle Cover\", category: \"Body Parts\", price: 650 },\n  { id: \"window-frame-kit\", name: \"Window Frame Kit\", category: \"Body Parts\", price: 1200 },\n  { id: \"roof-rail\", name: \"Roof Rail\", category: \"Exterior\", price: 2000 },\n  { id: \"fog-light-show\", name: \"Fog Light Show\", category: \"Lights\", price: 1600 },\n  { id: \"bumper-guard\", name: \"Bumper Guard\", category: \"Exterior\", price: 1700 },\n  { id: \"mac-wheel\", name: \"MAC Wheel\", category: \"Exterior\", price: 4000 },\n  { id: \"alloy-wheel\", name: \"Alloy Wheel\", category: \"Exterior\", price: 5000 },\n  { id: \"folding-mirror\", name: \"Folding Mirror\", category: \"Body Parts\", price: 2500 },\n  { id: \"steering-control\", name: \"Steering Control\", category: \"Interior\", price: 2200 },\n  { id: \"connecting-drl\", name: \"Connecting DRL\", category: \"Lights\", price: 1500 },\n  { id: \"side-step\", name: \"Side Step\", category: \"Exterior\", price: 3200 },\n  { id: \"front-rear-abs-guard\", name: \"Front/Rear ABS Guard\", category: \"Body Parts\", price: 1500 },\n  { id: \"audison-speaker\", name: \"Audison Speaker\", category: \"Interior\", price: 3800 },\n  { id: \"door-damping\", name: \"Door Damping\", category: \"Interior\", price: 1200 },\n  { id: \"parcel-tray\", name: \"Parcel Tray\", category: \"Interior\", price: 950 },\n  { id: \"blaupunkt-screen\", name: \"Blaupunkt Screen\", category: \"Interior\", price: 7500 },\n  { id: \"gfx-mats\", name: \"GFX Mats\", category: \"Interior\", price: 2000 },\n  { id: \"sunglass-holder\", name: \"Sunglass Holder\", category: \"Interior\", price: 350 },\n  { id: \"boot-tray-mat\", name: \"Boot Tray Mat\", category: \"Interior\", price: 900 },\n  { id: \"seat-cover\", name: \"Seat Cover\", category: \"Interior\", price: 4500 },\n];\n\nconst TOYOTA_TAISOR_PARTS: VehiclePart[] = [\n  { id: \"tail-light-show\", name: \"Tail Light Show\", category: \"Lights\", price: 1500 },\n  { id: \"reflector-light\", name: \"Reflector Light\", category: \"Lights\", price: 700 },\n  { id: \"rear-bumper-guard\", name: \"Rear Bumper Guard\", category: \"Exterior\", price: 1800 },\n  { id: \"back-tail-light-connecting-drl\", name: \"Back Tail Light Connecting DRL\", category: \"Lights\", price: 1400 },\n  { id: \"door-visor\", name: \"Door Visor\", category: \"Exterior\", price: 1000 },\n  { id: \"roof-rail\", name: \"Roof Rail\", category: \"Exterior\", price: 2000 },\n  { id: \"antenna-shark-fin\", name: \"Antenna Shark Fin\", category: \"Exterior\", price: 700 },\n  { id: \"bumper-guard\", name: \"Bumper Guard\", category: \"Exterior\", price: 1600 },\n  { id: \"finger-guard\", name: \"Finger Guard (Put & Chrome)\", category: \"Body Parts\", price: 800 },\n  { id: \"handle-cover\", name: \"Handle Cover\", category: \"Body Parts\", price: 650 },\n  { id: \"scuff-plate\", name: \"Scuff Plate\", category: \"Body Parts\", price: 750 },\n  { id: \"window-frame-kit\", name: \"Window Frame Kit\", category: \"Body Parts\", price: 1200 },\n  { id: \"mirror-cover\", name: \"Mirror Cover\", category: \"Body Parts\", price: 500 },\n  { id: \"front-drl-show\", name: \"Front DRL Show\", category: \"Lights\", price: 1400 },\n  { id: \"head-light-show\", name: \"Head Light Show\", category: \"Lights\", price: 4000 },\n  { id: \"mirror\", name: \"Mirror\", category: \"Body Parts\", price: 800 },\n  { id: \"side-panel\", name: \"Side Panel\", category: \"Exterior\", price: 1000 },\n  { id: \"seat-cover\", name: \"Seat Cover\", category: \"Interior\", price: 4500 },\n  { id: \"cng-parcel-tray\", name: \"CNG Parcel Tray\", category: \"Interior\", price: 950 },\n  { id: \"connecting-light\", name: \"Connecting Light\", category: \"Lights\", price: 1200 },\n  { id: \"parcel-tray\", name: \"Parcel Tray\", category: \"Interior\", price: 900 },\n  { id: \"gfx-mat\", name: \"GFX Mat\", category: \"Interior\", price: 2000 },\n  { id: \"original-armrest\", name: \"Original Armrest\", category: \"Interior\", price: 1300 },\n  { id: \"top-end-steering\", name: \"Top-End Steering\", category: \"Interior\", price: 2200 },\n];\n\nconst TOYOTA_INNOVA_CRYSTA_PARTS: VehiclePart[] = [\n  { id: \"antenna-shark-fin\", name: \"Antenna Shark Fin\", category: \"Exterior\", price: 1200 },\n  { id: \"handle-cover\", name: \"Handle Cover\", category: \"Body Parts\", price: 800 },\n  { id: \"finger-guard\", name: \"Finger Guard (Put & Chrome)\", category: \"Body Parts\", price: 600 },\n  { id: \"window-frame-kit\", name: \"Window Frame Kit\", category: \"Body Parts\", price: 2500 },\n  { id: \"scuff-plate\", name: \"Scuff Plate\", category: \"Body Parts\", price: 1500 },\n  { id: \"side-beading\", name: \"Side Beading\", category: \"Body Parts\", price: 1000 },\n  { id: \"front-abs-guard\", name: \"Front ABS Guard\", category: \"Body Parts\", price: 2200 },\n  { id: \"mud-flap\", name: \"Mud Flap\", category: \"Exterior\", price: 900 },\n  { id: \"mirror-cover\", name: \"Mirror Cover\", category: \"Body Parts\", price: 750 },\n  { id: \"head-light-show\", name: \"Head Light Show\", category: \"Lights\", price: 3000 },\n  { id: \"fog-light-show\", name: \"Fog Light Show\", category: \"Lights\", price: 2500 },\n  { id: \"spoiler\", name: \"Spoiler\", category: \"Exterior\", price: 4500 },\n  { id: \"tail-light-show\", name: \"Tail Light Show\", category: \"Lights\", price: 3200 },\n  { id: \"rear-reflector\", name: \"Rear Reflector\", category: \"Lights\", price: 1100 },\n  { id: \"seat-cover\", name: \"Seat Cover\", category: \"Interior\", price: 3500 },\n  { id: \"door-damping\", name: \"Door Damping\", category: \"Interior\", price: 2800 },\n  { id: \"side-step\", name: \"Side Step\", category: \"Exterior\", price: 5000 },\n  { id: \"rear-guard\", name: \"Rear Guard\", category: \"Exterior\", price: 2600 },\n  { id: \"door-visor\", name: \"Door Visor\", category: \"Exterior\", price: 1400 },\n  { id: \"dicky-sill-guard\", name: \"Dicky Sill Guard\", category: \"Body Parts\", price: 1300 },\n  { id: \"roof-rail\", name: \"Roof Rail\", category: \"Exterior\", price: 4000 },\n  { id: \"rear-camera\", name: \"Rear Camera\", category: \"Electronics\", price: 2200 },\n];\n\nconst MARUTI_SUZUKI_BREZZA_PARTS: VehiclePart[] = [\n  { id: \"door-visor\", name: \"Door Visor\", category: \"Exterior\", price: 1200 },\n  { id: \"finger-guard\", name: \"Finger Guard (Put & Chrome)\", category: \"Body Parts\", price: 600 },\n  { id: \"handle-cover\", name: \"Handle Cover\", category: \"Body Parts\", price: 800 },\n  { id: \"antenna-shark-fin\", name: \"Antenna Shark Fin\", category: \"Exterior\", price: 1200 },\n  { id: \"scuff-plate\", name: \"Scuff Plate\", category: \"Body Parts\", price: 1500 },\n  { id: \"window-frame-kit\", name: \"Window Frame Kit\", category: \"Body Parts\", price: 2500 },\n  { id: \"bumper-guard\", name: \"Bumper Guard\", category: \"Exterior\", price: 2000 },\n  { id: \"mac-wheel\", name: \"Mac Wheel\", category: \"Exterior\", price: 3500 },\n  { id: \"mirror-cover\", name: \"Mirror Cover\", category: \"Body Parts\", price: 750 },\n  { id: \"head-light-show\", name: \"Head Light Show\", category: \"Lights\", price: 3000 },\n  { id: \"oem-fog-light\", name: \"OEM Fog Light\", category: \"Lights\", price: 2800 },\n  { id: \"roof-rail\", name: \"Roof Rail\", category: \"Exterior\", price: 4000 },\n  { id: \"tail-light-show\", name: \"Tail Light Show\", category: \"Lights\", price: 3200 },\n  { id: \"rear-wiper\", name: \"Rear Wiper\", category: \"Maintenance\", price: 1500 },\n  { id: \"reflector-light\", name: \"Reflector Light\", category: \"Lights\", price: 1100 },\n  { id: \"rear-bumper-guard\", name: \"Rear Bumper Guard\", category: \"Exterior\", price: 2200 },\n  { id: \"lower-garnish\", name: \"Lower Garnish\", category: \"Body Parts\", price: 1800 },\n  { id: \"side-cladding\", name: \"Side Cladding\", category: \"Exterior\", price: 2500 },\n  { id: \"front-abs-guard\", name: \"Front ABS Guard\", category: \"Body Parts\", price: 2200 },\n  { id: \"back-abs-guard\", name: \"Back ABS Guard\", category: \"Body Parts\", price: 2200 },\n  { id: \"parcel-tray\", name: \"Parcel Tray\", category: \"Interior\", price: 1600 },\n];\n\nconst MARUTI_SUZUKI_VITARA_PARTS: VehiclePart[] = [\n  { id: \"door-visor\", name: \"Door Visor\", category: \"Exterior\", price: 1200 },\n  { id: \"finger-guard\", name: \"Finger Guard (Put & Chrome)\", category: \"Body Parts\", price: 600 },\n  { id: \"handle-cover\", name: \"Handle Cover\", category: \"Body Parts\", price: 800 },\n  { id: \"antenna-shark-fin\", name: \"Antenna Shark Fin\", category: \"Exterior\", price: 1200 },\n  { id: \"window-frame-kit\", name: \"Window Frame Kit\", category: \"Body Parts\", price: 2500 },\n  { id: \"scuff-plate\", name: \"Scuff Plate\", category: \"Body Parts\", price: 1500 },\n  { id: \"mac-wheel\", name: \"Mac Wheel\", category: \"Exterior\", price: 3500 },\n  { id: \"mirror-cover\", name: \"Mirror Cover\", category: \"Body Parts\", price: 750 },\n  { id: \"front-drl\", name: \"Front DRL\", category: \"Lights\", price: 3500 },\n  { id: \"head-light-show\", name: \"Head Light Show\", category: \"Lights\", price: 3000 },\n  { id: \"rear-wiper\", name: \"Rear Wiper\", category: \"Maintenance\", price: 1500 },\n  { id: \"back-reflector-show\", name: \"Back Reflector Show\", category: \"Lights\", price: 1300 },\n  { id: \"roof-rail\", name: \"Roof Rail\", category: \"Exterior\", price: 4000 },\n  { id: \"tail-light-show\", name: \"Tail Light Show\", category: \"Lights\", price: 3200 },\n  { id: \"rear-bumper-guard\", name: \"Rear Bumper Guard\", category: \"Exterior\", price: 2200 },\n  { id: \"side-step\", name: \"Side Step\", category: \"Exterior\", price: 5000 },\n  { id: \"front-back-addon-kit\", name: \"Front Back Addon Kit\", category: \"Exterior\", price: 3000 },\n  { id: \"seat-cover\", name: \"Seat Cover\", category: \"Interior\", price: 3500 },\n  { id: \"7d-mat\", name: \"7D Mat\", category: \"Interior\", price: 2800 },\n  { id: \"string\", name: \"String\", category: \"Interior\", price: 300 },\n  { id: \"parcel-tray\", name: \"Parcel Tray\", category: \"Interior\", price: 1600 },\n  { id: \"bootmat\", name: \"Bootmat\", category: \"Interior\", price: 1200 },\n  { id: \"sunglass-holder\", name: \"Sunglass Holder\", category: \"Interior\", price: 400 },\n];\n\nconst COMMON_VEHICLE_PARTS: VehiclePart[] = [\n  { id: \"front-bumper\", name: \"Front Bumper Guard\", category: \"Exterior\", price: 1500 },\n  { id: \"rear-bumper\", name: \"Rear Bumper Guard\", category: \"Exterior\", price: 1500 },\n  { id: \"side-step\", name: \"Side Step\", category: \"Exterior\", price: 3000 },\n  { id: \"side-cladding\", name: \"Side Cladding\", category: \"Exterior\", price: 2500 },\n  { id: \"roof-rail\", name: \"Roof Rail\", category: \"Exterior\", price: 3000 },\n  { id: \"spoiler\", name: \"Spoiler\", category: \"Exterior\", price: 2500 },\n  { id: \"antenna\", name: \"Antenna\", category: \"Exterior\", price: 500 },\n  { id: \"mac-wheel\", name: \"Mac Wheel / Alloy Wheel\", category: \"Exterior\", price: 3500 },\n  { id: \"head-light\", name: \"Head Light\", category: \"Lights\", price: 3500 },\n  { id: \"fog-light\", name: \"Fog Light\", category: \"Lights\", price: 2000 },\n  { id: \"drl-light\", name: \"DRL Light\", category: \"Lights\", price: 1500 },\n  { id: \"tail-light\", name: \"Tail Light Show\", category: \"Lights\", price: 2500 },\n  { id: \"pillar-light\", name: \"Pillar Light\", category: \"Lights\", price: 800 },\n  { id: \"rear-reflector\", name: \"Rear Reflector\", category: \"Lights\", price: 700 },\n  { id: \"front-grill\", name: \"Front Grill\", category: \"Body Parts\", price: 2000 },\n  { id: \"lower-garnish\", name: \"Lower Garnish ABS & SS\", category: \"Body Parts\", price: 1000 },\n  { id: \"finger-guard\", name: \"Finger Guard (Put & Chrome)\", category: \"Body Parts\", price: 700 },\n  { id: \"handle-cover\", name: \"Handle Cover\", category: \"Body Parts\", price: 750 },\n  { id: \"mirror-cover\", name: \"Mirror Cover\", category: \"Body Parts\", price: 600 },\n  { id: \"front-abs-guard\", name: \"Front ABS Guard\", category: \"Body Parts\", price: 1500 },\n  { id: \"floor-mat\", name: \"Floor Mat (7D/9D)\", category: \"Interior\", price: 2000 },\n  { id: \"seat-cover\", name: \"Seat Cover\", category: \"Interior\", price: 3500 },\n  { id: \"dashboard-cover\", name: \"Dashboard Cover\", category: \"Interior\", price: 1500 },\n  { id: \"steering-cover\", name: \"Steering Cover\", category: \"Interior\", price: 800 },\n  { id: \"front-wiper\", name: \"Front Wiper\", category: \"Maintenance\", price: 500 },\n  { id: \"rear-wiper\", name: \"Rear Wiper\", category: \"Maintenance\", price: 500 },\n  { id: \"air-filter\", name: \"Air Filter\", category: \"Maintenance\", price: 600 },\n  { id: \"oil-filter\", name: \"Oil Filter\", category: \"Maintenance\", price: 400 },\n];\n\nexport const VEHICLE_DATA: VehicleBrand[] = [\n  {\n    name: \"Mahindra\",\n    models: [\n      {\n        name: \"Scorpio Classic\",\n        parts: MAHINDRA_SCORPIO_CLASSIC_PARTS,\n      },\n      {\n        name: \"Scorpio N\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"XUV700\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"XUV500\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"XUV300\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Thar\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Bolero\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Bolero Neo\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Marazzo\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Maruti Suzuki\",\n    models: [\n      {\n        name: \"Swift\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Baleno\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Dzire\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Vitara Brezza\",\n        parts: MARUTI_SUZUKI_BREZZA_PARTS,\n      },\n      {\n        name: \"Ertiga\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Wagon R\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Alto\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Celerio\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"S-Presso\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Eeco\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Ciaz\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"XL6\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Fronx\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Grand Vitara\",\n        parts: MARUTI_SUZUKI_VITARA_PARTS,\n      },\n      {\n        name: \"Jimny\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Hyundai\",\n    models: [\n      {\n        name: \"Creta\",\n        parts: HYUNDAI_CRETA_2025_PARTS,\n      },\n      {\n        name: \"Venue\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"i20\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Verna\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Exter\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Alcazar\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Tucson\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Grand i10 Nios\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Aura\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Kona Electric\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Tata\",\n    models: [\n      {\n        name: \"Nexon\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Harrier\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Safari\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Punch\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Altroz\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Tiago\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Tigor\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Nexon EV\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Tigor EV\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Kia\",\n    models: [\n      {\n        name: \"Seltos\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Sonet\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Carens\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"EV6\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Honda\",\n    models: [\n      {\n        name: \"City\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Amaze\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Elevate\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"CR-V\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Civic\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Toyota\",\n    models: [\n      {\n        name: \"Innova Crysta\",\n        parts: TOYOTA_INNOVA_CRYSTA_PARTS,\n      },\n      {\n        name: \"Fortuner\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Urban Cruiser Hyryder\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Glanza\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Camry\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Hilux\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Innova Hycross\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Taisor\",\n        parts: TOYOTA_TAISOR_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Renault\",\n    models: [\n      {\n        name: \"Kiger\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Triber\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Kwid\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Nissan\",\n    models: [\n      {\n        name: \"Magnite\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"X-Trail\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Volkswagen\",\n    models: [\n      {\n        name: \"Virtus\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Taigun\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Tiguan\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Skoda\",\n    models: [\n      {\n        name: \"Slavia\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Kushaq\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Kodiaq\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Superb\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"MG\",\n    models: [\n      {\n        name: \"Hector\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Astor\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"ZS EV\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Gloster\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Comet EV\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Jeep\",\n    models: [\n      {\n        name: \"Compass\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Meridian\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Wrangler\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Citroen\",\n    models: [\n      {\n        name: \"C3\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"C5 Aircross\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"eC3\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Ford\",\n    models: [\n      {\n        name: \"Endeavour\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"EcoSport\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Figo\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Aspire\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n  {\n    name: \"Other\",\n    models: [\n      {\n        name: \"Other\",\n        parts: COMMON_VEHICLE_PARTS,\n      },\n    ],\n  },\n];\n\nexport function getBrandByName(brandName: string): VehicleBrand | undefined {\n  return VEHICLE_DATA.find(brand => brand.name === brandName);\n}\n\nexport function getModelsByBrand(brandName: string): VehicleModel[] {\n  const brand = getBrandByName(brandName);\n  return brand?.models || [];\n}\n\nexport function getPartsByBrandAndModel(brandName: string, modelName: string): VehiclePart[] {\n  const brand = getBrandByName(brandName);\n  const model = brand?.models.find(m => m.name === modelName);\n  return model?.parts || COMMON_VEHICLE_PARTS;\n}\n\nexport function getAllBrandNames(): string[] {\n  return VEHICLE_DATA.map(brand => brand.name);\n}\n\nexport function getAllUniqueParts(): VehiclePart[] {\n  const uniqueParts = new Map<string, VehiclePart>();\n  \n  for (const brand of VEHICLE_DATA) {\n    for (const model of brand.models) {\n      for (const part of model.parts) {\n        if (!uniqueParts.has(part.id)) {\n          uniqueParts.set(part.id, part);\n        }\n      }\n    }\n  }\n  \n  return Array.from(uniqueParts.values());\n}\n\nexport function getPartById(partId: string): VehiclePart | undefined {\n  for (const brand of VEHICLE_DATA) {\n    for (const model of brand.models) {\n      const part = model.parts.find(p => p.id === partId);\n      if (part) {\n        return part;\n      }\n    }\n  }\n  return undefined;\n}\n","size_bytes":25819},"client/src/pages/CustomerRegistrationDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Search, CheckCircle, XCircle, Car, User, MapPin, Phone, Mail, Edit, Trash2, CalendarIcon, SortAsc } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { getPartById } from \"@shared/vehicleData\";\n\n// Vehicle Brands\nconst VEHICLE_BRANDS = [\n  \"Maruti Suzuki\", \"Hyundai\", \"Tata\", \"Mahindra\", \"Kia\",\n  \"Honda\", \"Toyota\", \"Ford\", \"Renault\", \"Nissan\",\n  \"Volkswagen\", \"Skoda\", \"MG\", \"Jeep\", \"Citroen\"\n];\n\n// Referral sources\nconst REFERRAL_SOURCES = [\n  \"Facebook\",\n  \"Instagram\",\n  \"WhatsApp\",\n  \"Google Search\",\n  \"Friend/Family Referral\",\n  \"Billboard/Hoarding\",\n  \"Newspaper/Magazine\",\n  \"Radio/TV\",\n  \"Direct Visit\",\n  \"Other\"\n];\n\ninterface Customer {\n  id: string;\n  referenceCode: string;\n  fullName: string;\n  mobileNumber: string;\n  alternativeNumber: string | null;\n  email: string;\n  address: string;\n  city: string;\n  taluka: string;\n  district: string;\n  state: string;\n  pinCode: string;\n  referralSource?: string | null;\n  isVerified: boolean;\n  registeredBy?: string | null;\n  registeredByRole?: string | null;\n  createdAt: Date;\n}\n\ninterface Vehicle {\n  id: string;\n  vehicleId: string;\n  customerId: string;\n  vehicleNumber: string;\n  vehicleBrand: string;\n  vehicleModel: string;\n  customModel?: string | null;\n  variant?: 'Top' | 'Base' | null;\n  color?: string | null;\n  yearOfPurchase: number | null;\n  vehiclePhoto: string;\n  isNewVehicle: boolean;\n  chassisNumber?: string | null;\n  selectedParts: string[];\n  warrantyCard?: string | null;\n  warrantyCards?: Array<{\n    partId: string;\n    partName: string;\n    fileData: string;\n  }>;\n  createdAt: Date;\n}\n\nconst editCustomerSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  mobileNumber: z.string().min(10, \"Mobile number must be at least 10 digits\"),\n  alternativeNumber: z.string().optional(),\n  email: z.string().email(\"Invalid email address\"),\n  address: z.string().min(1, \"Address is required\"),\n  city: z.string().min(1, \"City/Village is required\"),\n  taluka: z.string().min(1, \"Taluka is required\"),\n  district: z.string().min(1, \"District is required\"),\n  state: z.string().min(1, \"State is required\"),\n  pinCode: z.string().min(6, \"Pin code must be 6 digits\"),\n  referralSource: z.string().optional(),\n  isVerified: z.boolean(),\n  vehicleNumber: z.string().optional(),\n  vehicleBrand: z.string().optional(),\n  vehicleModel: z.string().optional(),\n  yearOfPurchase: z.string().optional(),\n  vehiclePhoto: z.string().optional(),\n  warrantyCard: z.string().optional(),\n});\n\n// Customer Card Component\nfunction CustomerCard({ \n  customer, \n  isAdmin, \n  onEdit, \n  onDelete,\n  onViewDetails \n}: { \n  customer: Customer; \n  isAdmin: boolean; \n  onEdit: (customer: Customer) => void;\n  onDelete: (customerId: string) => void;\n  onViewDetails: (customer: Customer) => void;\n}) {\n  // Fetch vehicles for this customer\n  const { data: vehicles = [] } = useQuery<Vehicle[]>({\n    queryKey: [\"/api/registration/customers\", customer.id, \"vehicles\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/registration/customers/${customer.id}/vehicles`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n  });\n\n  const primaryVehicle = vehicles[0];\n\n  return (\n    <Card className=\"overflow-hidden border-2 border-orange-300 dark:border-orange-700\" data-testid={`card-customer-${customer.id}`}>\n      <CardContent className=\"p-0\">\n        {/* Vehicle Image */}\n        {primaryVehicle?.vehiclePhoto && (\n          <div className=\"w-full h-48 bg-gradient-to-r from-orange-50 to-yellow-50 dark:from-orange-950/30 dark:to-yellow-950/30 flex items-center justify-center border-2 border-orange-300 dark:border-orange-700\">\n            <img \n              src={primaryVehicle.vehiclePhoto} \n              alt={`${primaryVehicle.vehicleBrand} ${primaryVehicle.vehicleModel}`} \n              className=\"h-full w-full object-contain p-2\"\n              data-testid={`img-vehicle-card-${customer.id}`}\n            />\n          </div>\n        )}\n        \n        {/* Customer Details */}\n        <div className=\"p-4 space-y-3\">\n          {/* Header with name and status */}\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <h3 className=\"font-semibold text-lg\" data-testid={`text-name-${customer.id}`}>\n                {customer.fullName}\n              </h3>\n              <p className=\"text-xs text-muted-foreground font-mono\" data-testid={`text-ref-${customer.id}`}>\n                {customer.referenceCode}\n              </p>\n            </div>\n            {customer.isVerified ? (\n              <Badge className=\"bg-green-600\" data-testid={`badge-verified-${customer.id}`}>\n                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                Verified\n              </Badge>\n            ) : (\n              <Badge variant=\"secondary\" data-testid={`badge-pending-${customer.id}`}>\n                <XCircle className=\"w-3 h-3 mr-1\" />\n                Pending\n              </Badge>\n            )}\n          </div>\n\n          {/* Vehicle Info */}\n          {primaryVehicle && (\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Car className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"font-medium\">\n                {primaryVehicle.vehicleBrand} {primaryVehicle.vehicleModel}\n              </span>\n              <span className=\"text-muted-foreground\">• {primaryVehicle.vehicleNumber}</span>\n              {vehicles.length > 1 && (\n                <Badge variant=\"outline\" className=\"ml-auto\" data-testid={`badge-vehicle-count-${customer.id}`}>\n                  +{vehicles.length - 1} more\n                </Badge>\n              )}\n            </div>\n          )}\n\n          {/* Contact Info */}\n          <div className=\"space-y-1 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <Mail className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"truncate\" data-testid={`text-email-${customer.id}`}>{customer.email}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n              <span data-testid={`text-location-${customer.id}`}>{customer.city}, {customer.state}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <User className=\"w-4 h-4 text-muted-foreground\" />\n              <span data-testid={`text-registered-by-${customer.id}`}>\n                {customer.registeredBy && customer.registeredByRole \n                  ? `Registered by: ${customer.registeredBy} (${customer.registeredByRole})`\n                  : `Registered by: ${customer.fullName}`}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n              <span data-testid={`text-enrollment-date-${customer.id}`}>\n                Enrolled: {new Date(customer.createdAt).toLocaleDateString('en-IN', { \n                  day: 'numeric', \n                  month: 'short', \n                  year: 'numeric' \n                })}\n              </span>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex items-center gap-2 pt-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"flex-1\"\n              onClick={() => onViewDetails(customer)}\n              data-testid={`button-view-${customer.id}`}\n            >\n              View Details\n            </Button>\n            \n            {isAdmin && (\n              <>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onEdit(customer)}\n                  data-testid={`button-edit-${customer.id}`}\n                >\n                  <Edit className=\"w-4 h-4\" />\n                </Button>\n                \n                <AlertDialog>\n                  <AlertDialogTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      data-testid={`button-delete-${customer.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4 text-destructive\" />\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        This will permanently delete the customer \"{customer.fullName}\" and all associated vehicles. This action cannot be undone.\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                      <AlertDialogAction\n                        onClick={() => onDelete(customer.id)}\n                        className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                      >\n                        Delete\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              </>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function CustomerRegistrationDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [cityFilter, setCityFilter] = useState(\"all\");\n  const [districtFilter, setDistrictFilter] = useState(\"all\");\n  const [stateFilter, setStateFilter] = useState(\"all\");\n  const [verifiedFilter, setVerifiedFilter] = useState(\"all\");\n  const [sortOption, setSortOption] = useState<\"all\" | \"latest\" | \"last10\" | \"dateRange\">(\"all\");\n  const [dateFrom, setDateFrom] = useState<Date | undefined>(undefined);\n  const [dateTo, setDateTo] = useState<Date | undefined>(undefined);\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  const [editingVehicle, setEditingVehicle] = useState<Vehicle | null>(null);\n  \n  const isAdmin = user?.role === 'Admin';\n\n  // Fetch all customers\n  const { data: customers = [], isLoading } = useQuery<Customer[]>({\n    queryKey: [\"/api/registration/customers\", cityFilter, districtFilter, stateFilter, verifiedFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (cityFilter && cityFilter !== \"all\") params.append(\"city\", cityFilter);\n      if (districtFilter && districtFilter !== \"all\") params.append(\"district\", districtFilter);\n      if (stateFilter && stateFilter !== \"all\") params.append(\"state\", stateFilter);\n      if (verifiedFilter && verifiedFilter !== \"all\") params.append(\"isVerified\", verifiedFilter);\n      \n      const response = await fetch(`/api/registration/customers?${params.toString()}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch customers\");\n      return response.json();\n    },\n  });\n\n  // Fetch all vehicles for search functionality\n  const { data: allVehicles = [] } = useQuery<Vehicle[]>({\n    queryKey: [\"/api/registration/vehicles\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/registration/vehicles`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n  });\n\n  // Fetch customer vehicles when selected\n  const { data: customerVehicles = [] } = useQuery<Vehicle[]>({\n    queryKey: [\"/api/registration/customers\", selectedCustomer?.id, \"vehicles\"],\n    queryFn: async () => {\n      if (!selectedCustomer?.id) return [];\n      const response = await fetch(`/api/registration/customers/${selectedCustomer.id}/vehicles`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch vehicles\");\n      return response.json();\n    },\n    enabled: !!selectedCustomer?.id,\n  });\n  \n  // Fetch editing customer vehicles\n  const { data: editingVehicles = [] } = useQuery<Vehicle[]>({\n    queryKey: [\"/api/registration/customers\", editingCustomer?.id, \"vehicles\"],\n    queryFn: async () => {\n      if (!editingCustomer?.id) return [];\n      const response = await fetch(`/api/registration/customers/${editingCustomer.id}/vehicles`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!editingCustomer?.id,\n  });\n\n  // Edit form\n  const editForm = useForm<z.infer<typeof editCustomerSchema>>({\n    resolver: zodResolver(editCustomerSchema),\n    defaultValues: {\n      fullName: \"\",\n      mobileNumber: \"\",\n      alternativeNumber: \"\",\n      email: \"\",\n      address: \"\",\n      city: \"\",\n      taluka: \"\",\n      district: \"\",\n      state: \"\",\n      pinCode: \"\",\n      referralSource: \"\",\n      isVerified: false,\n      vehicleNumber: \"\",\n      vehicleBrand: \"\",\n      vehicleModel: \"\",\n      yearOfPurchase: \"\",\n      vehiclePhoto: \"\",\n      warrantyCard: \"\",\n    },\n  });\n\n  // Update form when editing customer or vehicles change\n  useEffect(() => {\n    if (editingCustomer) {\n      const primaryVehicle = editingVehicles[0];\n      editForm.reset({\n        fullName: editingCustomer.fullName,\n        mobileNumber: editingCustomer.mobileNumber,\n        alternativeNumber: editingCustomer.alternativeNumber || \"\",\n        email: editingCustomer.email,\n        address: editingCustomer.address,\n        city: editingCustomer.city,\n        taluka: editingCustomer.taluka,\n        district: editingCustomer.district,\n        state: editingCustomer.state,\n        pinCode: editingCustomer.pinCode,\n        referralSource: editingCustomer.referralSource || \"\",\n        isVerified: editingCustomer.isVerified,\n        vehicleNumber: primaryVehicle?.vehicleNumber || \"\",\n        vehicleBrand: primaryVehicle?.vehicleBrand || \"\",\n        vehicleModel: primaryVehicle?.vehicleModel || \"\",\n        yearOfPurchase: primaryVehicle?.yearOfPurchase?.toString() || \"\",\n        vehiclePhoto: primaryVehicle?.vehiclePhoto || \"\",\n        warrantyCard: primaryVehicle?.warrantyCard || \"\",\n      });\n      setEditingVehicle(primaryVehicle || null);\n    }\n  }, [editingCustomer, editingVehicles, editForm]);\n\n  // Edit customer mutation\n  const editMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof editCustomerSchema>) => {\n      if (!editingCustomer) throw new Error(\"No customer selected\");\n      \n      const customerData = {\n        fullName: data.fullName,\n        mobileNumber: data.mobileNumber,\n        alternativeNumber: data.alternativeNumber,\n        email: data.email,\n        address: data.address,\n        city: data.city,\n        taluka: data.taluka,\n        district: data.district,\n        state: data.state,\n        pinCode: data.pinCode,\n        referralSource: data.referralSource,\n        isVerified: data.isVerified,\n      };\n      \n      await apiRequest(\"PATCH\", `/api/registration/customers/${editingCustomer.id}`, customerData);\n      \n      if (editingVehicle && data.vehicleNumber) {\n        const vehicleData = {\n          vehicleNumber: data.vehicleNumber,\n          vehicleBrand: data.vehicleBrand,\n          vehicleModel: data.vehicleModel,\n          yearOfPurchase: data.yearOfPurchase ? parseInt(data.yearOfPurchase) : null,\n          vehiclePhoto: data.vehiclePhoto,\n          warrantyCard: data.warrantyCard,\n        };\n        \n        await apiRequest(\"PATCH\", `/api/registration/vehicles/${editingVehicle.id}`, vehicleData);\n      }\n      \n      return true;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registration/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/registration/vehicles\"] });\n      setEditDialogOpen(false);\n      setEditingCustomer(null);\n      setEditingVehicle(null);\n      editForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Customer and vehicle updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete customer mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (customerId: string) => {\n      return apiRequest(\"DELETE\", `/api/registration/customers/${customerId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registration/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/registration/vehicles\"] });\n      toast({\n        title: \"Success\",\n        description: \"Customer deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter customers by search term (including vehicle registration number and chassis number)\n  let filteredCustomers = customers.filter(customer => {\n    const searchLower = searchTerm.toLowerCase();\n    \n    // Search in customer fields\n    const customerMatch = (\n      customer.fullName.toLowerCase().includes(searchLower) ||\n      customer.mobileNumber.includes(searchTerm) ||\n      customer.email.toLowerCase().includes(searchLower) ||\n      customer.referenceCode.toLowerCase().includes(searchLower)\n    );\n    \n    // Search in vehicle fields (registration number and chassis number)\n    const customerVehicles = allVehicles.filter(v => v.customerId === customer.id);\n    const vehicleMatch = customerVehicles.some(vehicle => \n      (vehicle.vehicleNumber && vehicle.vehicleNumber.toLowerCase().includes(searchLower)) ||\n      (vehicle.chassisNumber && vehicle.chassisNumber.toLowerCase().includes(searchLower))\n    );\n    \n    return customerMatch || vehicleMatch;\n  });\n\n  // Apply sorting and date filtering\n  if (sortOption === \"latest\") {\n    // Sort by latest added (newest first)\n    filteredCustomers = [...filteredCustomers].sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  } else if (sortOption === \"last10\") {\n    // Get last 10 customers (latest added)\n    filteredCustomers = [...filteredCustomers]\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, 10);\n  } else if (sortOption === \"dateRange\" && dateFrom && dateTo) {\n    // Filter by date range\n    filteredCustomers = filteredCustomers.filter(customer => {\n      const customerDate = new Date(customer.createdAt);\n      const fromDate = new Date(dateFrom);\n      const toDate = new Date(dateTo);\n      // Set time to start and end of day for accurate comparison\n      fromDate.setHours(0, 0, 0, 0);\n      toDate.setHours(23, 59, 59, 999);\n      return customerDate >= fromDate && customerDate <= toDate;\n    }).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  // Get unique values for filters\n  const cities = Array.from(new Set(customers.map(c => c.city))).filter(Boolean);\n  const districts = Array.from(new Set(customers.map(c => c.district))).filter(Boolean);\n  const states = Array.from(new Set(customers.map(c => c.state))).filter(Boolean);\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Customer Registration Dashboard</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          View and manage all registered customers and their vehicles\n        </p>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filters</CardTitle>\n          <CardDescription>Filter customers by various criteria</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <Search className=\"w-4 h-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search by name, mobile, email, reference code, vehicle number, or chassis number...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              data-testid=\"input-search\"\n              className=\"flex-1\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Select value={cityFilter} onValueChange={setCityFilter}>\n              <SelectTrigger data-testid=\"select-filter-city\">\n                <SelectValue placeholder=\"Filter by City\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\" data-testid=\"option-city-all\">All Cities</SelectItem>\n                {cities.map(city => (\n                  <SelectItem key={city} value={city} data-testid={`option-city-${city.toLowerCase().replace(/\\s+/g, '-')}`}>{city}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={districtFilter} onValueChange={setDistrictFilter}>\n              <SelectTrigger data-testid=\"select-filter-district\">\n                <SelectValue placeholder=\"Filter by District\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\" data-testid=\"option-district-all\">All Districts</SelectItem>\n                {districts.map(district => (\n                  <SelectItem key={district} value={district} data-testid={`option-district-${district.toLowerCase().replace(/\\s+/g, '-')}`}>{district}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={stateFilter} onValueChange={setStateFilter}>\n              <SelectTrigger data-testid=\"select-filter-state\">\n                <SelectValue placeholder=\"Filter by State\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\" data-testid=\"option-state-all\">All States</SelectItem>\n                {states.map(state => (\n                  <SelectItem key={state} value={state} data-testid={`option-state-${state.toLowerCase().replace(/\\s+/g, '-')}`}>{state}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={verifiedFilter} onValueChange={setVerifiedFilter}>\n              <SelectTrigger data-testid=\"select-filter-verified\">\n                <SelectValue placeholder=\"Filter by Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\" data-testid=\"option-verified-all\">All Status</SelectItem>\n                <SelectItem value=\"true\" data-testid=\"option-verified-true\">Verified</SelectItem>\n                <SelectItem value=\"false\" data-testid=\"option-verified-false\">Unverified</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Sort and Date Range Filters */}\n          <div className=\"border-t pt-4\">\n            <div className=\"flex items-center gap-2 mb-3\">\n              <SortAsc className=\"w-4 h-4 text-muted-foreground\" />\n              <h4 className=\"font-medium text-sm\">Sort & Date Filters</h4>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Select value={sortOption} onValueChange={(value: any) => {\n                setSortOption(value);\n                if (value !== \"dateRange\") {\n                  setDateFrom(undefined);\n                  setDateTo(undefined);\n                }\n              }}>\n                <SelectTrigger data-testid=\"select-sort-option\">\n                  <SelectValue placeholder=\"Sort Customers\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\" data-testid=\"option-sort-all\">All Customers</SelectItem>\n                  <SelectItem value=\"latest\" data-testid=\"option-sort-latest\">Latest Added</SelectItem>\n                  <SelectItem value=\"last10\" data-testid=\"option-sort-last10\">Last 10 Customers</SelectItem>\n                  <SelectItem value=\"dateRange\" data-testid=\"option-sort-daterange\">Date Range</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {sortOption === \"dateRange\" && (\n                <>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className=\"justify-start text-left font-normal\"\n                        data-testid=\"button-date-from\"\n                      >\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {dateFrom ? format(dateFrom, \"PPP\") : \"From Date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={dateFrom}\n                        onSelect={setDateFrom}\n                        initialFocus\n                        data-testid=\"calendar-from\"\n                      />\n                    </PopoverContent>\n                  </Popover>\n\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className=\"justify-start text-left font-normal\"\n                        data-testid=\"button-date-to\"\n                      >\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {dateTo ? format(dateTo, \"PPP\") : \"To Date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={dateTo}\n                        onSelect={setDateTo}\n                        initialFocus\n                        data-testid=\"calendar-to\"\n                      />\n                    </PopoverContent>\n                  </Popover>\n                </>\n              )}\n            </div>\n          </div>\n\n          {(cityFilter && cityFilter !== \"all\" || districtFilter && districtFilter !== \"all\" || stateFilter && stateFilter !== \"all\" || verifiedFilter && verifiedFilter !== \"all\" || searchTerm || sortOption !== \"all\" || dateFrom || dateTo) && (\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setCityFilter(\"all\");\n                setDistrictFilter(\"all\");\n                setStateFilter(\"all\");\n                setVerifiedFilter(\"all\");\n                setSearchTerm(\"\");\n                setSortOption(\"all\");\n                setDateFrom(undefined);\n                setDateTo(undefined);\n              }}\n              data-testid=\"button-clear-filters\"\n            >\n              Clear All Filters\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Total Customers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-customers\">{customers.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Verified</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"text-verified-customers\">\n              {customers.filter(c => c.isVerified).length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Pending Verification</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\" data-testid=\"text-pending-customers\">\n              {customers.filter(c => !c.isVerified).length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Customers Cards */}\n      <div>\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">Registered Customers</h2>\n            <p className=\"text-muted-foreground\">{filteredCustomers.length} customers found</p>\n          </div>\n        </div>\n        \n        {isLoading ? (\n          <div className=\"text-center py-8\">Loading customers...</div>\n        ) : filteredCustomers.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-8 text-muted-foreground\">\n              No customers found matching your criteria\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredCustomers.map((customer) => (\n              <CustomerCard\n                key={customer.id}\n                customer={customer}\n                isAdmin={isAdmin}\n                onEdit={(customer) => {\n                  setEditingCustomer(customer);\n                  setEditDialogOpen(true);\n                }}\n                onDelete={(customerId) => deleteMutation.mutate(customerId)}\n                onViewDetails={(customer) => setSelectedCustomer(customer)}\n              />\n            ))}\n          </div>\n        )}\n\n        {/* Customer Details Dialog */}\n        <Dialog open={!!selectedCustomer} onOpenChange={(open) => !open && setSelectedCustomer(null)}>\n          <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Customer Details</DialogTitle>\n              <DialogDescription>\n                Reference ID: {selectedCustomer?.referenceCode}\n              </DialogDescription>\n            </DialogHeader>\n\n            {selectedCustomer && (\n              <div className=\"space-y-6\">\n                {/* Customer Information */}\n                <div>\n                  <h3 className=\"flex items-center gap-2 font-semibold mb-3\">\n                    <User className=\"w-4 h-4\" />\n                    Customer Information\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Name:</span>\n                      <p className=\"font-medium\">{selectedCustomer.fullName}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Email:</span>\n                      <p className=\"font-medium\">{selectedCustomer.email}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Referral Source:</span>\n                      <p className=\"font-medium\">{selectedCustomer.referralSource || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Verification Status:</span>\n                      <div className=\"mt-1\">\n                        {selectedCustomer.isVerified ? (\n                          <Badge className=\"bg-green-600\">\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            Verified\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"secondary\">\n                            <XCircle className=\"w-3 h-3 mr-1\" />\n                            Pending Verification\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Registered By:</span>\n                      <p className=\"font-medium\">\n                        {selectedCustomer.registeredBy && selectedCustomer.registeredByRole \n                          ? `${selectedCustomer.registeredBy} (${selectedCustomer.registeredByRole})`\n                          : selectedCustomer.fullName}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Enrollment Date:</span>\n                      <p className=\"font-medium\">\n                        {new Date(selectedCustomer.createdAt).toLocaleDateString('en-IN', { \n                          day: 'numeric', \n                          month: 'long', \n                          year: 'numeric' \n                        })}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Address Information */}\n                <div>\n                  <h3 className=\"flex items-center gap-2 font-semibold mb-3\">\n                    <MapPin className=\"w-4 h-4\" />\n                    Address Information\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div className=\"col-span-2\">\n                      <span className=\"text-muted-foreground\">Address:</span>\n                      <p className=\"font-medium\">{selectedCustomer.address}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">City/Village:</span>\n                      <p className=\"font-medium\">{selectedCustomer.city}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Taluka:</span>\n                      <p className=\"font-medium\">{selectedCustomer.taluka}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">District:</span>\n                      <p className=\"font-medium\">{selectedCustomer.district}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">State:</span>\n                      <p className=\"font-medium\">{selectedCustomer.state}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Pin Code:</span>\n                      <p className=\"font-medium\">{selectedCustomer.pinCode}</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Vehicle Information */}\n                <div>\n                  <h3 className=\"flex items-center gap-2 font-semibold mb-3\">\n                    <Car className=\"w-4 h-4\" />\n                    Registered Vehicles ({customerVehicles.length})\n                  </h3>\n                  {customerVehicles.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground\">No vehicles registered yet</p>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {customerVehicles.map((vehicle) => (\n                        <div key={vehicle.id} className=\"p-3 border rounded-lg\">\n                          <div className=\"flex gap-4\">\n                            {vehicle.vehiclePhoto && (\n                              <div className=\"flex-shrink-0\">\n                                <img \n                                  src={vehicle.vehiclePhoto} \n                                  alt={`${vehicle.vehicleBrand} ${vehicle.vehicleModel}`} \n                                  className=\"w-24 h-24 object-contain rounded-md border-2 border-orange-300 dark:border-orange-700 bg-gradient-to-r from-orange-50 to-yellow-50 dark:from-orange-950/30 dark:to-yellow-950/30 p-1\"\n                                  data-testid={`img-vehicle-${vehicle.id}`}\n                                />\n                              </div>\n                            )}\n                            <div className=\"flex-1 space-y-3\">\n                              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                                <div>\n                                  <span className=\"text-muted-foreground\">Vehicle ID:</span>\n                                  <p className=\"font-medium text-orange-600 dark:text-orange-400\" data-testid={`text-vehicle-id-${vehicle.id}`}>{vehicle.vehicleId || 'N/A'}</p>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Vehicle Type:</span>\n                                  <div className=\"mt-1\">\n                                    <Badge variant={vehicle.isNewVehicle ? \"default\" : \"secondary\"}>\n                                      {vehicle.isNewVehicle ? \"New Vehicle\" : \"Used Vehicle\"}\n                                    </Badge>\n                                  </div>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Registration Number:</span>\n                                  <p className=\"font-medium\">{vehicle.vehicleNumber || 'N/A'}</p>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Brand:</span>\n                                  <p className=\"font-medium\">{vehicle.vehicleBrand}</p>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Model:</span>\n                                  <p className=\"font-medium\">{vehicle.vehicleModel}{vehicle.customModel ? ` (${vehicle.customModel})` : ''}</p>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Variant:</span>\n                                  <p className=\"font-medium\" data-testid={`text-variant-${vehicle.id}`}>{vehicle.variant || 'N/A'}</p>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Color:</span>\n                                  <p className=\"font-medium\" data-testid={`text-color-${vehicle.id}`}>{vehicle.color || 'N/A'}</p>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Year of Purchase:</span>\n                                  <p className=\"font-medium\">{vehicle.yearOfPurchase || 'N/A'}</p>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Chassis Number:</span>\n                                  <p className=\"font-medium\">{vehicle.chassisNumber || 'N/A'}</p>\n                                </div>\n                              </div>\n                              {vehicle.selectedParts && vehicle.selectedParts.length > 0 && (\n                                <div>\n                                  <span className=\"text-muted-foreground text-sm font-medium\">Selected Parts & Warranty Status:</span>\n                                  <div className=\"space-y-2 mt-2\">\n                                    {vehicle.selectedParts.map((partId, index) => {\n                                      const warrantyCard = vehicle.warrantyCards?.find(wc => wc.partId === partId);\n                                      const partInfo = getPartById(partId);\n                                      const partName = warrantyCard?.partName || partInfo?.name || partId;\n                                      const hasWarranty = !!warrantyCard;\n                                      \n                                      return (\n                                        <div \n                                          key={index}\n                                          className=\"flex items-center justify-between p-2 rounded-md border bg-muted/30\"\n                                          data-testid={`part-item-${vehicle.id}-${index}`}\n                                        >\n                                          <div className=\"flex items-center gap-2\">\n                                            <span className=\"font-medium text-sm\">{partName}</span>\n                                            <span className=\"text-xs\">-</span>\n                                            <Badge \n                                              variant={hasWarranty ? \"default\" : \"secondary\"}\n                                              className={hasWarranty ? \"bg-green-600 dark:bg-green-700\" : \"\"}\n                                            >\n                                              {hasWarranty ? \"Warranty card uploaded\" : \"Not uploaded\"}\n                                            </Badge>\n                                          </div>\n                                          {hasWarranty && (\n                                            <Button\n                                              size=\"sm\"\n                                              variant=\"outline\"\n                                              onClick={() => {\n                                                // Convert data URL to blob URL for safe viewing\n                                                const byteString = atob(warrantyCard.fileData.split(',')[1]);\n                                                const mimeString = warrantyCard.fileData.split(',')[0].split(':')[1].split(';')[0];\n                                                const ab = new ArrayBuffer(byteString.length);\n                                                const ia = new Uint8Array(ab);\n                                                for (let i = 0; i < byteString.length; i++) {\n                                                  ia[i] = byteString.charCodeAt(i);\n                                                }\n                                                const blob = new Blob([ab], { type: mimeString });\n                                                const blobUrl = URL.createObjectURL(blob);\n                                                window.open(blobUrl, '_blank');\n                                                // Clean up the blob URL after a delay\n                                                setTimeout(() => URL.revokeObjectURL(blobUrl), 100);\n                                              }}\n                                              data-testid={`button-view-warranty-${vehicle.id}-${index}`}\n                                              className=\"text-xs\"\n                                            >\n                                              View\n                                            </Button>\n                                          )}\n                                        </div>\n                                      );\n                                    })}\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          {vehicle.warrantyCard && (\n                            <div className=\"mt-3 pt-3 border-t\">\n                              <span className=\"text-muted-foreground text-sm\">Warranty Card:</span>\n                              <div className=\"mt-2\">\n                                <img \n                                  src={vehicle.warrantyCard} \n                                  alt=\"Warranty Card\" \n                                  className=\"max-w-xs w-full h-auto rounded-md border-2 border-green-300 dark:border-green-700 cursor-pointer hover:scale-105 transition-transform\"\n                                  onClick={() => {\n                                    if (vehicle.warrantyCard) {\n                                      // Convert data URL to blob URL for safe viewing\n                                      const byteString = atob(vehicle.warrantyCard.split(',')[1]);\n                                      const mimeString = vehicle.warrantyCard.split(',')[0].split(':')[1].split(';')[0];\n                                      const ab = new ArrayBuffer(byteString.length);\n                                      const ia = new Uint8Array(ab);\n                                      for (let i = 0; i < byteString.length; i++) {\n                                        ia[i] = byteString.charCodeAt(i);\n                                      }\n                                      const blob = new Blob([ab], { type: mimeString });\n                                      const blobUrl = URL.createObjectURL(blob);\n                                      window.open(blobUrl, '_blank');\n                                      setTimeout(() => URL.revokeObjectURL(blobUrl), 100);\n                                    }\n                                  }}\n                                  data-testid={`img-warranty-card-${vehicle.id}`}\n                                />\n                                <p className=\"text-xs text-muted-foreground mt-1\">Click to view full size</p>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Edit Customer Dialog */}\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Customer</DialogTitle>\n            <DialogDescription>\n              Update customer information\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit((data) => editMutation.mutate(data))} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"fullName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-edit-fullName\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"alternativeNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Alternative Number</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-edit-alternativeNumber\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={editForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" {...field} data-testid=\"input-edit-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={editForm.control}\n                name=\"referralSource\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>How did you hear about us?</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-referral-source\">\n                          <SelectValue placeholder=\"Select referral source\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {REFERRAL_SOURCES.map((source) => (\n                          <SelectItem key={source} value={source}>\n                            {source}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={editForm.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-edit-address\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"city\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>City/Village</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-edit-city\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={editForm.control}\n                  name=\"taluka\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Taluka</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-edit-taluka\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"district\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>District</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-edit-district\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={editForm.control}\n                  name=\"state\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>State</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-edit-state\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={editForm.control}\n                name=\"pinCode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Pin Code</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-edit-pinCode\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {editingVehicle && (\n                <>\n                  <div className=\"border-t pt-4\">\n                    <h3 className=\"flex items-center gap-2 font-semibold mb-4\">\n                      <Car className=\"w-4 h-4\" />\n                      Vehicle Information\n                    </h3>\n                  </div>\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"vehicleNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Vehicle Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"MH12AB1234\" className=\"uppercase\" data-testid=\"input-edit-vehicleNumber\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={editForm.control}\n                      name=\"vehicleBrand\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vehicle Brand</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-edit-vehicleBrand\">\n                                <SelectValue placeholder=\"Select brand\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {VEHICLE_BRANDS.map((brand) => (\n                                <SelectItem key={brand} value={brand}>\n                                  {brand}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={editForm.control}\n                      name=\"vehicleModel\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vehicle Model</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-edit-vehicleModel\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"yearOfPurchase\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Year of Purchase</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" placeholder=\"2024\" data-testid=\"input-edit-yearOfPurchase\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"vehiclePhoto\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Vehicle Photo</FormLabel>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex gap-2\">\n                            <FormControl>\n                              <Input {...field} placeholder=\"https://... or upload below\" data-testid=\"input-edit-vehiclePhoto\" />\n                            </FormControl>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              onClick={() => document.getElementById('vehicle-photo-upload-edit')?.click()}\n                              data-testid=\"button-upload-vehicle-photo\"\n                            >\n                              Upload\n                            </Button>\n                          </div>\n                          <input\n                            id=\"vehicle-photo-upload-edit\"\n                            type=\"file\"\n                            accept=\"image/*\"\n                            className=\"hidden\"\n                            onChange={(e) => {\n                              const file = e.target.files?.[0];\n                              if (file) {\n                                const reader = new FileReader();\n                                reader.onloadend = () => {\n                                  field.onChange(reader.result as string);\n                                };\n                                reader.readAsDataURL(file);\n                              }\n                            }}\n                          />\n                          {field.value && (\n                            <div className=\"relative w-full h-32 border-2 border-orange-300 dark:border-orange-700 rounded-md overflow-hidden bg-gradient-to-r from-orange-50 to-yellow-50 dark:from-orange-950/30 dark:to-yellow-950/30\">\n                              <img\n                                src={field.value}\n                                alt=\"Vehicle preview\"\n                                className=\"w-full h-full object-contain p-2\"\n                              />\n                            </div>\n                          )}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"warrantyCard\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Warranty Card (Optional)</FormLabel>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex gap-2\">\n                            <FormControl>\n                              <Input {...field} placeholder=\"https://... or upload below\" data-testid=\"input-edit-warrantyCard\" />\n                            </FormControl>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              onClick={() => document.getElementById('warranty-card-upload-edit')?.click()}\n                              data-testid=\"button-upload-warranty-card\"\n                            >\n                              Upload\n                            </Button>\n                          </div>\n                          <input\n                            id=\"warranty-card-upload-edit\"\n                            type=\"file\"\n                            accept=\"image/*\"\n                            className=\"hidden\"\n                            onChange={(e) => {\n                              const file = e.target.files?.[0];\n                              if (file) {\n                                const reader = new FileReader();\n                                reader.onloadend = () => {\n                                  field.onChange(reader.result as string);\n                                };\n                                reader.readAsDataURL(file);\n                              }\n                            }}\n                          />\n                          {field.value && (\n                            <div className=\"relative w-full h-32 border-2 border-green-300 dark:border-green-700 rounded-md overflow-hidden bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950/30 dark:to-emerald-950/30\">\n                              <img\n                                src={field.value}\n                                alt=\"Warranty card preview\"\n                                className=\"w-full h-full object-contain p-2\"\n                              />\n                            </div>\n                          )}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </>\n              )}\n\n              <FormField\n                control={editForm.control}\n                name=\"isVerified\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Verification Status</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Mark this customer as verified\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-edit-isVerified\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setEditDialogOpen(false);\n                    setEditingCustomer(null);\n                    editForm.reset();\n                  }}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={editMutation.isPending}\n                  data-testid=\"button-submit-edit\"\n                >\n                  {editMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":63508},"ANALYTICS_IMPLEMENTATION.md":{"content":"# Analytics & Reports Module - Implementation Summary\n\n## ✅ Completed Features\n\n### 1. **Comprehensive Analytics API Endpoints**\nAll report endpoints are fully functional with real database aggregation:\n\n- **Sales Enhanced Report** (`/api/reports/sales-enhanced`)\n  - Total invoices, revenue, discounts\n  - Coupon usage statistics with top performing coupons\n  \n- **Customer Report** (`/api/reports/customers`)\n  - Total, active, new, repeat, and referred customers\n  - Customer acquisition source breakdown\n  \n- **Inventory Enhanced Report** (`/api/reports/inventory-enhanced`)\n  - Brand-wise inventory analysis (total value, stock by brand)\n  - Color-wise distribution\n  - Low stock and out-of-stock alerts\n  \n- **Employee Performance Report** (`/api/reports/employee-performance`)\n  - Sales performance per employee\n  - Order count and average order value\n  \n- **Warranty Report** (`/api/reports/warranties`)\n  - Active, expiring (next 30 days), and expired warranties\n  - Warranty distribution by product\n  \n- **Feedback Report** (`/api/reports/feedback`)\n  - Average rating and rating distribution\n  - Feedback by type (feedback, complaint, suggestion)\n  - Open vs resolved complaints\n  - Priority distribution\n\n- **Dashboard Overview** (`/api/reports/dashboard`)\n  - 30-day snapshot of key metrics\n  - Quick overview for decision making\n\n### 2. **Analytics Dashboard Page** (`/analytics`)\n- **Interactive Charts** using Recharts library:\n  - Bar charts for sales by brand, employee performance\n  - Pie charts for customer acquisition sources, inventory by color\n  - Line charts for trend analysis\n  \n- **Tabbed Interface** for each report type:\n  - Sales, Customers, Inventory, Employees, Warranties, Feedback\n  \n- **Period Selection**: Today, This Week, This Month, This Year\n\n- **Export Functionality**: Download reports as JSON\n\n- **Key Metrics Cards**:\n  - Total Sales, New Customers, Low Stock Items\n  - Active Warranties, Open Complaints, Total Invoices\n\n### 3. **Email Report System** (Backend Ready)\n\n**Created Files:**\n- `server/utils/emailReports.ts` - Report generation and HTML formatting\n- API Endpoints:\n  - `GET /api/reports/email/preview` - Preview daily report HTML\n  - `POST /api/reports/email/send` - Trigger email report\n  - `GET /api/reports/email/data` - Get report data as JSON\n\n**Email Report Includes:**\n- Sales performance (revenue, invoices, average value)\n- Customer metrics (total, new customers)\n- Inventory status (low stock, out of stock alerts)\n- Warranty information (active, expiring soon)\n- Customer feedback (ratings, complaints)\n- Action-required alerts for critical items\n\n## 📋 To Enable Email Automation\n\n### Step 1: Set Up Email Integration\n\nYou can use one of these email services:\n- **Resend** (recommended for developers)\n- **SendGrid** (enterprise-grade)\n- **Gmail** (for basic needs)\n\n### Step 2: Update Email Sending Function\n\nIn `server/utils/emailReports.ts`, the `sendDailyReportEmail` function needs to be updated to actually send emails using your chosen integration.\n\nExample with Resend:\n```typescript\nimport { Resend } from 'resend';\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nexport async function sendDailyReportEmail(recipientEmail: string) {\n  const reportData = await generateDailyReportData();\n  const htmlContent = formatDailyReportHTML(reportData);\n  \n  const { data, error } = await resend.emails.send({\n    from: 'reports@yourdomain.com',\n    to: recipientEmail,\n    subject: `Daily Business Report - ${reportData.date}`,\n    html: htmlContent,\n  });\n  \n  if (error) {\n    return { success: false, error: error.message };\n  }\n  \n  return { success: true };\n}\n```\n\n### Step 3: Set Up Automated Daily Sending\n\n#### Option A: Using Replit Cron (Recommended)\nCreate a scheduled deployment that runs daily:\n1. Go to Replit Deployments\n2. Add a scheduled task\n3. Set it to run daily at your preferred time\n4. Configure it to call `/api/reports/email/send`\n\n#### Option B: Using Node-Cron\nAdd to your server startup:\n```typescript\nimport cron from 'node-cron';\n\n// Run daily at 8 AM\ncron.schedule('0 8 * * *', async () => {\n  await sendDailyReportEmail('admin@example.com');\n});\n```\n\n## 🎯 Current State\n\n✅ **Fully Functional**:\n- All analytics API endpoints with real data\n- Interactive dashboard with charts\n- Export functionality\n- Email report HTML generation\n\n⏳ **Requires Configuration**:\n- Email service integration (Resend/SendGrid/Gmail)\n- Daily automation scheduler\n- Admin email configuration\n\n## 📊 Testing the Analytics\n\n1. Navigate to `/analytics` (accessible to Admin and HR Manager)\n2. View different report tabs\n3. Change time periods to see data changes\n4. Export reports using the export buttons\n5. Preview email report at `/api/reports/email/preview`\n\n## 🔐 Permissions\n\nAnalytics & Reports access requires:\n- Resource: `reports`\n- Action: `read`\n\nAvailable to: Admin, HR Manager\n\n## 📈 Performance Notes\n\n- All queries use MongoDB aggregation pipelines for efficiency\n- Proper indexes are in place on frequently queried fields\n- Data is cached client-side using React Query\n- Real-time data updates on period selection changes\n","size_bytes":5142},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"server/seed.ts":{"content":"import { connectDB } from './db';\nimport { Product } from './models/Product';\nimport { Employee } from './models/Employee';\nimport { ServiceVisit } from './models/ServiceVisit';\nimport { Order } from './models/Order';\n\nasync function seed() {\n  try {\n    await connectDB();\n    console.log('🌱 Starting database seed...');\n\n    await Product.deleteMany({});\n    await Employee.deleteMany({});\n    await ServiceVisit.deleteMany({});\n    await Order.deleteMany({});\n\n    console.log('ℹ️  Skipped user seeding - users are managed directly in the database');\n\n    const employees = await Employee.insertMany([\n      {\n        employeeId: 'EMP001',\n        name: 'Amit Sharma',\n        role: 'Service Staff',\n        contact: '+91 98765-43210',\n        email: 'amit.sharma@carshop.com',\n        isActive: true,\n      },\n      {\n        employeeId: 'EMP002',\n        name: 'Priya Patel',\n        role: 'Service Staff',\n        contact: '+91 98765-43211',\n        email: 'priya.patel@carshop.com',\n        isActive: true,\n      },\n      {\n        employeeId: 'EMP003',\n        name: 'Vikram Singh',\n        role: 'Inventory Manager',\n        contact: '+91 98765-43212',\n        email: 'vikram.singh@carshop.com',\n        isActive: true,\n      },\n      {\n        employeeId: 'EMP004',\n        name: 'Sneha Reddy',\n        role: 'Sales Executive',\n        contact: '+91 98765-43213',\n        email: 'sneha.reddy@carshop.com',\n        isActive: true,\n      },\n      {\n        employeeId: 'EMP005',\n        name: 'Rahul Deshmukh',\n        role: 'HR Manager',\n        contact: '+91 98765-43214',\n        email: 'rahul.deshmukh@carshop.com',\n        isActive: false,\n      },\n    ]);\n    console.log(`✅ Created ${employees.length} employees`);\n\n    const products = await Product.insertMany([\n      {\n        name: 'Engine Oil Filter - Mann W 712/75',\n        category: 'Engine Parts',\n        brand: 'Mann-Filter',\n        modelCompatibility: ['Maruti Swift', 'Hyundai i20', 'Honda City'],\n        warranty: '6 months',\n        mrp: 3500,\n        sellingPrice: 2850,\n        discount: 18.57,\n        stockQty: 45,\n        minStockLevel: 20,\n        status: 'in_stock',\n        warehouseLocation: 'A-12',\n        barcode: 'MF-W712-75',\n      },\n      {\n        name: 'Brake Pads Set - Front',\n        category: 'Brake System',\n        brand: 'Brembo',\n        modelCompatibility: ['Maruti Swift', 'Maruti Baleno'],\n        warranty: '1 year',\n        mrp: 9500,\n        sellingPrice: 7800,\n        discount: 17.89,\n        stockQty: 12,\n        minStockLevel: 20,\n        status: 'low_stock',\n        warehouseLocation: 'B-08',\n        barcode: 'BRM-FBP-001',\n      },\n      {\n        name: 'Air Filter - K&N 33-2304',\n        category: 'Engine Parts',\n        brand: 'K&N',\n        modelCompatibility: ['Hyundai i20', 'Hyundai Creta'],\n        warranty: '1 year',\n        mrp: 5200,\n        sellingPrice: 4400,\n        discount: 15.38,\n        stockQty: 0,\n        minStockLevel: 10,\n        status: 'out_of_stock',\n        warehouseLocation: 'A-15',\n        barcode: 'KN-33-2304',\n      },\n      {\n        name: 'Spark Plugs Set (4pc)',\n        category: 'Ignition System',\n        brand: 'NGK',\n        modelCompatibility: ['Honda City', 'Maruti Swift', 'Hyundai i20'],\n        warranty: '6 months',\n        mrp: 2500,\n        sellingPrice: 2280,\n        discount: 8.8,\n        stockQty: 28,\n        minStockLevel: 15,\n        status: 'in_stock',\n        warehouseLocation: 'C-05',\n        barcode: 'NGK-SP-4PC',\n      },\n      {\n        name: 'Cabin Air Filter',\n        category: 'HVAC',\n        brand: 'Bosch',\n        modelCompatibility: ['All Models'],\n        warranty: '6 months',\n        mrp: 2000,\n        sellingPrice: 1680,\n        discount: 16,\n        stockQty: 18,\n        minStockLevel: 20,\n        status: 'low_stock',\n        warehouseLocation: 'A-20',\n        barcode: 'BSH-CAF-001',\n      },\n      {\n        name: 'Engine Oil 5W-30 - Mobil 1',\n        category: 'Engine Parts',\n        brand: 'Mobil',\n        modelCompatibility: ['All Petrol Cars'],\n        warranty: 'N/A',\n        mrp: 4500,\n        sellingPrice: 3850,\n        discount: 14.44,\n        stockQty: 8,\n        minStockLevel: 15,\n        status: 'low_stock',\n        warehouseLocation: 'D-03',\n        barcode: 'MOB-5W30-1L',\n      },\n      {\n        name: 'LED Headlight Bulb H4',\n        category: 'Lighting',\n        brand: 'Philips',\n        modelCompatibility: ['Maruti Swift', 'Hyundai i10', 'Honda Jazz'],\n        warranty: '2 years',\n        mrp: 3800,\n        sellingPrice: 3200,\n        discount: 15.79,\n        stockQty: 35,\n        minStockLevel: 15,\n        status: 'in_stock',\n        warehouseLocation: 'E-11',\n        barcode: 'PHL-H4-LED',\n      },\n      {\n        name: 'Wiper Blades Pair',\n        category: 'Accessories',\n        brand: 'Bosch',\n        modelCompatibility: ['All Models'],\n        warranty: '1 year',\n        mrp: 1800,\n        sellingPrice: 1450,\n        discount: 19.44,\n        stockQty: 52,\n        minStockLevel: 25,\n        status: 'in_stock',\n        warehouseLocation: 'F-07',\n        barcode: 'BSH-WPR-PAIR',\n      },\n      {\n        name: 'Battery 12V 65Ah',\n        category: 'Electrical',\n        brand: 'Amaron',\n        modelCompatibility: ['Maruti Swift', 'Hyundai i20', 'Honda City'],\n        warranty: '3 years',\n        mrp: 8500,\n        sellingPrice: 7200,\n        discount: 15.29,\n        stockQty: 15,\n        minStockLevel: 10,\n        status: 'in_stock',\n        warehouseLocation: 'G-02',\n        barcode: 'AMR-BAT-65AH',\n      },\n      {\n        name: 'Coolant/Antifreeze 1L',\n        category: 'Engine Parts',\n        brand: 'Shell',\n        modelCompatibility: ['All Models'],\n        warranty: 'N/A',\n        mrp: 650,\n        sellingPrice: 550,\n        discount: 15.38,\n        stockQty: 95,\n        minStockLevel: 30,\n        status: 'in_stock',\n        warehouseLocation: 'D-08',\n        barcode: 'SHL-CLT-1L',\n      },\n    ]);\n    console.log(`✅ Created ${products.length} products`);\n\n    // Customer model removed - using RegistrationCustomer instead\n    console.log('✅ Skipped legacy customer seeding (use Customer Registration Dashboard)');\n    console.log('✅ Skipped service visits and orders (can be created via UI)');\n\n    console.log('🎉 Database seeded successfully!');\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Seed error:', error);\n    process.exit(1);\n  }\n}\n\nseed();\n","size_bytes":6462},"server/middleware.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { hasPermission } from './auth';\n\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (!(req as any).session?.userId) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n  next();\n}\n\nexport function requireRole(...allowedRoles: string[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!(req as any).session?.userId) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n    \n    if (!allowedRoles.includes((req as any).session?.userRole || '')) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n    \n    next();\n  };\n}\n\nexport function requirePermission(resource: string, action: string) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!(req as any).session?.userId) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n    \n    const userRole = (req as any).session?.userRole;\n    if (!hasPermission(userRole, resource, action)) {\n      return res.status(403).json({ error: 'Insufficient permissions for this action' });\n    }\n    \n    next();\n  };\n}\n\nexport function attachUser(req: Request, res: Response, next: NextFunction) {\n  const session = (req as any).session;\n  if (session?.userId) {\n    (req as any).user = {\n      id: session.userId,\n      role: session.userRole,\n      name: session.userName,\n      email: session.userEmail,\n    };\n  }\n  next();\n}\n\nexport function checkInactivityTimeout(req: Request, res: Response, next: NextFunction) {\n  const session = (req as any).session;\n  \n  if (session?.userId) {\n    const userRole = session.userRole;\n    const now = Date.now();\n    const INACTIVITY_TIMEOUT = 30 * 60 * 1000;\n    \n    if (userRole !== 'Admin') {\n      if (session.lastActivity) {\n        const inactiveTime = now - session.lastActivity;\n        \n        if (inactiveTime > INACTIVITY_TIMEOUT) {\n          session.destroy((err: any) => {\n            if (err) {\n              console.error('Error destroying session:', err);\n            }\n          });\n          return res.status(401).json({ \n            error: 'Session expired due to inactivity',\n            code: 'INACTIVITY_TIMEOUT'\n          });\n        }\n      }\n      \n      session.lastActivity = now;\n    }\n  }\n  \n  next();\n}\n","size_bytes":2375},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/NotificationBell.tsx":{"content":"import { Bell } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Notification {\n  _id: string;\n  message: string;\n  type: \"low_stock\" | \"new_order\" | \"payment_due\" | \"info\";\n  read: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport function NotificationBell() {\n  const { toast } = useToast();\n\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"PATCH\", `/api/notifications/${id}/read`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark notification as read\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"PATCH\", \"/api/notifications/mark-all-read\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      toast({\n        title: \"Success\",\n        description: \"All notifications marked as read\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark all notifications as read\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const unreadCount = notifications.filter((n) => !n.read).length;\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"low_stock\":\n        return \"bg-warning/10 text-warning border-warning/20\";\n      case \"new_order\":\n        return \"bg-info/10 text-info border-info/20\";\n      case \"payment_due\":\n        return \"bg-destructive/10 text-destructive border-destructive/20\";\n      case \"info\":\n        return \"bg-blue-500/10 text-blue-500 border-blue-500/20\";\n      default:\n        return \"bg-muted text-muted-foreground border-muted\";\n    }\n  };\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.read) {\n      markAsReadMutation.mutate(notification._id);\n    }\n  };\n\n  const handleMarkAllAsRead = () => {\n    if (unreadCount > 0) {\n      markAllAsReadMutation.mutate();\n    }\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\">\n              {unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\" align=\"end\">\n        <div className=\"p-4 border-b border-border\">\n          <h3 className=\"font-semibold\">Notifications</h3>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            {isLoading ? \"Loading...\" : `${unreadCount} unread messages`}\n          </p>\n        </div>\n        <ScrollArea className=\"h-[320px]\">\n          <div className=\"p-2\">\n            {isLoading ? (\n              <div className=\"p-4 text-center text-sm text-muted-foreground\">\n                Loading notifications...\n              </div>\n            ) : notifications.length === 0 ? (\n              <div className=\"p-4 text-center text-sm text-muted-foreground\">\n                No notifications\n              </div>\n            ) : (\n              notifications.map((notification) => (\n                <div\n                  key={notification._id}\n                  onClick={() => handleNotificationClick(notification)}\n                  className={cn(\n                    \"p-3 rounded-md mb-2 hover-elevate cursor-pointer transition-colors\",\n                    !notification.read && \"bg-primary/5\"\n                  )}\n                  data-testid={`notification-${notification._id}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className={cn(\"h-2 w-2 rounded-full mt-1.5\", getTypeColor(notification.type))} />\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm\">{notification.message}</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n        <div className=\"p-3 border-t border-border\">\n          <Button \n            variant=\"ghost\" \n            className=\"w-full\" \n            size=\"sm\" \n            data-testid=\"button-mark-all-read\"\n            onClick={handleMarkAllAsRead}\n            disabled={unreadCount === 0 || markAllAsReadMutation.isPending}\n          >\n            {markAllAsReadMutation.isPending ? \"Marking...\" : \"Mark all as read\"}\n          </Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n","size_bytes":5556},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 15% 98%;\n\n  --foreground: 220 15% 15%;\n\n  --border: 220 10% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 15%;\n\n  --card-border: 25 95% 65%;\n\n  --sidebar: 220 15% 96%;\n\n  --sidebar-foreground: 220 15% 15%;\n\n  --sidebar-border: 220 10% 90%;\n\n  --sidebar-primary: 210 95% 50%;\n\n  --sidebar-primary-foreground: 210 95% 98%;\n\n  --sidebar-accent: 220 12% 93%;\n\n  --sidebar-accent-foreground: 220 15% 20%;\n\n  --sidebar-ring: 210 95% 50%;\n\n  --popover: 220 10% 97%;\n\n  --popover-foreground: 220 15% 15%;\n\n  --popover-border: 220 10% 91%;\n\n  --primary: 210 95% 50%;\n\n  --primary-foreground: 210 95% 98%;\n\n  --secondary: 220 12% 94%;\n\n  --secondary-foreground: 220 15% 20%;\n\n  --muted: 220 8% 95%;\n\n  --muted-foreground: 220 10% 40%;\n\n  --accent: 220 10% 94%;\n\n  --accent-foreground: 220 15% 20%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 75% 98%;\n\n  --input: 220 10% 85%;\n  --ring: 210 95% 50%;\n  --chart-1: 210 95% 45%;\n  --chart-2: 145 65% 40%;\n  --chart-3: 35 90% 50%;\n  --chart-4: 280 60% 50%;\n  --chart-5: 200 85% 45%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 15% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 15% / 0.06), 0px 1px 2px -1px hsl(220 15% 15% / 0.08);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 15% / 0.07), 0px 2px 4px -1px hsl(220 15% 15% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 15% / 0.08), 0px 3px 6px -2px hsl(220 15% 15% / 0.05);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 15% 15% / 0.1), 0px 4px 8px -2px hsl(220 15% 15% / 0.06);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 15% 15% / 0.1), 0px 10px 10px -5px hsl(220 15% 15% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 15% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Status colors for service workflow */\n  --status-inquired: 200 70% 50%;\n  --status-inquired-foreground: 200 70% 98%;\n  --status-working: 35 90% 55%;\n  --status-working-foreground: 35 90% 98%;\n  --status-waiting: 280 60% 55%;\n  --status-waiting-foreground: 280 60% 98%;\n  --status-completed: 145 65% 45%;\n  --status-completed-foreground: 145 65% 98%;\n\n  /* Utility colors */\n  --success: 145 65% 45%;\n  --success-foreground: 145 65% 98%;\n  --warning: 35 90% 55%;\n  --warning-foreground: 35 90% 98%;\n  --info: 200 85% 50%;\n  --info-foreground: 200 85% 98%;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --success-border: hsl(var(--success));\n  --success-border: hsl(from hsl(var(--success)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --warning-border: hsl(var(--warning));\n  --warning-border: hsl(from hsl(var(--warning)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --info-border: hsl(var(--info));\n  --info-border: hsl(from hsl(var(--info)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 10%;\n\n  --foreground: 220 10% 95%;\n\n  --border: 220 10% 25%;\n\n  --card: 220 15% 14%;\n\n  --card-foreground: 220 10% 95%;\n\n  --card-border: 25 95% 65%;\n\n  --sidebar: 220 15% 12%;\n\n  --sidebar-foreground: 220 10% 95%;\n\n  --sidebar-border: 220 10% 17%;\n\n  --sidebar-primary: 210 95% 50%;\n\n  --sidebar-primary-foreground: 210 95% 98%;\n\n  --sidebar-accent: 220 12% 16%;\n\n  --sidebar-accent-foreground: 220 10% 92%;\n\n  --sidebar-ring: 210 95% 50%;\n\n  --popover: 220 15% 18%;\n\n  --popover-foreground: 220 10% 95%;\n\n  --popover-border: 220 10% 23%;\n\n  --primary: 210 95% 50%;\n\n  --primary-foreground: 210 95% 98%;\n\n  --secondary: 220 12% 20%;\n\n  --secondary-foreground: 220 10% 92%;\n\n  --muted: 220 8% 19%;\n\n  --muted-foreground: 220 8% 70%;\n\n  --accent: 220 10% 19%;\n\n  --accent-foreground: 220 10% 92%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 75% 98%;\n\n  --input: 220 10% 28%;\n  --ring: 210 95% 50%;\n  --chart-1: 210 95% 65%;\n  --chart-2: 145 65% 60%;\n  --chart-3: 35 90% 65%;\n  --chart-4: 280 60% 65%;\n  --chart-5: 200 85% 60%;\n\n  /* Status colors for service workflow */\n  --status-inquired: 200 70% 55%;\n  --status-inquired-foreground: 200 70% 98%;\n  --status-working: 35 90% 55%;\n  --status-working-foreground: 35 90% 98%;\n  --status-waiting: 280 60% 55%;\n  --status-waiting-foreground: 280 60% 98%;\n  --status-completed: 145 65% 50%;\n  --status-completed-foreground: 145 65% 98%;\n\n  /* Utility colors */\n  --success: 145 65% 50%;\n  --success-foreground: 145 65% 98%;\n  --warning: 35 90% 55%;\n  --warning-foreground: 35 90% 98%;\n  --info: 200 85% 50%;\n  --info-foreground: 200 85% 98%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 5% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 5% / 0.4);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 5% / 0.35), 0px 1px 2px -1px hsl(220 15% 5% / 0.4);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 5% / 0.4), 0px 2px 4px -1px hsl(220 15% 5% / 0.3);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 5% / 0.45), 0px 3px 6px -2px hsl(220 15% 5% / 0.35);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 15% 5% / 0.5), 0px 4px 8px -2px hsl(220 15% 5% / 0.4);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 15% 5% / 0.5), 0px 10px 10px -5px hsl(220 15% 5% / 0.3);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 5% / 0.6);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --success-border: hsl(from hsl(var(--success)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --warning-border: hsl(from hsl(var(--warning)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --info-border: hsl(from hsl(var(--info)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":12878},"client/src/pages/ShopSelection.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Store } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport logoImage from '@assets/image_1760164042662.png';\nimport bgImage from '@assets/bg_1761112040031.jpg';\n\ninterface ShopOption {\n  id: string;\n  name: string;\n  location: string;\n}\n\nconst shops: ShopOption[] = [\n  {\n    id: 'beed',\n    name: 'Shop A',\n    location: 'Beed',\n  },\n  {\n    id: 'ahilyanagar',\n    name: 'Shop B',\n    location: 'Ahilyanagar',\n  },\n];\n\nexport default function ShopSelection() {\n  const [selectedShop, setSelectedShop] = useState<string>('');\n  const [, setLocation] = useLocation();\n\n  const handleContinue = () => {\n    if (selectedShop) {\n      localStorage.setItem('selectedShop', selectedShop);\n      setLocation('/select-role');\n    }\n  };\n\n  return (\n    <div \n      className=\"min-h-screen flex items-center justify-center p-4 relative\"\n      style={{\n        backgroundImage: `url(${bgImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n      }}\n    >\n      <div className=\"absolute inset-0 bg-black/30\" />\n      <div className=\"w-full max-w-4xl relative z-10\">\n        <Card className=\"bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm mb-6\">\n          <CardContent className=\"text-center py-6\">\n            <div className=\"flex items-center justify-center gap-3 mb-3\">\n              <img src={logoImage} alt=\"Mauli Car World Logo\" className=\"h-14 w-auto\" />\n              <h1 className=\"text-3xl font-bold\" data-testid=\"text-title\">Mauli Car World</h1>\n            </div>\n            <p className=\"text-base text-muted-foreground\" data-testid=\"text-subtitle\">\n              Select your shop location to continue\n            </p>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n          {shops.map((shop) => (\n            <Card\n              key={shop.id}\n              className={cn(\n                'cursor-pointer transition-all hover:shadow-md bg-white dark:bg-gray-900',\n                selectedShop === shop.id && 'ring-2 ring-primary'\n              )}\n              onClick={() => setSelectedShop(shop.id)}\n              data-testid={`card-shop-${shop.id}`}\n            >\n              <CardContent className=\"flex items-start gap-4 p-6\">\n                <div className={cn(\n                  'p-3 rounded-lg',\n                  selectedShop === shop.id ? 'bg-primary text-primary-foreground' : 'bg-muted'\n                )}>\n                  <Store className=\"h-6 w-6\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-lg mb-1\" data-testid={`text-shop-${shop.id}`}>\n                    {shop.name}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-location-${shop.id}`}>\n                    {shop.location}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"flex justify-center\">\n          <Button\n            onClick={handleContinue}\n            disabled={!selectedShop}\n            className=\"px-8 disabled:opacity-100\"\n            size=\"default\"\n            data-testid=\"button-continue\"\n          >\n            Continue to Role Selection\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3562},"server/models/SupportTicket.ts":{"content":"import mongoose from 'mongoose';\n\nconst supportTicketSchema = new mongoose.Schema({\n  ticketNumber: { \n    type: String, \n    required: true, \n    unique: true \n  },\n  customerId: { \n    type: mongoose.Schema.Types.ObjectId, \n    ref: 'RegistrationCustomer', \n    required: true \n  },\n  vehicleId: { \n    type: mongoose.Schema.Types.ObjectId, \n    ref: 'RegistrationVehicle' \n  },\n  vehicleReg: { type: String },\n  subject: { \n    type: String, \n    required: true \n  },\n  description: { \n    type: String, \n    required: true \n  },\n  category: {\n    type: String,\n    enum: ['service_quality', 'product_issue', 'billing', 'parts_warranty', 'general'],\n    default: 'general'\n  },\n  priority: {\n    type: String,\n    enum: ['low', 'medium', 'high', 'urgent'],\n    default: 'medium'\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'in_progress', 'resolved', 'closed'],\n    default: 'pending'\n  },\n  assignedTo: { \n    type: mongoose.Schema.Types.ObjectId, \n    ref: 'User' \n  },\n  createdBy: { \n    type: mongoose.Schema.Types.ObjectId, \n    ref: 'User', \n    required: true \n  },\n  resolution: { type: String },\n  resolvedAt: { type: Date },\n  closedAt: { type: Date },\n  whatsappFollowUp: {\n    sent: { type: Boolean, default: false },\n    sentAt: { type: Date },\n    message: { type: String }\n  },\n  feedbackSent: {\n    sent: { type: Boolean, default: false },\n    sentAt: { type: Date }\n  },\n  feedbackId: { \n    type: mongoose.Schema.Types.ObjectId, \n    ref: 'Feedback' \n  },\n  notes: [\n    {\n      note: { type: String, required: true },\n      addedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n      addedAt: { type: Date, default: Date.now }\n    }\n  ]\n}, { timestamps: true });\n\nsupportTicketSchema.index({ customerId: 1, createdAt: -1 });\nsupportTicketSchema.index({ vehicleReg: 1 });\nsupportTicketSchema.index({ status: 1 });\n\nexport const SupportTicket = mongoose.models.SupportTicket || mongoose.model('SupportTicket', supportTicketSchema);\n","size_bytes":1975},"server/scripts/assign-tickets-to-service-staff.ts":{"content":"import mongoose from 'mongoose';\nimport { SupportTicket } from '../models/SupportTicket';\nimport { User } from '../models/User';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) {\n  console.error('❌ MONGODB_URI environment variable is not set');\n  process.exit(1);\n}\n\nasync function assignTicketsToServiceStaff() {\n  try {\n    console.log('🔌 Connecting to MongoDB...');\n    await mongoose.connect(MONGODB_URI);\n    console.log('✅ Connected to MongoDB');\n\n    // Find all Service Staff users\n    const serviceStaffUsers = await User.find({ role: 'Service Staff', isActive: true });\n    console.log(`\\n📋 Found ${serviceStaffUsers.length} Service Staff users:`);\n    serviceStaffUsers.forEach(user => {\n      console.log(`  - ${user.name} (${user.email}) - ID: ${user._id}`);\n    });\n\n    if (serviceStaffUsers.length === 0) {\n      console.log('\\n⚠️ No Service Staff users found. Please create a Service Staff user first.');\n      process.exit(0);\n    }\n\n    // Find all unassigned tickets or tickets with status pending/in_progress\n    const unassignedTickets = await SupportTicket.find({\n      $or: [\n        { assignedTo: { $exists: false } },\n        { assignedTo: null }\n      ],\n      status: { $in: ['pending', 'in_progress'] }\n    });\n\n    console.log(`\\n🎫 Found ${unassignedTickets.length} unassigned tickets with pending/in_progress status`);\n\n    if (unassignedTickets.length === 0) {\n      console.log('\\n✅ No unassigned tickets found. All tickets are already assigned.');\n      \n      // Show current ticket assignments\n      const allTickets = await SupportTicket.find().populate('assignedTo', 'name email role');\n      console.log(`\\n📊 Current ticket assignments (${allTickets.length} total tickets):`);\n      allTickets.forEach(ticket => {\n        console.log(`  - Ticket #${ticket.ticketNumber}: ${ticket.subject}`);\n        console.log(`    Status: ${ticket.status}, Priority: ${ticket.priority}`);\n        console.log(`    Assigned to: ${ticket.assignedTo ? `${ticket.assignedTo.name} (${ticket.assignedTo.email})` : 'Unassigned'}`);\n      });\n      \n      process.exit(0);\n    }\n\n    // Assign tickets to first Service Staff user (round-robin can be added later)\n    const firstServiceStaff = serviceStaffUsers[0];\n    console.log(`\\n✏️ Assigning ${unassignedTickets.length} ticket(s) to ${firstServiceStaff.name}...`);\n\n    for (const ticket of unassignedTickets) {\n      await SupportTicket.findByIdAndUpdate(ticket._id, {\n        assignedTo: firstServiceStaff._id\n      });\n      console.log(`  ✅ Assigned Ticket #${ticket.ticketNumber} - \"${ticket.subject}\"`);\n    }\n\n    console.log(`\\n✨ Successfully assigned ${unassignedTickets.length} ticket(s) to ${firstServiceStaff.name}`);\n    console.log('\\n📊 Now the Service Staff dashboard will show these tickets!');\n\n  } catch (error) {\n    console.error('❌ Error:', error);\n    process.exit(1);\n  } finally {\n    await mongoose.connection.close();\n    console.log('\\n🔌 Disconnected from MongoDB');\n    process.exit(0);\n  }\n}\n\nassignTicketsToServiceStaff();\n","size_bytes":3080},"server/models/Notification.ts":{"content":"import mongoose from 'mongoose';\n\nconst notificationSchema = new mongoose.Schema({\n  message: { type: String, required: true },\n  type: { \n    type: String, \n    enum: ['low_stock', 'new_order', 'payment_due', 'info'],\n    required: true \n  },\n  read: { type: Boolean, default: false },\n  targetRole: { type: String },\n  relatedId: { type: mongoose.Schema.Types.ObjectId },\n}, { timestamps: true });\n\nexport const Notification = mongoose.models.Notification || mongoose.model('Notification', notificationSchema);\n","size_bytes":513},"client/src/components/examples/StatusBadge.tsx":{"content":"import { StatusBadge } from \"../StatusBadge\";\n\nexport default function StatusBadgeExample() {\n  return (\n    <div className=\"p-6 bg-background flex flex-wrap gap-3\">\n      <StatusBadge type=\"service\" status=\"inquired\" />\n      <StatusBadge type=\"service\" status=\"working\" />\n      <StatusBadge type=\"service\" status=\"waiting\" />\n      <StatusBadge type=\"service\" status=\"completed\" />\n      <StatusBadge type=\"stock\" status=\"in_stock\" />\n      <StatusBadge type=\"stock\" status=\"low_stock\" />\n      <StatusBadge type=\"stock\" status=\"out_of_stock\" />\n      <StatusBadge type=\"payment\" status=\"paid\" />\n      <StatusBadge type=\"payment\" status=\"partial\" />\n      <StatusBadge type=\"payment\" status=\"due\" />\n    </div>\n  );\n}\n","size_bytes":722},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/examples/KPICard.tsx":{"content":"import { KPICard } from \"../KPICard\";\nimport { DollarSign } from \"lucide-react\";\n\nexport default function KPICardExample() {\n  return (\n    <div className=\"p-6 bg-background\">\n      <KPICard\n        title=\"Today's Sales\"\n        value=\"₹1,24,500\"\n        icon={DollarSign}\n        trend={{ value: 12.5, isPositive: true }}\n      />\n    </div>\n  );\n}\n","size_bytes":352},"client/src/pages/RoleSelection.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Package, Warehouse, ShoppingCart, Users, Headphones, Building2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport logoImage from '@assets/image_1760164042662.png';\nimport bgImage from '@assets/bg_1761112040031.jpg';\n\ninterface RoleOption {\n  id: string;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n}\n\nconst roles: RoleOption[] = [\n  {\n    id: 'Admin',\n    name: 'Admin',\n    description: 'Full system access and management',\n    icon: <Package className=\"h-6 w-6\" />,\n  },\n  {\n    id: 'Manager',\n    name: 'Manager',\n    description: 'Branch head with sub-admin access',\n    icon: <Building2 className=\"h-6 w-6\" />,\n  },\n  {\n    id: 'Inventory Manager',\n    name: 'Inventory Manager',\n    description: 'Manage products and inventory',\n    icon: <Warehouse className=\"h-6 w-6\" />,\n  },\n  {\n    id: 'Sales Executive',\n    name: 'Sales Executive',\n    description: 'Handle orders and customers',\n    icon: <ShoppingCart className=\"h-6 w-6\" />,\n  },\n  {\n    id: 'HR Manager',\n    name: 'HR Manager',\n    description: 'Manage employees and HR tasks',\n    icon: <Users className=\"h-6 w-6\" />,\n  },\n  {\n    id: 'Service Staff',\n    name: 'Service Staff',\n    description: 'Customer support and service',\n    icon: <Headphones className=\"h-6 w-6\" />,\n  },\n];\n\nexport default function RoleSelection() {\n  const [selectedRole, setSelectedRole] = useState<string>('');\n  const [, setLocation] = useLocation();\n\n  const handleContinue = () => {\n    if (selectedRole) {\n      setLocation(`/login?role=${encodeURIComponent(selectedRole)}`);\n    }\n  };\n\n  return (\n    <div \n      className=\"min-h-screen flex items-center justify-center p-4 relative\"\n      style={{\n        backgroundImage: `url(${bgImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n      }}\n    >\n      <div className=\"absolute inset-0 bg-black/30\" />\n      <div className=\"w-full max-w-4xl relative z-10\">\n        <Card className=\"bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm mb-6\">\n          <CardContent className=\"text-center py-6\">\n            <div className=\"flex items-center justify-center gap-3 mb-3\">\n              <img src={logoImage} alt=\"Mauli Car World Logo\" className=\"h-14 w-auto\" />\n              <h1 className=\"text-3xl font-bold\" data-testid=\"text-title\">Mauli Car World</h1>\n            </div>\n            <p className=\"text-base text-muted-foreground\" data-testid=\"text-subtitle\">\n              Select your role to access the system\n            </p>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n          {roles.map((role) => (\n            <Card\n              key={role.id}\n              className={cn(\n                'cursor-pointer transition-all hover:shadow-md bg-white dark:bg-gray-900',\n                selectedRole === role.id && 'ring-2 ring-primary'\n              )}\n              onClick={() => setSelectedRole(role.id)}\n              data-testid={`card-role-${role.id.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <CardContent className=\"flex items-start gap-4 p-6\">\n                <div className={cn(\n                  'p-3 rounded-lg',\n                  selectedRole === role.id ? 'bg-primary text-primary-foreground' : 'bg-muted'\n                )}>\n                  {role.icon}\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-lg mb-1\" data-testid={`text-role-${role.id.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {role.name}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-description-${role.id.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {role.description}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"flex justify-center\">\n          <Button\n            onClick={handleContinue}\n            disabled={!selectedRole}\n            className=\"px-8 disabled:opacity-100\"\n            size=\"default\"\n            data-testid=\"button-continue\"\n          >\n            Continue as {selectedRole ? roles.find(r => r.id === selectedRole)?.name : 'User'}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4542},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n          inquired: \"hsl(var(--status-inquired) / <alpha-value>)\",\n          working: \"hsl(var(--status-working) / <alpha-value>)\",\n          waiting: \"hsl(var(--status-waiting) / <alpha-value>)\",\n          completed: \"hsl(var(--status-completed) / <alpha-value>)\",\n        },\n        success: {\n          DEFAULT: \"hsl(var(--success) / <alpha-value>)\",\n          foreground: \"hsl(var(--success-foreground) / <alpha-value>)\",\n          border: \"var(--success-border)\",\n        },\n        warning: {\n          DEFAULT: \"hsl(var(--warning) / <alpha-value>)\",\n          foreground: \"hsl(var(--warning-foreground) / <alpha-value>)\",\n          border: \"var(--warning-border)\",\n        },\n        info: {\n          DEFAULT: \"hsl(var(--info) / <alpha-value>)\",\n          foreground: \"hsl(var(--info-foreground) / <alpha-value>)\",\n          border: \"var(--info-border)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4913},"server/models/User.ts":{"content":"import mongoose from 'mongoose';\n\nconst userSchema = new mongoose.Schema({\n  employeeId: { type: String, unique: true, sparse: true },\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  mobileNumber: { type: String, required: true, unique: true },\n  passwordHash: { type: String, required: true },\n  role: { \n    type: String, \n    enum: ['Admin', 'Manager', 'Inventory Manager', 'Sales Executive', 'HR Manager', 'Service Staff'],\n    default: 'Service Staff'\n  },\n  isActive: { type: Boolean, default: true },\n  department: { type: String },\n  salary: { type: Number },\n  joiningDate: { type: Date, default: Date.now },\n  panNumber: { type: String },\n  aadharNumber: { type: String },\n  photo: { type: String },\n  documents: [{ type: String }],\n}, { timestamps: true });\n\nexport const User = mongoose.models.User || mongoose.model('User', userSchema);\n","size_bytes":903},"server/create-users.ts":{"content":"import { connectDB } from './db';\nimport { User } from './models/User';\n\nasync function createDefaultUsers() {\n  try {\n    await connectDB();\n    console.log('ℹ️  User creation script');\n    console.log('Users are now managed directly in the database.');\n    console.log('Please use the database directly or the admin UI to manage users.\\n');\n    \n    const userCount = await User.countDocuments();\n    console.log(`Current user count: ${userCount}`);\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Error:', error);\n    process.exit(1);\n  }\n}\n\ncreateDefaultUsers();\n","size_bytes":592},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/scripts/seed-vehicle-parts.ts":{"content":"import { connectDB } from '../db';\nimport { Product } from '../models/Product';\nimport { VEHICLE_DATA } from '../../shared/vehicleData';\n\nasync function seedVehicleParts() {\n  try {\n    await connectDB();\n    console.log('🌱 Starting to seed vehicle parts products...\\n');\n\n    let addedCount = 0;\n    let updatedCount = 0;\n    let skippedCount = 0;\n\n    const partsByNameAndPrice = new Map<string, {\n      name: string;\n      category: string;\n      price: number;\n      models: string[];\n    }>();\n\n    for (const brand of VEHICLE_DATA) {\n      for (const model of brand.models) {\n        const modelFullName = `${brand.name} ${model.name}`;\n        \n        for (const part of model.parts) {\n          const price = part.price || 1000;\n          const partKey = `${part.name.toLowerCase()}_${price}`;\n          \n          if (partsByNameAndPrice.has(partKey)) {\n            const existingPart = partsByNameAndPrice.get(partKey)!;\n            if (!existingPart.models.includes(modelFullName)) {\n              existingPart.models.push(modelFullName);\n            }\n          } else {\n            partsByNameAndPrice.set(partKey, {\n              name: part.name,\n              category: part.category,\n              price: price,\n              models: [modelFullName],\n            });\n          }\n        }\n      }\n    }\n\n    console.log(`📊 Found ${partsByNameAndPrice.size} unique part-price combinations across all vehicle models\\n`);\n\n    for (const partData of Array.from(partsByNameAndPrice.values())) {\n      const existing = await Product.findOne({ \n        name: partData.name,\n        sellingPrice: partData.price\n      });\n\n      if (existing) {\n        const modelsChanged = \n          JSON.stringify(existing.modelCompatibility.sort()) !== JSON.stringify(partData.models.sort());\n\n        if (modelsChanged) {\n          existing.modelCompatibility = partData.models;\n          await existing.save();\n          \n          console.log(`🔄 Updated: ${partData.name} @ ₹${partData.price}`);\n          console.log(`   Compatible with ${partData.models.length} vehicle models`);\n          updatedCount++;\n        } else {\n          skippedCount++;\n        }\n        continue;\n      }\n\n      const sellingPrice = partData.price;\n      const mrp = sellingPrice + Math.floor(sellingPrice * 0.2);\n\n      const product = await Product.create({\n        name: partData.name,\n        category: partData.category,\n        brand: 'Mauli Auto Parts',\n        modelCompatibility: partData.models,\n        warranty: partData.category === 'Maintenance' ? '1 month' : \n                 partData.category === 'Electronics' ? '1 year' : '6 months',\n        mrp: mrp,\n        sellingPrice: sellingPrice,\n        discount: 0,\n        stockQty: Math.floor(Math.random() * 50) + 20,\n        minStockLevel: 10,\n        barcode: `VP${Date.now()}${Math.floor(Math.random() * 10000)}`,\n        images: [],\n        warehouseLocation: 'Main Warehouse',\n      });\n\n      console.log(`✅ Added: ${product.name} @ ₹${sellingPrice}, MRP: ₹${mrp}`);\n      console.log(`   Compatible with ${partData.models.length} vehicle models`);\n      addedCount++;\n    }\n\n    console.log('\\n========================================');\n    console.log('🎉 Seeding Complete!');\n    console.log(`✅ Added: ${addedCount} new products`);\n    console.log(`🔄 Updated: ${updatedCount} existing products`);\n    console.log(`⏭️  Skipped: ${skippedCount} products (already up to date)`);\n    console.log(`📦 Total unique part-price combinations: ${partsByNameAndPrice.size}`);\n    console.log('========================================\\n');\n\n    console.log('Sample vehicle-specific parts:');\n    console.log('- Toyota Innova Crysta: 22 specific parts with unique pricing');\n    console.log('- Maruti Suzuki Brezza: 21 specific parts with unique pricing');\n    console.log('- Maruti Suzuki Grand Vitara: 23 specific parts with unique pricing');\n    console.log('- Mahindra Scorpio Classic: 28 specific parts with unique pricing');\n    console.log('- Hyundai Creta 2025: 31 specific parts with unique pricing');\n    console.log('- Toyota Taisor: 24 specific parts with unique pricing\\n');\n    \n    console.log('Note: Parts with the same name but different prices are stored');\n    console.log('as separate products to preserve model-specific pricing.\\n');\n\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Error seeding vehicle parts:', error);\n    process.exit(1);\n  }\n}\n\nseedVehicleParts();\n","size_bytes":4482},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"LOYALTY_DISCOUNT_SYSTEM.md":{"content":"# Customer Loyalty Discount System\n\n## Overview\nThe AutoParts Pro system now includes an **automatic loyalty discount program** that rewards customers based on their visit frequency and spending. The system automatically tracks customer visits and applies discounts on future purchases.\n\n## How It Works\n\n### Loyalty Tiers\n\nCustomers are automatically assigned to loyalty tiers based on their total number of completed service visits:\n\n| Tier | Visits Required | Discount | Loyalty Points |\n|------|----------------|----------|----------------|\n| **Bronze** | 0-4 visits | 0% | 10 points per visit |\n| **Silver** | 5-9 visits | 5% | 10 points per visit |\n| **Gold** | 10-19 visits | 10% | 10 points per visit |\n| **Platinum** | 20+ visits | 15% | 10 points per visit |\n\n### Automatic Tracking\n\nThe system automatically tracks:\n- ✅ **Visit Count**: Incremented when service visit status changes to \"completed\"\n- ✅ **Total Spent**: Sum of all completed service visits and orders\n- ✅ **Loyalty Points**: Calculated as visit count × 10\n- ✅ **Tier Upgrades**: Automatic tier calculation and update\n- ✅ **Discount Application**: Automatically applied to new orders\n\n## Features\n\n### 1. Automatic Visit Tracking\nWhen a service visit is marked as \"completed\":\n- Customer's visit count is incremented by 1\n- Total spent is updated with the service visit amount\n- Loyalty tier is recalculated\n- Discount percentage is updated based on new tier\n\n### 2. Automatic Order Discounts\nWhen creating an order for a registered customer:\n- System checks customer's loyalty tier\n- If discount available (Silver, Gold, or Platinum):\n  - Discount amount calculated: `(order total × discount %) / 100`\n  - Discount is applied to order\n  - Final total is reduced by discount amount\n- Walk-in customers don't receive discounts\n\n### 3. Digital Customer Card Display\n\nThe loyalty information is beautifully displayed on the customer card with:\n\n#### Visual Loyalty Card\n- **Tier Badge**: Color-coded based on tier (Bronze/Silver/Gold/Platinum)\n- **Discount Badge**: Shows active discount percentage\n- **Points Display**: Current loyalty points earned\n- **Total Spent**: Total amount spent by customer\n- **Visit Count**: Total completed service visits\n\n#### Color Coding\n- **Platinum**: Gradient from slate-400 to slate-600 (Silver-gray)\n- **Gold**: Gradient from yellow-400 to yellow-600\n- **Silver**: Gradient from gray-300 to gray-500\n- **Bronze**: Gradient from orange-400 to orange-600\n\n### 4. Customer List View\nCustomers with active discounts (Silver/Gold/Platinum) show:\n- Loyalty tier badge with discount percentage\n- Example: \"Gold • 10% OFF\"\n- Only displayed for non-Bronze tiers\n\n## Backend Implementation\n\n### Customer Model Updates\n```typescript\n{\n  loyaltyPoints: Number (default: 0)\n  totalSpent: Number (default: 0)\n  visitCount: Number (default: 0)\n  loyaltyTier: String ['Bronze', 'Silver', 'Gold', 'Platinum'] (default: 'Bronze')\n  discountPercentage: Number (default: 0)\n}\n```\n\n### Loyalty Tier Calculation Method\n```typescript\ncalculateLoyaltyTier() {\n  if (visitCount >= 20) -> Platinum (15% discount)\n  else if (visitCount >= 10) -> Gold (10% discount)\n  else if (visitCount >= 5) -> Silver (5% discount)\n  else -> Bronze (0% discount)\n  \n  loyaltyPoints = visitCount × 10\n}\n```\n\n### Service Visit Completion Logic\nWhen a service visit status changes to \"completed\":\n1. Find customer by ID\n2. Increment visit count by 1\n3. Add service visit total to customer's total spent\n4. Recalculate loyalty tier and discount\n5. Save updated customer record\n\n### Order Creation with Discount\nWhen creating an order for a registered customer:\n1. Check if customer has active discount\n2. Calculate discount amount from original total\n3. Create order with discount field populated\n4. Reduce final total by discount amount\n5. Update customer's total spent (after discount applied)\n\n### Order Model Updates\n```typescript\n{\n  discount: Number (default: 0) // Amount discounted from order\n}\n```\n\n## Frontend Implementation\n\n### DigitalCustomerCard Component\nDisplays comprehensive loyalty information:\n- Tier badge with gradient colors\n- Current discount percentage\n- Loyalty points earned\n- Total amount spent\n- Visit count\n- Congratulatory message for active discounts\n\n### Customer List View\nShows loyalty badges for qualifying customers:\n- Badge only shown for Silver/Gold/Platinum tiers\n- Format: \"{Tier} • {Discount}% OFF\"\n- Helps identify valuable customers at a glance\n\n## API Endpoints\n\n### Service Visit Completion\n```\nPATCH /api/service-visits/:id\nBody: { status: \"completed\", ... }\n```\nTriggers loyalty update when status changes to \"completed\"\n\n### Order Creation with Discount\n```\nPOST /api/orders\nBody: { customerId, items, total, ... }\n```\nAutomatically applies customer's loyalty discount if applicable\n\n### Customer Data Retrieval\n```\nGET /api/customers\nGET /api/customers/:id\n```\nReturns customer data including loyalty fields\n\n## Usage Examples\n\n### Example 1: New Customer Journey\n1. **Visit 1-4**: Customer is Bronze tier (0% discount)\n2. **Visit 5**: Automatically upgraded to Silver (5% discount)\n3. **Next order**: 5% discount automatically applied\n4. **Visit 10**: Upgraded to Gold (10% discount)\n5. **Visit 20**: Upgraded to Platinum (15% discount)\n\n### Example 2: Discount Application\n**Customer**: Gold tier (10% discount)\n**Order Total**: ₹10,000\n\nCalculation:\n- Discount: ₹10,000 × 10% = ₹1,000\n- Final Total: ₹10,000 - ₹1,000 = ₹9,000\n- Order saved with discount: ₹1,000\n\n### Example 3: Points Accumulation\n**Customer**: 15 completed visits\n- Loyalty Points: 15 × 10 = 150 points\n- Tier: Gold (10% discount)\n- Points continue to accumulate with each visit\n\n## Business Benefits\n\n### Customer Retention\n- Encourages repeat visits\n- Rewards loyal customers automatically\n- Visible tier progression motivates continued patronage\n\n### Automated Management\n- No manual discount codes needed\n- Automatic tier upgrades\n- Real-time discount application\n\n### Revenue Insights\n- Track total customer lifetime value\n- Identify most valuable customers\n- Monitor loyalty program effectiveness\n\n## Testing the System\n\n### Test Scenario 1: Service Visit Completion\n1. Login as Admin or Service Staff\n2. Create a service visit for a customer\n3. Update visit status to \"completed\"\n4. Check customer card - visit count should increment\n5. If customer reaches tier threshold, tier should upgrade\n\n### Test Scenario 2: Order with Discount\n1. Login as Admin or Sales Executive\n2. Create order for customer with active discount (Silver/Gold/Platinum)\n3. System automatically applies discount\n4. Verify final total is reduced\n5. Check order details - discount field should be populated\n\n### Test Scenario 3: View Customer Loyalty\n1. Navigate to Customers page\n2. Click on any customer card\n3. View digital customer card\n4. Check loyalty tier, discount, and points display\n5. Verify color-coded tier badge\n\n## Future Enhancements (Potential)\n\n- Point redemption system\n- Birthday/anniversary bonus points\n- Referral rewards\n- Tier expiration based on inactivity\n- Special promotions for tier members\n- Email notifications for tier upgrades\n- Printable loyalty cards with QR codes\n\n## Summary\n\nThe loyalty discount system is **fully automated and integrated** into the AutoParts Pro application. Customers are automatically tracked, tiered, and rewarded based on their visit frequency. Discounts are automatically applied to orders, and the entire system requires no manual intervention from staff.\n\n**Key Features:**\n✅ Automatic tier assignment based on visits\n✅ Real-time discount application on orders\n✅ Beautiful visual loyalty cards\n✅ Points and spending tracking\n✅ No manual discount codes needed\n✅ Seamless integration with existing workflows\n","size_bytes":7778},"server/models/Invoice.ts":{"content":"import mongoose from 'mongoose';\n\nconst invoiceItemSchema = new mongoose.Schema({\n  type: { type: String, enum: ['product', 'service'], required: true },\n  productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },\n  name: { type: String, required: true },\n  description: { type: String },\n  quantity: { type: Number, required: true },\n  unitPrice: { type: Number, required: true },\n  total: { type: Number, required: true },\n  hasGst: { type: Boolean, default: false },\n  gstAmount: { type: Number, default: 0 },\n  warrantyId: { type: mongoose.Schema.Types.ObjectId, ref: 'Warranty' },\n  hasWarranty: { type: Boolean, default: false },\n  warrantyCards: [{\n    url: { type: String },\n    filename: { type: String },\n    uploadedAt: { type: Date, default: Date.now },\n  }],\n}, { _id: false });\n\nconst paymentEntrySchema = new mongoose.Schema({\n  amount: { type: Number, required: true },\n  paymentMode: { \n    type: String, \n    enum: ['UPI', 'Cash', 'Card', 'Net Banking', 'Cheque'],\n    required: true \n  },\n  transactionId: { type: String },\n  transactionDate: { type: Date, default: Date.now },\n  notes: { type: String },\n  recordedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n}, { _id: true, timestamps: true });\n\nconst customerDetailsSchema = new mongoose.Schema({\n  referenceCode: { type: String },\n  fullName: { type: String, required: true },\n  mobileNumber: { type: String, required: true },\n  alternativeNumber: { type: String },\n  email: { type: String },\n  address: { type: String },\n  city: { type: String },\n  taluka: { type: String },\n  district: { type: String },\n  state: { type: String },\n  pinCode: { type: String },\n  referralSource: { type: String },\n  isVerified: { type: Boolean },\n  registrationDate: { type: Date },\n}, { _id: false });\n\nconst vehicleDetailsSchema = new mongoose.Schema({\n  vehicleId: { type: String },\n  vehicleNumber: { type: String },\n  vehicleBrand: { type: String },\n  vehicleModel: { type: String },\n  customModel: { type: String },\n  variant: { type: String },\n  color: { type: String },\n  yearOfPurchase: { type: Number },\n  vehiclePhoto: { type: String },\n  isNewVehicle: { type: Boolean },\n  chassisNumber: { type: String },\n  selectedParts: [{ type: String }],\n  vehicleRegistrationDate: { type: Date },\n}, { _id: false });\n\nconst invoiceSchema = new mongoose.Schema({\n  invoiceNumber: { type: String, unique: true },\n  \n  // Related entities (for reference)\n  serviceVisitId: { type: mongoose.Schema.Types.ObjectId, ref: 'ServiceVisit' },\n  orderId: { type: mongoose.Schema.Types.ObjectId, ref: 'Order' },\n  customerId: { type: mongoose.Schema.Types.ObjectId, ref: 'RegistrationCustomer', required: true },\n  \n  // Full customer details embedded in invoice\n  customerDetails: { type: customerDetailsSchema, required: true },\n  \n  // Vehicle details (can be single or multiple)\n  vehicleDetails: [vehicleDetailsSchema],\n  \n  // Items\n  items: [invoiceItemSchema],\n  \n  // Pricing\n  subtotal: { type: Number, required: true },\n  discountType: { type: String, enum: ['percentage', 'fixed', 'none'], default: 'none' },\n  discountValue: { type: Number, default: 0 },\n  discountAmount: { type: Number, default: 0 },\n  couponCode: { type: String },\n  couponId: { type: mongoose.Schema.Types.ObjectId, ref: 'Coupon' },\n  \n  // Tax\n  taxRate: { type: Number, default: 18 }, // GST percentage\n  taxAmount: { type: Number, required: true },\n  \n  // Total\n  totalAmount: { type: Number, required: true },\n  \n  // Payment\n  paymentStatus: { \n    type: String, \n    enum: ['unpaid', 'partial', 'paid'],\n    default: 'unpaid'\n  },\n  paidAmount: { type: Number, default: 0 },\n  dueAmount: { type: Number, required: true },\n  payments: [paymentEntrySchema],\n  \n  // Approval workflow\n  status: { \n    type: String, \n    enum: ['draft', 'pending_approval', 'approved', 'rejected', 'cancelled'],\n    default: 'draft'\n  },\n  approvalStatus: {\n    approvedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n    approvedAt: { type: Date },\n    rejectedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n    rejectedAt: { type: Date },\n    rejectionReason: { type: String },\n  },\n  \n  // Staff\n  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  salesExecutiveId: { type: mongoose.Schema.Types.ObjectId, ref: 'Employee' },\n  \n  // Notifications\n  notificationsSent: {\n    email: { type: Boolean, default: false },\n    whatsapp: { type: Boolean, default: false },\n    emailSentAt: { type: Date },\n    whatsappSentAt: { type: Date },\n  },\n  \n  // PDF\n  pdfPath: { type: String },\n  pdfAccessToken: { type: String },\n  pdfTokenExpiry: { type: Date },\n  \n  // Additional\n  notes: { type: String },\n  terms: { type: String },\n  dueDate: { type: Date },\n  \n}, { timestamps: true });\n\n// Auto-generate invoice number on save\ninvoiceSchema.pre('save', async function(next) {\n  if (!this.invoiceNumber) {\n    const currentYear = new Date().getFullYear();\n    const lastInvoice = await mongoose.model('Invoice').findOne({\n      invoiceNumber: new RegExp(`^INV/${currentYear}/`)\n    }).sort({ createdAt: -1 });\n    \n    let nextNumber = 1;\n    if (lastInvoice && lastInvoice.invoiceNumber) {\n      const lastNumber = parseInt(lastInvoice.invoiceNumber.split('/').pop() || '0');\n      nextNumber = lastNumber + 1;\n    }\n    \n    this.invoiceNumber = `INV/${currentYear}/${String(nextNumber).padStart(4, '0')}`;\n  }\n  next();\n});\n\nexport const Invoice = mongoose.models.Invoice || mongoose.model('Invoice', invoiceSchema);\n","size_bytes":5514},"client/src/pages/Leaves.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Search, Calendar, Edit, Eye, Trash2, Check, X as XIcon } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { format, differenceInDays } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\n\ninterface Leave {\n  _id: string;\n  employeeId: any;\n  leaveType: 'casual' | 'sick' | 'annual' | 'unpaid';\n  startDate: string;\n  endDate: string;\n  reason: string;\n  status: 'pending' | 'approved' | 'rejected';\n  approvedBy?: any;\n  approvalDate?: string;\n  notes?: string;\n}\n\nexport default function Leaves() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [selectedLeave, setSelectedLeave] = useState<Leave | null>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const [formData, setFormData] = useState({\n    employeeId: \"\",\n    leaveType: \"casual\",\n    startDate: \"\",\n    endDate: \"\",\n    reason: \"\",\n    notes: \"\",\n  });\n\n  const { data: leaves = [], isLoading, error, refetch } = useQuery<Leave[]>({\n    queryKey: [\"/api/leaves\"],\n  });\n\n  const { data: employees = [] } = useQuery<any[]>({\n    queryKey: [\"/api/employees\"],\n  });\n\n  const createLeaveMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/leaves', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leaves'] });\n      setIsCreateDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Leave request created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateLeaveMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PATCH', `/api/leaves/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leaves'] });\n      setIsEditDialogOpen(false);\n      setSelectedLeave(null);\n      toast({\n        title: \"Success\",\n        description: \"Leave request updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const approveLeaveMutation = useMutation({\n    mutationFn: async ({ id, approved }: { id: string; approved: boolean }) => {\n      const response = await apiRequest('PATCH', `/api/leaves/${id}`, {\n        status: approved ? 'approved' : 'rejected',\n        approvedBy: user?.id,\n        approvalDate: new Date().toISOString(),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leaves'] });\n      toast({\n        title: \"Success\",\n        description: \"Leave request processed successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteLeaveMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/leaves/${id}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leaves'] });\n      setIsViewDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Leave request deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      employeeId: \"\",\n      leaveType: \"casual\",\n      startDate: \"\",\n      endDate: \"\",\n      reason: \"\",\n      notes: \"\",\n    });\n  };\n\n  const calculateDays = (start: string, end: string) => {\n    if (!start || !end) return 0;\n    return differenceInDays(new Date(end), new Date(start)) + 1;\n  };\n\n  const handleCreateLeave = (e: React.FormEvent) => {\n    e.preventDefault();\n    createLeaveMutation.mutate(formData);\n  };\n\n  const handleEditLeave = (leave: Leave) => {\n    setSelectedLeave(leave);\n    setFormData({\n      employeeId: leave.employeeId?._id || leave.employeeId || \"\",\n      leaveType: leave.leaveType,\n      startDate: leave.startDate ? leave.startDate.split('T')[0] : \"\",\n      endDate: leave.endDate ? leave.endDate.split('T')[0] : \"\",\n      reason: leave.reason || \"\",\n      notes: leave.notes || \"\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateLeave = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedLeave) return;\n    updateLeaveMutation.mutate({\n      id: selectedLeave._id,\n      data: formData,\n    });\n  };\n\n  const handleViewLeave = (leave: Leave) => {\n    setSelectedLeave(leave);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleApproveLeave = (id: string, approved: boolean) => {\n    approveLeaveMutation.mutate({ id, approved });\n  };\n\n  const handleDeleteLeave = (id: string) => {\n    if (confirm('Are you sure you want to delete this leave request?')) {\n      deleteLeaveMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const colors: Record<string, string> = {\n      pending: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400\",\n      approved: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\",\n      rejected: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400\",\n    };\n    return <Badge className={colors[status]} data-testid={`status-${status}`}>\n      {status.charAt(0).toUpperCase() + status.slice(1)}\n    </Badge>;\n  };\n\n  const getLeaveTypeBadge = (type: string) => {\n    const colors: Record<string, string> = {\n      casual: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400\",\n      sick: \"bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-400\",\n      annual: \"bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400\",\n      unpaid: \"bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400\",\n    };\n    return <Badge className={colors[type]}>\n      {type.charAt(0).toUpperCase() + type.slice(1)}\n    </Badge>;\n  };\n\n  const filteredLeaves = leaves.filter((leave: Leave) => {\n    return leave.employeeId?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      leave.leaveType?.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"grid gap-4\">\n          {[...Array(5)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold\">Leave Management</h1>\n        <Card className=\"border-destructive\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <Calendar className=\"h-12 w-12 mx-auto text-destructive mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Failed to load leave requests</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {(error as Error)?.message || 'An error occurred while fetching leave requests'}\n              </p>\n              <Button onClick={() => refetch()}>Retry</Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Leave Management</h1>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-leave\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Request Leave\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Request Leave</DialogTitle>\n              <DialogDescription>\n                Submit a new leave request for an employee\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreateLeave} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"employeeId\">Employee *</Label>\n                <Select\n                  value={formData.employeeId}\n                  onValueChange={(value) => setFormData({ ...formData, employeeId: value })}\n                  required\n                >\n                  <SelectTrigger data-testid=\"select-leave-employee\">\n                    <SelectValue placeholder=\"Select employee\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {employees.map((emp: any) => (\n                      <SelectItem key={emp._id} value={emp._id}>\n                        {emp.name} - {emp.role}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"leaveType\">Leave Type *</Label>\n                <Select\n                  value={formData.leaveType}\n                  onValueChange={(value) => setFormData({ ...formData, leaveType: value })}\n                  required\n                >\n                  <SelectTrigger data-testid=\"select-leave-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"casual\">Casual Leave</SelectItem>\n                    <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                    <SelectItem value=\"annual\">Annual Leave</SelectItem>\n                    <SelectItem value=\"unpaid\">Unpaid Leave</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"startDate\">Start Date *</Label>\n                  <Input\n                    id=\"startDate\"\n                    type=\"date\"\n                    value={formData.startDate}\n                    onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}\n                    required\n                    data-testid=\"input-leave-startdate\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"endDate\">End Date *</Label>\n                  <Input\n                    id=\"endDate\"\n                    type=\"date\"\n                    value={formData.endDate}\n                    onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}\n                    required\n                    data-testid=\"input-leave-enddate\"\n                  />\n                </div>\n              </div>\n\n              {formData.startDate && formData.endDate && (\n                <div className=\"bg-muted p-3 rounded-md\">\n                  <p className=\"text-sm font-medium\">\n                    Total Days: {calculateDays(formData.startDate, formData.endDate)}\n                  </p>\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reason\">Reason *</Label>\n                <Textarea\n                  id=\"reason\"\n                  value={formData.reason}\n                  onChange={(e) => setFormData({ ...formData, reason: e.target.value })}\n                  required\n                  rows={3}\n                  data-testid=\"textarea-leave-reason\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Additional Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                  rows={2}\n                  data-testid=\"textarea-leave-notes\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsCreateDialogOpen(false);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-leave\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createLeaveMutation.isPending}\n                  data-testid=\"button-submit-leave\"\n                >\n                  {createLeaveMutation.isPending ? 'Submitting...' : 'Submit Request'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search leave requests...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10\"\n          data-testid=\"input-search\"\n        />\n      </div>\n\n      {filteredLeaves.length > 0 ? (\n        <div className=\"grid gap-3\">\n          {filteredLeaves.map((leave: Leave) => (\n            <Card key={leave._id} className=\"hover-elevate\" data-testid={`card-leave-${leave._id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1 min-w-0\">\n                    <CardTitle className=\"text-base truncate\">{leave.employeeId?.name || 'N/A'}</CardTitle>\n                    <div className=\"flex gap-1 mt-1.5 flex-wrap\">\n                      {getLeaveTypeBadge(leave.leaveType)}\n                      {getStatusBadge(leave.status)}\n                    </div>\n                  </div>\n                  <Calendar className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-3\">\n                <div className=\"grid grid-cols-2 md:grid-cols-5 gap-3 items-center\">\n                  <div className=\"min-w-0\">\n                    <p className=\"text-xs text-muted-foreground\">Start Date</p>\n                    <p className=\"text-sm font-medium\">{format(new Date(leave.startDate), 'dd MMM yyyy')}</p>\n                  </div>\n                  <div className=\"min-w-0\">\n                    <p className=\"text-xs text-muted-foreground\">End Date</p>\n                    <p className=\"text-sm font-medium\">{format(new Date(leave.endDate), 'dd MMM yyyy')}</p>\n                  </div>\n                  <div className=\"min-w-0\">\n                    <p className=\"text-xs text-muted-foreground\">Days</p>\n                    <p className=\"text-sm font-medium\">{calculateDays(leave.startDate, leave.endDate)} day(s)</p>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() => handleEditLeave(leave)}\n                      disabled={leave.status !== 'pending'}\n                      data-testid={`button-edit-${leave._id}`}\n                      className=\"h-8 px-2\"\n                      aria-label=\"Edit leave request\"\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleViewLeave(leave)}\n                      data-testid={`button-view-${leave._id}`}\n                      className=\"h-8 px-2\"\n                      aria-label=\"View leave details\"\n                    >\n                      <Eye className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex gap-1 justify-end\">\n                    {leave.status === 'pending' && (\n                      <>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"text-green-600 hover:text-green-700 h-8 px-2\"\n                          onClick={() => handleApproveLeave(leave._id, true)}\n                          data-testid={`button-approve-${leave._id}`}\n                          aria-label=\"Approve leave request\"\n                        >\n                          <Check className=\"h-3 w-3\" />\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"text-red-600 hover:text-red-700 h-8 px-2\"\n                          onClick={() => handleApproveLeave(leave._id, false)}\n                          data-testid={`button-reject-${leave._id}`}\n                          aria-label=\"Reject leave request\"\n                        >\n                          <XIcon className=\"h-3 w-3\" />\n                        </Button>\n                      </>\n                    )}\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleDeleteLeave(leave._id)}\n                      data-testid={`button-delete-${leave._id}`}\n                      className=\"h-8 px-2\"\n                      aria-label=\"Delete leave request\"\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n                {leave.reason && (\n                  <div className=\"pt-3 border-t\">\n                    <p className=\"text-xs text-muted-foreground\">Reason</p>\n                    <p className=\"text-sm mt-1 line-clamp-2\">{leave.reason}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : leaves.length > 0 ? (\n        <div className=\"text-center py-12\">\n          <Calendar className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No leave requests match your search criteria</p>\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <Calendar className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No leave requests found.</p>\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Leave Request</DialogTitle>\n            <DialogDescription>\n              Update leave request information\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleUpdateLeave} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-employeeId\">Employee *</Label>\n              <Select\n                value={formData.employeeId}\n                onValueChange={(value) => setFormData({ ...formData, employeeId: value })}\n                required\n              >\n                <SelectTrigger data-testid=\"select-edit-leave-employee\">\n                  <SelectValue placeholder=\"Select employee\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {employees.map((emp: any) => (\n                    <SelectItem key={emp._id} value={emp._id}>\n                      {emp.name} - {emp.role}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-leaveType\">Leave Type *</Label>\n              <Select\n                value={formData.leaveType}\n                onValueChange={(value) => setFormData({ ...formData, leaveType: value })}\n                required\n              >\n                <SelectTrigger data-testid=\"select-edit-leave-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"casual\">Casual Leave</SelectItem>\n                  <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                  <SelectItem value=\"annual\">Annual Leave</SelectItem>\n                  <SelectItem value=\"unpaid\">Unpaid Leave</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-startDate\">Start Date *</Label>\n                <Input\n                  id=\"edit-startDate\"\n                  type=\"date\"\n                  value={formData.startDate}\n                  onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}\n                  required\n                  data-testid=\"input-edit-leave-startdate\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-endDate\">End Date *</Label>\n                <Input\n                  id=\"edit-endDate\"\n                  type=\"date\"\n                  value={formData.endDate}\n                  onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}\n                  required\n                  data-testid=\"input-edit-leave-enddate\"\n                />\n              </div>\n            </div>\n\n            {formData.startDate && formData.endDate && (\n              <div className=\"bg-muted p-3 rounded-md\">\n                <p className=\"text-sm font-medium\">\n                  Total Days: {calculateDays(formData.startDate, formData.endDate)}\n                </p>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-reason\">Reason *</Label>\n              <Textarea\n                id=\"edit-reason\"\n                value={formData.reason}\n                onChange={(e) => setFormData({ ...formData, reason: e.target.value })}\n                required\n                rows={3}\n                data-testid=\"textarea-edit-leave-reason\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-notes\">Additional Notes</Label>\n              <Textarea\n                id=\"edit-notes\"\n                value={formData.notes}\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                rows={2}\n                data-testid=\"textarea-edit-leave-notes\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditDialogOpen(false)}\n                data-testid=\"button-cancel-edit-leave\"\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateLeaveMutation.isPending} data-testid=\"button-submit-edit-leave\">\n                {updateLeaveMutation.isPending ? 'Updating...' : 'Update Request'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Leave Request Details</DialogTitle>\n          </DialogHeader>\n          {selectedLeave && (\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-xl font-semibold\">{selectedLeave.employeeId?.name || 'N/A'}</h3>\n                <div className=\"flex gap-2 mt-2\">\n                  {getLeaveTypeBadge(selectedLeave.leaveType)}\n                  {getStatusBadge(selectedLeave.status)}\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Start Date</p>\n                  <p className=\"text-sm font-medium\">{format(new Date(selectedLeave.startDate), 'dd MMM yyyy')}</p>\n                </div>\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">End Date</p>\n                  <p className=\"text-sm font-medium\">{format(new Date(selectedLeave.endDate), 'dd MMM yyyy')}</p>\n                </div>\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Total Days</p>\n                  <p className=\"text-sm font-medium\">{calculateDays(selectedLeave.startDate, selectedLeave.endDate)} day(s)</p>\n                </div>\n                {selectedLeave.approvedBy && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Approved By</p>\n                    <p className=\"text-sm font-medium\">{selectedLeave.approvedBy?.name || 'N/A'}</p>\n                  </div>\n                )}\n                {selectedLeave.approvalDate && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Approval Date</p>\n                    <p className=\"text-sm font-medium\">{format(new Date(selectedLeave.approvalDate), 'dd MMM yyyy')}</p>\n                  </div>\n                )}\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Reason</p>\n                <p className=\"text-sm mt-1\">{selectedLeave.reason}</p>\n              </div>\n              {selectedLeave.notes && (\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Additional Notes</p>\n                  <p className=\"text-sm mt-1\">{selectedLeave.notes}</p>\n                </div>\n              )}\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)} data-testid=\"button-close-view-leave\">\n                  Close\n                </Button>\n                <Button variant=\"destructive\" onClick={() => handleDeleteLeave(selectedLeave._id)} data-testid=\"button-delete-view-leave\">\n                  Delete Request\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":27752},"client/src/pages/Tasks.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Search, CheckSquare, Edit, Eye, Trash2 } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\n\ninterface Task {\n  _id: string;\n  title: string;\n  description: string;\n  assignedTo: any;\n  assignedBy: any;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  dueDate: string;\n  completedDate?: string;\n  notes?: string;\n}\n\nexport default function Tasks() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [selectedTask, setSelectedTask] = useState<Task | null>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    assignedTo: \"\",\n    priority: \"medium\",\n    status: \"pending\",\n    dueDate: \"\",\n    notes: \"\",\n  });\n\n  const { data: tasks = [], isLoading, error, refetch } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: employees = [] } = useQuery<any[]>({\n    queryKey: [\"/api/employees\"],\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/tasks', { ...data, assignedBy: user?.id });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      setIsCreateDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Task created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PATCH', `/api/tasks/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      setIsEditDialogOpen(false);\n      setSelectedTask(null);\n      toast({\n        title: \"Success\",\n        description: \"Task updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/tasks/${id}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      setIsViewDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Task deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      assignedTo: \"\",\n      priority: \"medium\",\n      status: \"pending\",\n      dueDate: \"\",\n      notes: \"\",\n    });\n  };\n\n  const handleCreateTask = (e: React.FormEvent) => {\n    e.preventDefault();\n    createTaskMutation.mutate(formData);\n  };\n\n  const handleEditTask = (task: Task) => {\n    setSelectedTask(task);\n    setFormData({\n      title: task.title,\n      description: task.description || \"\",\n      assignedTo: task.assignedTo?._id || task.assignedTo || \"\",\n      priority: task.priority,\n      status: task.status,\n      dueDate: task.dueDate ? task.dueDate.split('T')[0] : \"\",\n      notes: task.notes || \"\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateTask = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedTask) return;\n    updateTaskMutation.mutate({\n      id: selectedTask._id,\n      data: formData,\n    });\n  };\n\n  const handleViewTask = (task: Task) => {\n    setSelectedTask(task);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleDeleteTask = (id: string) => {\n    if (confirm('Are you sure you want to delete this task?')) {\n      deleteTaskMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      pending: \"secondary\",\n      in_progress: \"default\",\n      completed: \"default\",\n      cancelled: \"destructive\",\n    };\n    const colors: Record<string, string> = {\n      pending: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400\",\n      in_progress: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400\",\n      completed: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\",\n      cancelled: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400\",\n    };\n    return <Badge variant={variants[status] || \"outline\"} className={colors[status]} data-testid={`status-${status}`}>\n      {status.replace('_', ' ').charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}\n    </Badge>;\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const colors: Record<string, string> = {\n      urgent: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400\",\n      high: \"bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-400\",\n      medium: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400\",\n      low: \"bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400\",\n    };\n    return <Badge className={colors[priority]} data-testid={`priority-${priority}`}>\n      {priority.charAt(0).toUpperCase() + priority.slice(1)}\n    </Badge>;\n  };\n\n  const filteredTasks = tasks.filter((task: Task) => {\n    return task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      task.assignedTo?.name?.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"grid gap-4\">\n          {[...Array(5)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold\">Tasks</h1>\n        <Card className=\"border-destructive\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <CheckSquare className=\"h-12 w-12 mx-auto text-destructive mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Failed to load tasks</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {(error as Error)?.message || 'An error occurred while fetching tasks'}\n              </p>\n              <Button onClick={() => refetch()}>Retry</Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Tasks</h1>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-task\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Task\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create New Task</DialogTitle>\n              <DialogDescription>\n                Assign a new task to an employee\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreateTask} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Title *</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  required\n                  data-testid=\"input-task-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  rows={3}\n                  data-testid=\"textarea-task-description\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"assignedTo\">Assign To *</Label>\n                  <Select\n                    value={formData.assignedTo}\n                    onValueChange={(value) => setFormData({ ...formData, assignedTo: value })}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-task-assignee\">\n                      <SelectValue placeholder=\"Select employee\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {employees.map((emp: any) => (\n                        <SelectItem key={emp._id} value={emp._id}>\n                          {emp.name} - {emp.role}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"dueDate\">Due Date *</Label>\n                  <Input\n                    id=\"dueDate\"\n                    type=\"date\"\n                    value={formData.dueDate}\n                    onChange={(e) => setFormData({ ...formData, dueDate: e.target.value })}\n                    required\n                    data-testid=\"input-task-duedate\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"priority\">Priority *</Label>\n                  <Select\n                    value={formData.priority}\n                    onValueChange={(value) => setFormData({ ...formData, priority: value })}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-task-priority\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select\n                    value={formData.status}\n                    onValueChange={(value) => setFormData({ ...formData, status: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-task-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                  rows={2}\n                  data-testid=\"textarea-task-notes\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsCreateDialogOpen(false);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-task\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createTaskMutation.isPending}\n                  data-testid=\"button-submit-task\"\n                >\n                  {createTaskMutation.isPending ? 'Creating...' : 'Create Task'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search tasks...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10\"\n          data-testid=\"input-search\"\n        />\n      </div>\n\n      {filteredTasks.length > 0 ? (\n        <div className=\"grid gap-3\">\n          {filteredTasks.map((task: Task) => (\n            <Card key={task._id} className=\"hover-elevate\" data-testid={`card-task-${task._id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1 min-w-0\">\n                    <CardTitle className=\"text-base truncate\">{task.title}</CardTitle>\n                    <p className=\"text-xs text-muted-foreground mt-1 line-clamp-1\">{task.description}</p>\n                  </div>\n                  <CheckSquare className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 items-center\">\n                  <div className=\"min-w-0\">\n                    <p className=\"text-xs text-muted-foreground\">Assigned To</p>\n                    <p className=\"text-sm font-medium truncate\">{task.assignedTo?.name || 'N/A'}</p>\n                  </div>\n                  <div className=\"min-w-0\">\n                    <p className=\"text-xs text-muted-foreground\">Due Date</p>\n                    <p className=\"text-sm font-medium\">{format(new Date(task.dueDate), 'dd MMM yyyy')}</p>\n                  </div>\n                  <div className=\"flex gap-1 flex-wrap\">\n                    {getPriorityBadge(task.priority)}\n                    {getStatusBadge(task.status)}\n                  </div>\n                  <div className=\"flex gap-1 justify-end\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() => handleEditTask(task)}\n                      data-testid={`button-edit-${task._id}`}\n                      className=\"h-8 px-2\"\n                      aria-label=\"Edit task\"\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleViewTask(task)}\n                      data-testid={`button-view-${task._id}`}\n                      className=\"h-8 px-2\"\n                      aria-label=\"View task details\"\n                    >\n                      <Eye className=\"h-3 w-3\" />\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleDeleteTask(task._id)}\n                      data-testid={`button-delete-${task._id}`}\n                      className=\"h-8 px-2\"\n                      aria-label=\"Delete task\"\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : tasks.length > 0 ? (\n        <div className=\"text-center py-12\">\n          <CheckSquare className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No tasks match your search criteria</p>\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <CheckSquare className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No tasks found. Create your first task to get started.</p>\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Task</DialogTitle>\n            <DialogDescription>\n              Update task information\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleUpdateTask} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-title\">Title *</Label>\n              <Input\n                id=\"edit-title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                required\n                data-testid=\"input-edit-task-title\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-description\">Description</Label>\n              <Textarea\n                id=\"edit-description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                rows={3}\n                data-testid=\"textarea-edit-task-description\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-assignedTo\">Assign To *</Label>\n                <Select\n                  value={formData.assignedTo}\n                  onValueChange={(value) => setFormData({ ...formData, assignedTo: value })}\n                  required\n                >\n                  <SelectTrigger data-testid=\"select-edit-task-assignee\">\n                    <SelectValue placeholder=\"Select employee\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {employees.map((emp: any) => (\n                      <SelectItem key={emp._id} value={emp._id}>\n                        {emp.name} - {emp.role}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-dueDate\">Due Date *</Label>\n                <Input\n                  id=\"edit-dueDate\"\n                  type=\"date\"\n                  value={formData.dueDate}\n                  onChange={(e) => setFormData({ ...formData, dueDate: e.target.value })}\n                  required\n                  data-testid=\"input-edit-task-duedate\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-priority\">Priority *</Label>\n                <Select\n                  value={formData.priority}\n                  onValueChange={(value) => setFormData({ ...formData, priority: value })}\n                  required\n                >\n                  <SelectTrigger data-testid=\"select-edit-task-priority\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"high\">High</SelectItem>\n                    <SelectItem value=\"urgent\">Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-status\">Status</Label>\n                <Select\n                  value={formData.status}\n                  onValueChange={(value) => setFormData({ ...formData, status: value })}\n                >\n                  <SelectTrigger data-testid=\"select-edit-task-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-notes\">Notes</Label>\n              <Textarea\n                id=\"edit-notes\"\n                value={formData.notes}\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                rows={2}\n                data-testid=\"textarea-edit-task-notes\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditDialogOpen(false)}\n                data-testid=\"button-cancel-edit-task\"\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateTaskMutation.isPending} data-testid=\"button-submit-edit-task\">\n                {updateTaskMutation.isPending ? 'Updating...' : 'Update Task'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Task Details</DialogTitle>\n          </DialogHeader>\n          {selectedTask && (\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-xl font-semibold\">{selectedTask.title}</h3>\n                <p className=\"text-muted-foreground mt-1\">{selectedTask.description}</p>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Assigned To</p>\n                  <p className=\"text-sm font-medium\">{selectedTask.assignedTo?.name || 'N/A'}</p>\n                </div>\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Assigned By</p>\n                  <p className=\"text-sm font-medium\">{selectedTask.assignedBy?.name || 'N/A'}</p>\n                </div>\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Priority</p>\n                  <div className=\"mt-1\">{getPriorityBadge(selectedTask.priority)}</div>\n                </div>\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Status</p>\n                  <div className=\"mt-1\">{getStatusBadge(selectedTask.status)}</div>\n                </div>\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Due Date</p>\n                  <p className=\"text-sm font-medium\">{format(new Date(selectedTask.dueDate), 'dd MMM yyyy')}</p>\n                </div>\n                {selectedTask.completedDate && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Completed Date</p>\n                    <p className=\"text-sm font-medium\">{format(new Date(selectedTask.completedDate), 'dd MMM yyyy')}</p>\n                  </div>\n                )}\n              </div>\n              {selectedTask.notes && (\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Notes</p>\n                  <p className=\"text-sm mt-1\">{selectedTask.notes}</p>\n                </div>\n              )}\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)} data-testid=\"button-close-view-task\">\n                  Close\n                </Button>\n                <Button variant=\"destructive\" onClick={() => handleDeleteTask(selectedTask._id)} data-testid=\"button-delete-view-task\">\n                  Delete Task\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":25975},"server/models/InventoryTransaction.ts":{"content":"import mongoose from 'mongoose';\n\nconst inventoryTransactionSchema = new mongoose.Schema({\n  productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },\n  type: { type: String, enum: ['IN', 'OUT', 'RETURN', 'ADJUSTMENT'], required: true },\n  quantity: { type: Number, required: true },\n  reason: { type: String, required: true },\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  date: { type: Date, default: Date.now },\n  \n  // Supply details\n  supplierId: { type: mongoose.Schema.Types.ObjectId, ref: 'Supplier' },\n  purchaseOrderId: { type: mongoose.Schema.Types.ObjectId, ref: 'PurchaseOrder' },\n  batchNumber: { type: String },\n  unitCost: { type: Number },\n  \n  // Stock details\n  previousStock: { type: Number },\n  newStock: { type: Number },\n  warehouseLocation: { type: String },\n  \n  // Return details\n  returnId: { type: mongoose.Schema.Types.ObjectId, ref: 'ProductReturn' },\n  \n  // Additional notes\n  notes: { type: String },\n}, { timestamps: true });\n\nexport const InventoryTransaction = mongoose.models.InventoryTransaction || \n  mongoose.model('InventoryTransaction', inventoryTransactionSchema);\n","size_bytes":1156},"server/models/Leave.ts":{"content":"import mongoose from 'mongoose';\n\nconst leaveSchema = new mongoose.Schema({\n  employeeId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  leaveType: { \n    type: String, \n    enum: ['casual', 'sick', 'annual', 'unpaid'],\n    required: true \n  },\n  startDate: { type: Date, required: true },\n  endDate: { type: Date, required: true },\n  reason: { type: String, required: true },\n  status: { \n    type: String, \n    enum: ['pending', 'approved', 'rejected'],\n    default: 'pending'\n  },\n  approvedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  approvalDate: { type: Date },\n  notes: { type: String },\n}, { timestamps: true });\n\nexport const Leave = mongoose.models.Leave || mongoose.model('Leave', leaveSchema);\n","size_bytes":733},"client/src/pages/ForgotPassword.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { ArrowLeft, Smartphone, KeyRound, CheckCircle } from 'lucide-react';\nimport logoImage from '@assets/image_1760164042662.png';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function ForgotPassword() {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [step, setStep] = useState<'mobile' | 'otp' | 'password'>('mobile');\n  const [mobileNumber, setMobileNumber] = useState('');\n  const [otpInput, setOtpInput] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [maskedMobile, setMaskedMobile] = useState('');\n  const [selectedRole, setSelectedRole] = useState('');\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const role = params.get('role');\n    if (role) {\n      setSelectedRole(role);\n    } else {\n      setLocation('/select-role');\n    }\n  }, [location, setLocation]);\n\n  const handleMobileSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest('POST', '/api/auth/forgot-password', {\n        mobileNumber,\n        role: selectedRole,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to send OTP');\n      }\n\n      const masked = mobileNumber.replace(/(\\d{2})(\\d+)(\\d{2})/, '$1******$3');\n      setMaskedMobile(masked);\n      setStep('otp');\n      toast({\n        title: 'OTP Sent',\n        description: `OTP sent to your WhatsApp number ${masked}`,\n      });\n    } catch (error: any) {\n      toast({\n        title: 'Failed to send OTP',\n        description: error.message || 'Please check your mobile number and try again',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOtpSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest('POST', '/api/auth/verify-reset-otp', {\n        otp: otpInput,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Invalid OTP');\n      }\n\n      setStep('password');\n      toast({\n        title: 'OTP Verified',\n        description: 'You can now set a new password',\n      });\n    } catch (error: any) {\n      toast({\n        title: 'Verification Failed',\n        description: error.message || 'Invalid OTP. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePasswordSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (newPassword.length < 6) {\n      toast({\n        title: 'Password too short',\n        description: 'Password must be at least 6 characters long',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (newPassword !== confirmPassword) {\n      toast({\n        title: 'Passwords do not match',\n        description: 'Please make sure both passwords are the same',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest('POST', '/api/auth/reset-password', {\n        newPassword,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to reset password');\n      }\n\n      toast({\n        title: 'Password Reset Successful',\n        description: 'You can now login with your new password',\n      });\n      \n      setTimeout(() => {\n        setLocation(`/login?role=${encodeURIComponent(selectedRole)}`);\n      }, 1500);\n    } catch (error: any) {\n      toast({\n        title: 'Reset Failed',\n        description: error.message || 'Failed to reset password',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleBack = () => {\n    if (step === 'otp') {\n      setStep('mobile');\n      setOtpInput('');\n    } else if (step === 'password') {\n      setStep('otp');\n      setNewPassword('');\n      setConfirmPassword('');\n    } else {\n      setLocation(`/login?role=${encodeURIComponent(selectedRole)}`);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\" data-testid=\"card-forgot-password\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center gap-2\">\n              <img src={logoImage} alt=\"Mauli Car World Logo\" className=\"h-8 w-auto\" />\n              <CardTitle data-testid=\"text-title\">Reset Password</CardTitle>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleBack}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-1\" />\n              Back\n            </Button>\n          </div>\n          <CardDescription data-testid=\"text-description\">\n            {step === 'mobile' && `Reset password for ${selectedRole}`}\n            {step === 'otp' && 'Enter the OTP sent to your WhatsApp'}\n            {step === 'password' && 'Set your new password'}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {step === 'mobile' && (\n            <form onSubmit={handleMobileSubmit} className=\"space-y-4\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"h-16 w-16 rounded-full bg-orange-100 dark:bg-orange-900/20 flex items-center justify-center\">\n                  <Smartphone className=\"h-8 w-8 text-orange-600 dark:text-orange-400\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"mobile\" data-testid=\"label-mobile\">Mobile Number</Label>\n                <Input\n                  id=\"mobile\"\n                  type=\"tel\"\n                  placeholder=\"Enter your registered mobile number\"\n                  value={mobileNumber}\n                  onChange={(e) => setMobileNumber(e.target.value.replace(/\\D/g, ''))}\n                  required\n                  maxLength={10}\n                  pattern=\"[0-9]{10}\"\n                  data-testid=\"input-mobile\"\n                />\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-mobile-info\">\n                  Enter your 10-digit mobile number registered with your account\n                </p>\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading || mobileNumber.length !== 10}\n                data-testid=\"button-send-otp\"\n              >\n                {isLoading ? 'Sending OTP...' : 'Send OTP'}\n              </Button>\n            </form>\n          )}\n\n          {step === 'otp' && (\n            <form onSubmit={handleOtpSubmit} className=\"space-y-4\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"h-16 w-16 rounded-full bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center\">\n                  <KeyRound className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"otp\" data-testid=\"label-otp\">Enter OTP</Label>\n                <Input\n                  id=\"otp\"\n                  type=\"text\"\n                  maxLength={6}\n                  value={otpInput}\n                  onChange={(e) => setOtpInput(e.target.value.replace(/\\D/g, ''))}\n                  placeholder=\"Enter 6-digit OTP\"\n                  className=\"text-center text-2xl tracking-widest\"\n                  required\n                  data-testid=\"input-otp\"\n                />\n                <p className=\"text-sm text-center text-muted-foreground\" data-testid=\"text-otp-info\">\n                  OTP sent to {maskedMobile}\n                </p>\n                <p className=\"text-xs text-center text-orange-600 dark:text-orange-400\" data-testid=\"text-whatsapp-info\">\n                  Check your WhatsApp for the OTP message\n                </p>\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading || otpInput.length !== 6}\n                data-testid=\"button-verify-otp\"\n              >\n                {isLoading ? 'Verifying...' : 'Verify OTP'}\n              </Button>\n            </form>\n          )}\n\n          {step === 'password' && (\n            <form onSubmit={handlePasswordSubmit} className=\"space-y-4\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"h-16 w-16 rounded-full bg-green-100 dark:bg-green-900/20 flex items-center justify-center\">\n                  <CheckCircle className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"new-password\" data-testid=\"label-new-password\">New Password</Label>\n                <Input\n                  id=\"new-password\"\n                  type=\"password\"\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  placeholder=\"Enter new password\"\n                  required\n                  minLength={6}\n                  data-testid=\"input-new-password\"\n                />\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-password-requirement\">\n                  Password must be at least 6 characters long\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirm-password\" data-testid=\"label-confirm-password\">Confirm Password</Label>\n                <Input\n                  id=\"confirm-password\"\n                  type=\"password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  placeholder=\"Confirm new password\"\n                  required\n                  minLength={6}\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading || newPassword.length < 6 || confirmPassword.length < 6}\n                data-testid=\"button-reset-password\"\n              >\n                {isLoading ? 'Resetting Password...' : 'Reset Password'}\n              </Button>\n            </form>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11163},"server/scripts/fix-invalid-references.ts":{"content":"import { connectDB } from '../db';\nimport { Task } from '../models/Task';\nimport { Leave } from '../models/Leave';\nimport { Employee } from '../models/Employee';\n\nasync function fixInvalidReferences() {\n  try {\n    await connectDB();\n    console.log('🔧 Fixing invalid employee references...\\n');\n    \n    // Get the first valid employee\n    const validEmployee = await Employee.findOne();\n    \n    if (!validEmployee) {\n      console.log('❌ No employees found in database. Please create an employee first.');\n      process.exit(1);\n    }\n    \n    console.log(`✅ Found valid employee: ${validEmployee.name} (ID: ${validEmployee._id})\\n`);\n    \n    // Fix tasks with invalid assignedTo\n    const tasks = await Task.find({}).lean();\n    console.log(`📋 Checking ${tasks.length} tasks...`);\n    \n    let tasksFixed = 0;\n    for (const task of tasks) {\n      const employeeExists = await Employee.findById(task.assignedTo);\n      if (!employeeExists) {\n        await Task.updateOne(\n          { _id: task._id },\n          { $set: { assignedTo: validEmployee._id } }\n        );\n        tasksFixed++;\n        console.log(`  ✓ Fixed task: ${task.title}`);\n      }\n    }\n    console.log(`Fixed ${tasksFixed} tasks\\n`);\n    \n    // Fix leaves with invalid employeeId\n    const leaves = await Leave.find({}).lean();\n    console.log(`📋 Checking ${leaves.length} leaves...`);\n    \n    let leavesFixed = 0;\n    for (const leave of leaves) {\n      const employeeExists = await Employee.findById(leave.employeeId);\n      if (!employeeExists) {\n        await Leave.updateOne(\n          { _id: leave._id },\n          { $set: { employeeId: validEmployee._id } }\n        );\n        leavesFixed++;\n        console.log(`  ✓ Fixed leave: ${leave._id}`);\n      }\n    }\n    console.log(`Fixed ${leavesFixed} leaves\\n`);\n    \n    console.log('✨ All invalid references have been fixed!');\n    console.log(`\\nSummary:`);\n    console.log(`  - Tasks fixed: ${tasksFixed}`);\n    console.log(`  - Leaves fixed: ${leavesFixed}`);\n    console.log(`  - All now point to: ${validEmployee.name}`);\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Error:', error);\n    process.exit(1);\n  }\n}\n\nfixInvalidReferences();\n","size_bytes":2217},"client/src/components/ActivityFeed.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Activity, \n  Package, \n  ShoppingCart, \n  Users, \n  Warehouse, \n  FileText,\n  ClipboardList,\n  Building2,\n  Calendar,\n  MessageSquare,\n  AlertCircle\n} from \"lucide-react\";\nimport { formatDistance } from \"date-fns\";\n\ninterface ActivityLog {\n  _id: string;\n  userName: string;\n  userRole: string;\n  action: string;\n  resource: string;\n  description: string;\n  createdAt: string;\n}\n\nconst getActionColor = (action: string) => {\n  switch (action) {\n    case 'create':\n      return 'bg-green-500/10 text-green-500 border-green-500/20';\n    case 'update':\n      return 'bg-blue-500/10 text-blue-500 border-blue-500/20';\n    case 'delete':\n      return 'bg-red-500/10 text-red-500 border-red-500/20';\n    case 'login':\n      return 'bg-purple-500/10 text-purple-500 border-purple-500/20';\n    case 'approve':\n      return 'bg-teal-500/10 text-teal-500 border-teal-500/20';\n    case 'reject':\n      return 'bg-orange-500/10 text-orange-500 border-orange-500/20';\n    case 'complete':\n      return 'bg-emerald-500/10 text-emerald-500 border-emerald-500/20';\n    default:\n      return 'bg-gray-500/10 text-gray-500 border-gray-500/20';\n  }\n};\n\nconst getResourceIcon = (resource: string) => {\n  const iconClass = \"h-4 w-4\";\n  switch (resource) {\n    case 'product':\n      return <Package className={iconClass} />;\n    case 'order':\n      return <ShoppingCart className={iconClass} />;\n    case 'customer':\n      return <Users className={iconClass} />;\n    case 'employee':\n      return <Users className={iconClass} />;\n    case 'inventory':\n      return <Warehouse className={iconClass} />;\n    case 'supplier':\n      return <Building2 className={iconClass} />;\n    case 'purchase_order':\n      return <FileText className={iconClass} />;\n    case 'service_visit':\n      return <ClipboardList className={iconClass} />;\n    case 'attendance':\n      return <Calendar className={iconClass} />;\n    case 'communication':\n      return <MessageSquare className={iconClass} />;\n    default:\n      return <Activity className={iconClass} />;\n  }\n};\n\nconst getRoleBadgeColor = (role: string) => {\n  switch (role) {\n    case 'Admin':\n      return 'bg-purple-500/10 text-purple-500 border-purple-500/20';\n    case 'Inventory Manager':\n      return 'bg-blue-500/10 text-blue-500 border-blue-500/20';\n    case 'Sales Executive':\n      return 'bg-green-500/10 text-green-500 border-green-500/20';\n    case 'HR Manager':\n      return 'bg-orange-500/10 text-orange-500 border-orange-500/20';\n    case 'Service Staff':\n      return 'bg-teal-500/10 text-teal-500 border-teal-500/20';\n    default:\n      return 'bg-gray-500/10 text-gray-500 border-gray-500/20';\n  }\n};\n\nexport function ActivityFeed({ limit = 10 }: { limit?: number }) {\n  const { data: activities = [], isLoading, error } = useQuery<ActivityLog[]>({\n    queryKey: [`/api/activity-logs?limit=${limit}`],\n    refetchInterval: 30000,\n  });\n\n  if (isLoading) {\n    return (\n      <Card data-testid=\"card-activity-feed\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5\" />\n            Recent Activity\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <div key={i} className=\"flex items-start gap-3\">\n                <Skeleton className=\"h-10 w-10 rounded-full\" />\n                <div className=\"flex-1 space-y-2\">\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-3 w-1/2\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card data-testid=\"card-activity-feed\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5\" />\n            Recent Activity\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n            <AlertCircle className=\"h-12 w-12 text-destructive mb-3\" />\n            <p className=\"text-destructive font-medium mb-1\">Failed to load activities</p>\n            <p className=\"text-muted-foreground text-sm\">\n              {error instanceof Error ? error.message : 'An error occurred while loading activities'}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (activities.length === 0) {\n    return (\n      <Card data-testid=\"card-activity-feed\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5\" />\n            Recent Activity\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n            <AlertCircle className=\"h-12 w-12 text-muted-foreground mb-3\" />\n            <p className=\"text-muted-foreground\">No activities recorded yet</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"card-activity-feed\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Activity className=\"h-5 w-5\" />\n          Recent Activity\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"h-[400px] pr-4\">\n          <div className=\"space-y-4\">\n            {activities.map((activity) => (\n              <div\n                key={activity._id}\n                className=\"flex items-start gap-3 pb-4 border-b last:border-0 last:pb-0\"\n                data-testid={`activity-${activity._id}`}\n              >\n                <div className=\"flex-shrink-0 mt-1\">\n                  <div className=\"h-10 w-10 rounded-full bg-muted flex items-center justify-center\">\n                    {getResourceIcon(activity.resource)}\n                  </div>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-start justify-between gap-2 flex-wrap\">\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium truncate\" data-testid={`text-description-${activity._id}`}>\n                        {activity.description}\n                      </p>\n                      <div className=\"flex items-center gap-2 mt-1 flex-wrap\">\n                        <Badge \n                          variant=\"outline\" \n                          className={`text-xs ${getRoleBadgeColor(activity.userRole)}`}\n                          data-testid={`badge-role-${activity._id}`}\n                        >\n                          {activity.userName}\n                        </Badge>\n                        <Badge \n                          variant=\"outline\" \n                          className={`text-xs ${getActionColor(activity.action)}`}\n                          data-testid={`badge-action-${activity._id}`}\n                        >\n                          {activity.action}\n                        </Badge>\n                      </div>\n                    </div>\n                    <span className=\"text-xs text-muted-foreground whitespace-nowrap\" data-testid={`text-time-${activity._id}`}>\n                      {formatDistance(new Date(activity.createdAt), new Date(), { addSuffix: true })}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7854},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport fs from \"fs\";\nimport { connectDB } from \"./db\";\nimport { Product } from \"./models/Product\";\nimport { Employee } from \"./models/Employee\";\nimport { ServiceVisit } from \"./models/ServiceVisit\";\nimport { Order } from \"./models/Order\";\nimport { InventoryTransaction } from \"./models/InventoryTransaction\";\nimport { ProductReturn } from \"./models/ProductReturn\";\nimport { Notification } from \"./models/Notification\";\nimport { Attendance } from \"./models/Attendance\";\nimport { Leave } from \"./models/Leave\";\nimport { Task } from \"./models/Task\";\nimport { CommunicationLog } from \"./models/CommunicationLog\";\nimport { Feedback } from \"./models/Feedback\";\nimport { SupportTicket } from \"./models/SupportTicket\";\nimport { ActivityLog } from \"./models/ActivityLog\";\nimport { PerformanceLog } from \"./models/PerformanceLog\";\nimport { getNextSequence } from \"./models/Counter\";\nimport { checkAndNotifyLowStock, notifyNewOrder, notifyServiceVisitStatus, notifyPaymentOverdue, notifyPaymentDue } from \"./utils/notifications\";\nimport { logActivity } from \"./utils/activityLogger\";\nimport { User } from \"./models/User\";\nimport { authenticateUser, createUser, ROLE_PERMISSIONS, sendOTPToMobile, verifyOTP, sendEmployeeOTP, verifyEmployeeOTP } from \"./auth\";\nimport { requireAuth, requireRole, attachUser, requirePermission } from \"./middleware\";\nimport { insertCustomerSchema, insertVehicleSchema } from \"./schemas\";\nimport { RegistrationCustomer } from \"./models/RegistrationCustomer\";\nimport { RegistrationVehicle } from \"./models/RegistrationVehicle\";\nimport { Invoice } from \"./models/Invoice\";\nimport { Coupon } from \"./models/Coupon\";\nimport { Warranty } from \"./models/Warranty\";\nimport { sendInvoiceNotifications } from \"./utils/invoiceNotifications\";\nimport { generateInvoicePDF } from \"./utils/generateInvoicePDF\";\nimport { sendWhatsAppOTP, sendWhatsAppWelcome } from \"./services/whatsapp\";\nimport { generateDailyReportData, formatDailyReportHTML, sendDailyReportEmail } from \"./utils/emailReports\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  await connectDB();\n  \n  // Auto-migrate: Add vehicleId to existing vehicles without it\n  try {\n    const vehiclesWithoutId = await RegistrationVehicle.find({ \n      $or: [\n        { vehicleId: { $exists: false } },\n        { vehicleId: null },\n        { vehicleId: '' }\n      ]\n    });\n    \n    if (vehiclesWithoutId.length > 0) {\n      console.log(`🔄 Migrating ${vehiclesWithoutId.length} vehicles to add Vehicle IDs...`);\n      for (const vehicle of vehiclesWithoutId) {\n        const vehicleSeq = await getNextSequence('vehicle');\n        const vehicleId = `VEH${String(vehicleSeq).padStart(3, '0')}`;\n        \n        await RegistrationVehicle.updateOne(\n          { _id: vehicle._id },\n          { $set: { vehicleId } }\n        );\n      }\n      console.log(`✅ Migration complete: Added Vehicle IDs to ${vehiclesWithoutId.length} vehicles`);\n    }\n  } catch (error) {\n    console.error('❌ Vehicle ID migration error:', error);\n  }\n\n  // Auto-migrate: Convert old warrantyCard to new warrantyCards array\n  try {\n    const vehiclesWithOldWarranty = await RegistrationVehicle.find({\n      warrantyCard: { $exists: true, $nin: [null, ''] },\n      $or: [\n        { warrantyCards: { $exists: false } },\n        { warrantyCards: { $size: 0 } }\n      ]\n    });\n    \n    if (vehiclesWithOldWarranty.length > 0) {\n      console.log(`🔄 Migrating ${vehiclesWithOldWarranty.length} vehicles from warrantyCard to warrantyCards...`);\n      for (const vehicle of vehiclesWithOldWarranty) {\n        await RegistrationVehicle.updateOne(\n          { _id: vehicle._id },\n          { \n            $set: { \n              warrantyCards: [{\n                partId: 'legacy',\n                partName: 'Vehicle Warranty Card',\n                fileData: (vehicle as any).warrantyCard\n              }]\n            },\n            $unset: { warrantyCard: '' }\n          }\n        );\n      }\n      console.log(`✅ Migration complete: Migrated ${vehiclesWithOldWarranty.length} warranty cards`);\n    }\n  } catch (error) {\n    console.error('❌ Warranty card migration error:', error);\n  }\n  \n  app.use(attachUser);\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password, selectedRole } = req.body;\n      \n      const user = await authenticateUser(email, password);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      if (selectedRole && user.role !== selectedRole) {\n        return res.status(403).json({ error: `Invalid role selection. This account is registered as ${user.role}.` });\n      }\n      \n      if (!user.mobileNumber) {\n        return res.status(400).json({ error: \"No mobile number registered for this account. Please contact administrator.\" });\n      }\n      \n      const otpResult = await sendOTPToMobile(user.mobileNumber);\n      \n      if (!otpResult.success) {\n        return res.status(500).json({ error: otpResult.error || \"Failed to send OTP\" });\n      }\n      \n      (req as any).session.pendingAuth = {\n        userId: user._id.toString(),\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        mobileNumber: user.mobileNumber,\n      };\n      \n      res.json({\n        requireOTP: true,\n        mobileNumber: user.mobileNumber,\n        message: \"OTP sent to your registered mobile number\",\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(400).json({ error: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    (req as any).session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ error: \"Logout failed\" });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const user = await User.findById(userId).select('-passwordHash');\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({\n        id: user._id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        mobileNumber: user.mobileNumber,\n        permissions: ROLE_PERMISSIONS[user.role as keyof typeof ROLE_PERMISSIONS] || {},\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  app.get(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const user = await User.findById(userId).select('-passwordHash');\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({\n        name: user.name,\n        email: user.email,\n        mobileNumber: user.mobileNumber,\n        role: user.role,\n        employeeId: user.employeeId,\n        department: user.department,\n        joiningDate: user.joiningDate,\n        photo: user.photo,\n      });\n    } catch (error) {\n      console.error('Get profile error:', error);\n      res.status(500).json({ error: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.put(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const { name, email, mobileNumber, department } = req.body;\n      \n      const updateData: any = {};\n      if (name) updateData.name = name;\n      if (email) updateData.email = email;\n      if (mobileNumber) updateData.mobileNumber = mobileNumber;\n      if (department) updateData.department = department;\n      \n      const user = await User.findByIdAndUpdate(\n        userId,\n        { $set: updateData },\n        { new: true, runValidators: true }\n      ).select('-passwordHash');\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      (req as any).session.userName = user.name;\n      (req as any).session.userEmail = user.email;\n      \n      res.json({\n        name: user.name,\n        email: user.email,\n        mobileNumber: user.mobileNumber,\n        role: user.role,\n        employeeId: user.employeeId,\n        department: user.department,\n        joiningDate: user.joiningDate,\n        photo: user.photo,\n      });\n    } catch (error) {\n      console.error('Update profile error:', error);\n      res.status(500).json({ error: \"Failed to update profile\" });\n    }\n  });\n\n  app.post(\"/api/auth/send-otp\", async (req, res) => {\n    try {\n      const { mobileNumber } = req.body;\n      \n      if (!mobileNumber) {\n        return res.status(400).json({ error: \"Mobile number is required\" });\n      }\n      \n      const user = await User.findOne({ mobileNumber, isActive: true });\n      if (!user) {\n        return res.status(404).json({ error: \"User not found with this mobile number\" });\n      }\n      \n      const result = await sendOTPToMobile(mobileNumber);\n      \n      if (result.success) {\n        res.json({ success: true, message: \"OTP sent successfully\" });\n      } else {\n        res.status(500).json({ error: result.error || \"Failed to send OTP\" });\n      }\n    } catch (error) {\n      console.error('Send OTP error:', error);\n      res.status(500).json({ error: \"Failed to send OTP\" });\n    }\n  });\n\n  app.post(\"/api/auth/verify-otp\", async (req, res) => {\n    try {\n      const { otp } = req.body;\n      \n      if (!otp) {\n        return res.status(400).json({ error: \"OTP is required\" });\n      }\n      \n      const pendingAuth = (req as any).session.pendingAuth;\n      if (!pendingAuth || !pendingAuth.mobileNumber) {\n        return res.status(400).json({ error: \"No pending authentication. Please login again.\" });\n      }\n      \n      const result = await verifyOTP(pendingAuth.mobileNumber, otp);\n      \n      if (!result.success) {\n        return res.status(400).json({ error: result.error || \"Invalid OTP\" });\n      }\n      \n      (req as any).session.userId = pendingAuth.userId;\n      (req as any).session.userRole = pendingAuth.role;\n      (req as any).session.userName = pendingAuth.name;\n      (req as any).session.userEmail = pendingAuth.email;\n      \n      delete (req as any).session.pendingAuth;\n      \n      if (pendingAuth.role !== 'Admin') {\n        (req as any).session.lastActivity = Date.now();\n      }\n      \n      await logActivity({\n        userId: pendingAuth.userId,\n        userName: pendingAuth.name,\n        userRole: pendingAuth.role,\n        action: 'login',\n        resource: 'user',\n        description: `${pendingAuth.name} logged in`,\n        ipAddress: req.ip,\n      });\n      \n      res.json({\n        id: pendingAuth.userId,\n        email: pendingAuth.email,\n        name: pendingAuth.name,\n        role: pendingAuth.role,\n        mobileNumber: pendingAuth.mobileNumber,\n      });\n    } catch (error) {\n      console.error('Verify OTP error:', error);\n      res.status(500).json({ error: \"Failed to verify OTP\" });\n    }\n  });\n\n  // Forgot Password - Request OTP\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const { mobileNumber, role } = req.body;\n      \n      if (!mobileNumber) {\n        return res.status(400).json({ error: \"Mobile number is required\" });\n      }\n      \n      if (!role) {\n        return res.status(400).json({ error: \"Role is required\" });\n      }\n      \n      const user = await User.findOne({ mobileNumber, role, isActive: true });\n      if (!user) {\n        return res.status(404).json({ error: `No ${role} account found with this mobile number` });\n      }\n      \n      const otpResult = await sendOTPToMobile(mobileNumber);\n      \n      if (!otpResult.success) {\n        return res.status(500).json({ error: otpResult.error || \"Failed to send OTP\" });\n      }\n      \n      (req as any).session.passwordReset = {\n        userId: user._id.toString(),\n        mobileNumber: mobileNumber,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n      };\n      \n      res.json({\n        success: true,\n        message: \"OTP sent to your mobile number\",\n        mobileNumber: mobileNumber,\n      });\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      res.status(500).json({ error: \"Failed to process request\" });\n    }\n  });\n\n  // Verify Reset OTP\n  app.post(\"/api/auth/verify-reset-otp\", async (req, res) => {\n    try {\n      const { otp } = req.body;\n      \n      if (!otp) {\n        return res.status(400).json({ error: \"OTP is required\" });\n      }\n      \n      const passwordReset = (req as any).session.passwordReset;\n      if (!passwordReset || !passwordReset.mobileNumber) {\n        return res.status(400).json({ error: \"No password reset request found. Please request OTP again.\" });\n      }\n      \n      const result = await verifyOTP(passwordReset.mobileNumber, otp);\n      \n      if (!result.success) {\n        return res.status(400).json({ error: result.error || \"Invalid OTP\" });\n      }\n      \n      (req as any).session.passwordReset.otpVerified = true;\n      \n      res.json({\n        success: true,\n        message: \"OTP verified successfully. You can now reset your password.\",\n      });\n    } catch (error) {\n      console.error('Verify reset OTP error:', error);\n      res.status(500).json({ error: \"Failed to verify OTP\" });\n    }\n  });\n\n  // Reset Password\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { newPassword } = req.body;\n      \n      if (!newPassword || newPassword.length < 6) {\n        return res.status(400).json({ error: \"Password must be at least 6 characters long\" });\n      }\n      \n      const passwordReset = (req as any).session.passwordReset;\n      if (!passwordReset || !passwordReset.otpVerified) {\n        return res.status(400).json({ error: \"Please verify OTP first before resetting password\" });\n      }\n      \n      const user = await User.findById(passwordReset.userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      const bcrypt = await import('bcryptjs');\n      const isSamePassword = await bcrypt.compare(newPassword, user.passwordHash);\n      \n      if (isSamePassword) {\n        return res.status(400).json({ error: \"New password cannot be the same as your old password\" });\n      }\n      \n      const passwordHash = await bcrypt.hash(newPassword, 10);\n      \n      await User.findByIdAndUpdate(passwordReset.userId, {\n        passwordHash: passwordHash,\n      });\n      \n      await logActivity({\n        userId: passwordReset.userId,\n        userName: passwordReset.name,\n        userRole: 'User',\n        action: 'update',\n        resource: 'user',\n        description: `${passwordReset.name} reset their password`,\n        ipAddress: req.ip,\n      });\n      \n      delete (req as any).session.passwordReset;\n      \n      res.json({\n        success: true,\n        message: \"Password reset successfully. You can now login with your new password.\",\n      });\n    } catch (error) {\n      console.error('Reset password error:', error);\n      res.status(500).json({ error: \"Failed to reset password\" });\n    }\n  });\n\n  // User management endpoints (Admin only)\n  app.post(\"/api/users\", requireAuth, requireRole('Admin'), async (req, res) => {\n    try {\n      const { email, password, name, role, mobileNumber } = req.body;\n      \n      if (!email || !password || !name || !role || !mobileNumber) {\n        return res.status(400).json({ error: \"All fields are required including mobile number\" });\n      }\n      \n      const existingUser = await User.findOne({ \n        $or: [{ email }, { mobileNumber }] \n      });\n      if (existingUser) {\n        if (existingUser.email === email) {\n          return res.status(400).json({ error: \"User with this email already exists\" });\n        }\n        if (existingUser.mobileNumber === mobileNumber) {\n          return res.status(400).json({ error: \"User with this mobile number already exists\" });\n        }\n      }\n      \n      const user = await createUser(email, password, name, role, mobileNumber);\n      \n      res.json({\n        id: user._id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        mobileNumber: user.mobileNumber,\n        isActive: user.isActive,\n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  app.get(\"/api/users\", requireAuth, requireRole('Admin'), async (req, res) => {\n    try {\n      const users = await User.find().select('-passwordHash').sort({ createdAt: -1 });\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", requireAuth, requireRole('Admin'), async (req, res) => {\n    try {\n      const { name, role, isActive, mobileNumber } = req.body;\n      \n      if (mobileNumber) {\n        const existingUser = await User.findOne({ \n          mobileNumber, \n          _id: { $ne: req.params.id } \n        });\n        if (existingUser) {\n          return res.status(400).json({ error: \"User with this mobile number already exists\" });\n        }\n      }\n      \n      const updateData: any = { name, role, isActive };\n      if (mobileNumber) {\n        updateData.mobileNumber = mobileNumber;\n      }\n      \n      const user = await User.findByIdAndUpdate(\n        req.params.id,\n        updateData,\n        { new: true }\n      ).select('-passwordHash');\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", requireAuth, requireRole('Admin'), async (req, res) => {\n    try {\n      const userId = req.params.id;\n      \n      // Prevent admins from deleting themselves\n      if (userId === (req as any).session.userId) {\n        return res.status(400).json({ error: \"Cannot delete your own account\" });\n      }\n      \n      const user = await User.findByIdAndDelete(userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  // Products endpoints with permission checks\n  app.get(\"/api/products\", requireAuth, requirePermission('products', 'read'), async (req, res) => {\n    try {\n      const products = await Product.find().sort({ createdAt: -1 });\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post(\"/api/products\", requireAuth, requirePermission('products', 'create'), async (req, res) => {\n    try {\n      const product = await Product.create(req.body);\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'create',\n        resource: 'product',\n        resourceId: product._id.toString(),\n        description: `Created product: ${product.name}`,\n        details: { category: product.category, brand: product.brand },\n        ipAddress: req.ip,\n      });\n      \n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create product\" });\n    }\n  });\n\n  app.patch(\"/api/products/:id\", requireAuth, requirePermission('products', 'update'), async (req, res) => {\n    try {\n      const product = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'update',\n        resource: 'product',\n        resourceId: product._id.toString(),\n        description: `Updated product: ${product.name}`,\n        details: req.body,\n        ipAddress: req.ip,\n      });\n      \n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", requireAuth, requirePermission('products', 'delete'), async (req, res) => {\n    try {\n      const product = await Product.findByIdAndDelete(req.params.id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'delete',\n        resource: 'product',\n        resourceId: product._id.toString(),\n        description: `Deleted product: ${product.name}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete product\" });\n    }\n  });\n\n  app.post(\"/api/products/delete-duplicates\", requireAuth, requirePermission('products', 'delete'), async (req, res) => {\n    try {\n      const duplicates = await Product.aggregate([\n        {\n          $group: {\n            _id: { name: \"$name\", brand: \"$brand\", category: \"$category\" },\n            ids: { $push: \"$_id\" },\n            count: { $sum: 1 }\n          }\n        },\n        {\n          $match: { count: { $gt: 1 } }\n        }\n      ]);\n\n      let deletedCount = 0;\n      for (const dup of duplicates) {\n        const idsToDelete = dup.ids.slice(1);\n        await Product.deleteMany({ _id: { $in: idsToDelete } });\n        deletedCount += idsToDelete.length;\n      }\n\n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'delete',\n        resource: 'product',\n        resourceId: 'bulk',\n        description: `Deleted ${deletedCount} duplicate products`,\n        ipAddress: req.ip,\n      });\n\n      res.json({ success: true, deletedCount, duplicateGroups: duplicates.length });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete duplicates\" });\n    }\n  });\n\n  app.post(\"/api/products/import\", requireAuth, requirePermission('products', 'create'), async (req, res) => {\n    try {\n      const { products } = req.body;\n      \n      if (!Array.isArray(products) || products.length === 0) {\n        return res.status(400).json({ error: \"Invalid product data\" });\n      }\n\n      const imported = [];\n      const errors = [];\n\n      for (let i = 0; i < products.length; i++) {\n        try {\n          const productData = products[i];\n          \n          if (!productData.name || !productData.category || !productData.brand) {\n            errors.push({ row: i + 1, error: \"Missing required fields (name, category, brand)\" });\n            continue;\n          }\n\n          const product = await Product.create({\n            name: productData.name,\n            category: productData.category,\n            brand: productData.brand,\n            modelCompatibility: productData.modelCompatibility || [],\n            warranty: productData.warranty || \"\",\n            mrp: Number(productData.mrp) || 0,\n            sellingPrice: Number(productData.sellingPrice) || 0,\n            discount: Number(productData.discount) || 0,\n            stockQty: Number(productData.stockQty) || 0,\n            minStockLevel: Number(productData.minStockLevel) || 10,\n            warehouseLocation: productData.warehouseLocation || \"\",\n            barcode: productData.barcode || \"\",\n            images: productData.images || [],\n            variants: productData.variants || [],\n          });\n\n          imported.push(product);\n        } catch (err: any) {\n          errors.push({ row: i + 1, error: err.message });\n        }\n      }\n\n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'create',\n        resource: 'product',\n        resourceId: 'bulk',\n        description: `Imported ${imported.length} products (${errors.length} errors)`,\n        ipAddress: req.ip,\n      });\n\n      res.json({ \n        success: true, \n        imported: imported.length, \n        errors: errors.length,\n        errorDetails: errors \n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to import products\" });\n    }\n  });\n\n  // Employee OTP endpoints\n  app.post(\"/api/employees/send-otp\", requireAuth, requirePermission('employees', 'create'), async (req, res) => {\n    try {\n      const { mobileNumber, purpose } = req.body;\n      \n      if (!mobileNumber) {\n        return res.status(400).json({ error: \"Mobile number is required\" });\n      }\n\n      const existingUser = await User.findOne({ mobileNumber });\n      if (existingUser && purpose === 'employee_verification') {\n        return res.status(400).json({ error: \"An employee with this mobile number already exists\" });\n      }\n\n      const result = await sendEmployeeOTP(mobileNumber, purpose || 'employee_verification');\n      \n      if (result.success) {\n        res.json({ success: true, message: \"OTP sent successfully\" });\n      } else {\n        res.status(500).json({ error: result.error || \"Failed to send OTP\" });\n      }\n    } catch (error: any) {\n      res.status(500).json({ error: error.message || \"Failed to send OTP\" });\n    }\n  });\n\n  app.post(\"/api/employees/verify-otp\", requireAuth, requirePermission('employees', 'create'), async (req, res) => {\n    try {\n      const { mobileNumber, otp, purpose } = req.body;\n      \n      if (!mobileNumber || !otp) {\n        return res.status(400).json({ error: \"Mobile number and OTP are required\" });\n      }\n\n      const result = await verifyEmployeeOTP(mobileNumber, otp, purpose || 'employee_verification');\n      \n      if (result.success) {\n        res.json({ success: true, message: \"OTP verified successfully\" });\n      } else {\n        res.status(400).json({ error: result.error || \"Failed to verify OTP\" });\n      }\n    } catch (error: any) {\n      res.status(400).json({ error: error.message || \"Failed to verify OTP\" });\n    }\n  });\n\n  // Employees endpoints with permission checks (now using User model)\n  app.get(\"/api/employees\", requireAuth, requirePermission('employees', 'read'), async (req, res) => {\n    try {\n      const employees = await User.find().select('-passwordHash').sort({ createdAt: -1 });\n      const formattedEmployees = employees.map(emp => ({\n        ...emp.toObject(),\n        contact: emp.mobileNumber,\n      }));\n      res.json(formattedEmployees);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employees\" });\n    }\n  });\n\n  app.post(\"/api/employees\", requireAuth, requirePermission('employees', 'create'), async (req, res) => {\n    try {\n      const currentUserRole = (req as any).session.userRole;\n      const mobileNumber = req.body.phone || req.body.contact;\n      \n      if (!mobileNumber) {\n        return res.status(400).json({ error: \"Mobile number is required\" });\n      }\n\n      const { OTP } = await import('./models/OTP');\n      const verifiedOTP = await OTP.findOne({\n        mobileNumber,\n        purpose: 'employee_verification',\n        verified: true,\n        expiresAt: { $gt: new Date() },\n      }).sort({ createdAt: -1 });\n\n      if (!verifiedOTP) {\n        return res.status(400).json({ error: \"Please verify the mobile number with OTP before creating the employee\" });\n      }\n      \n      if (req.body.role === 'Admin' && currentUserRole !== 'Admin') {\n        return res.status(403).json({ error: \"Only Admin users can create Admin accounts\" });\n      }\n      \n      const isAdmin = req.body.role === 'Admin';\n      const sequence = await getNextSequence(isAdmin ? 'admin_id' : 'employee_id');\n      const employeeId = isAdmin ? `ADM${String(sequence).padStart(3, '0')}` : `EMP${String(sequence).padStart(3, '0')}`;\n      \n      const password = req.body.password || `${req.body.name.split(' ')[0].toLowerCase()}123`;\n      \n      const employee = await createUser(\n        req.body.email,\n        password,\n        req.body.name,\n        req.body.role,\n        mobileNumber\n      );\n      \n      const updateData: any = {\n        employeeId,\n        department: req.body.department,\n        panNumber: req.body.panNumber,\n        aadharNumber: req.body.aadharNumber,\n        photo: req.body.photo,\n        documents: req.body.documents,\n      };\n      \n      if (!isAdmin) {\n        updateData.salary = req.body.salary;\n        updateData.joiningDate = req.body.joiningDate || new Date();\n      }\n      \n      await User.findByIdAndUpdate(employee._id, updateData);\n      \n      const updatedEmployee = await User.findById(employee._id).select('-passwordHash');\n\n      await OTP.deleteMany({ mobileNumber, purpose: 'employee_verification' });\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'create',\n        resource: 'employee',\n        resourceId: employee._id.toString(),\n        description: `Created employee: ${employee.name} (${employeeId})`,\n        details: { role: employee.role, email: employee.email, employeeId },\n        ipAddress: req.ip,\n      });\n      \n      res.json({ ...updatedEmployee?.toObject(), contact: updatedEmployee?.mobileNumber });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message || \"Failed to create employee\" });\n    }\n  });\n\n  app.patch(\"/api/employees/:id\", requireAuth, requirePermission('employees', 'update'), async (req, res) => {\n    try {\n      const currentUserRole = (req as any).session.userRole;\n      const employee = await User.findById(req.params.id);\n      \n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n\n      const newMobileNumber = req.body.phone || req.body.contact;\n      \n      if (newMobileNumber && newMobileNumber !== employee.mobileNumber) {\n        const { OTP } = await import('./models/OTP');\n        const verifiedOTP = await OTP.findOne({\n          mobileNumber: newMobileNumber,\n          purpose: 'phone_update',\n          verified: true,\n          expiresAt: { $gt: new Date() },\n        }).sort({ createdAt: -1 });\n\n        if (!verifiedOTP) {\n          return res.status(400).json({ error: \"Please verify the new mobile number with OTP before updating\" });\n        }\n\n        await OTP.deleteMany({ mobileNumber: newMobileNumber, purpose: 'phone_update' });\n      }\n      \n      if (req.body.role === 'Admin' && currentUserRole !== 'Admin') {\n        return res.status(403).json({ error: \"Only Admin users can assign Admin role\" });\n      }\n      \n      const updateData: any = { ...req.body };\n      if (req.body.phone || req.body.contact) {\n        updateData.mobileNumber = req.body.phone || req.body.contact;\n        delete updateData.phone;\n        delete updateData.contact;\n      }\n      \n      const updatedEmployee = await User.findByIdAndUpdate(req.params.id, updateData, { new: true }).select('-passwordHash');\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'update',\n        resource: 'employee',\n        resourceId: updatedEmployee!._id.toString(),\n        description: `Updated employee: ${updatedEmployee!.name}`,\n        details: { role: updatedEmployee!.role },\n        ipAddress: req.ip,\n      });\n      \n      res.json({ ...updatedEmployee?.toObject(), contact: updatedEmployee?.mobileNumber });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update employee\" });\n    }\n  });\n\n  app.delete(\"/api/employees/:id\", requireAuth, requirePermission('employees', 'delete'), async (req, res) => {\n    try {\n      const currentUserRole = (req as any).session.userRole;\n      const currentUserId = (req as any).session.userId;\n      \n      const employee = await User.findById(req.params.id);\n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      \n      if (req.params.id === currentUserId) {\n        return res.status(403).json({ error: \"Cannot delete your own account\" });\n      }\n      \n      if (employee.role === 'Admin' && currentUserRole !== 'Admin') {\n        return res.status(403).json({ error: \"Only Admin users can delete Admin accounts\" });\n      }\n      \n      await User.findByIdAndDelete(req.params.id);\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'delete',\n        resource: 'employee',\n        resourceId: employee._id.toString(),\n        description: `Deleted employee: ${employee.name}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete employee\" });\n    }\n  });\n\n  // Performance Log endpoints\n  app.get(\"/api/performance-logs\", requireAuth, requirePermission('employees', 'read'), async (req, res) => {\n    try {\n      const { employeeId, month, year } = req.query;\n      const filter: any = {};\n      \n      if (employeeId) filter.employeeId = employeeId;\n      if (month) filter.month = parseInt(month as string);\n      if (year) filter.year = parseInt(year as string);\n      \n      const logs = await PerformanceLog.find(filter)\n        .populate('employeeId')\n        .sort({ year: -1, month: -1 });\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch performance logs\" });\n    }\n  });\n\n  app.post(\"/api/performance-logs/generate\", requireAuth, requirePermission('employees', 'update'), async (req, res) => {\n    try {\n      const { month, year } = req.body;\n      const targetMonth = month || new Date().getMonth() + 1;\n      const targetYear = year || new Date().getFullYear();\n      \n      const employees = await Employee.find({ isActive: true });\n      const logs = [];\n      \n      for (const employee of employees) {\n        const existingLog = await PerformanceLog.findOne({\n          employeeId: employee._id,\n          month: targetMonth,\n          year: targetYear\n        });\n        \n        if (existingLog) continue;\n        \n        const startDate = new Date(targetYear, targetMonth - 1, 1);\n        const endDate = new Date(targetYear, targetMonth, 0, 23, 59, 59);\n        \n        const salesData = await Order.aggregate([\n          { \n            $match: { \n              salespersonId: employee._id,\n              createdAt: { $gte: startDate, $lte: endDate }\n            } \n          },\n          {\n            $group: {\n              _id: null,\n              totalSales: { $sum: '$total' },\n              orderCount: { $sum: 1 },\n              avgOrderValue: { $avg: '$total' }\n            }\n          }\n        ]);\n        \n        const attendanceData = await Attendance.aggregate([\n          {\n            $match: {\n              employeeId: employee._id,\n              date: { $gte: startDate, $lte: endDate }\n            }\n          },\n          {\n            $group: {\n              _id: null,\n              totalDays: { $sum: 1 },\n              presentDays: { \n                $sum: { \n                  $cond: [{ $eq: ['$status', 'Present'] }, 1, 0] \n                } \n              }\n            }\n          }\n        ]);\n        \n        const tasksData = await Task.countDocuments({\n          assignedTo: employee._id,\n          status: 'Completed',\n          updatedAt: { $gte: startDate, $lte: endDate }\n        });\n        \n        const sales = salesData[0] || { totalSales: 0, orderCount: 0, avgOrderValue: 0 };\n        const attendance = attendanceData[0] || { totalDays: 0, presentDays: 0 };\n        const attendanceRate = attendance.totalDays > 0 ? (attendance.presentDays / attendance.totalDays) * 100 : 0;\n        \n        const performanceScore = Math.round(\n          (sales.totalSales / 100000) * 40 +\n          attendanceRate * 0.3 +\n          (tasksData / 10) * 30\n        );\n        \n        const log = await PerformanceLog.create({\n          employeeId: employee._id,\n          employeeName: employee.name,\n          employeeCode: employee.employeeId,\n          month: targetMonth,\n          year: targetYear,\n          totalSales: sales.totalSales,\n          orderCount: sales.orderCount,\n          avgOrderValue: sales.avgOrderValue,\n          attendanceRate: Math.round(attendanceRate * 100) / 100,\n          tasksCompleted: tasksData,\n          performanceScore: Math.min(performanceScore, 100),\n          createdBy: (req as any).session.userId\n        });\n        \n        logs.push(log);\n      }\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'create',\n        resource: 'employee',\n        description: `Generated ${logs.length} performance logs for ${targetMonth}/${targetYear}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json({ \n        message: `Generated ${logs.length} performance logs`,\n        logs \n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to generate performance logs\" });\n    }\n  });\n\n  // Service handlers endpoint - accessible to all authenticated users\n  app.get(\"/api/service-handlers\", requireAuth, async (req, res) => {\n    try {\n      // Fetch from User model (current employees), not Employee model (legacy/seed data)\n      // Explicitly select only safe fields and exclude passwordHash for security\n      const handlers = await User.find({\n        role: 'Service Staff',\n        isActive: true\n      })\n      .select('_id employeeId name role mobileNumber email department isActive')\n      .sort({ name: 1 });\n      \n      // Map mobileNumber to contact for backwards compatibility with frontend\n      const mappedHandlers = handlers.map(handler => ({\n        ...handler.toObject(),\n        contact: handler.mobileNumber\n      }));\n      \n      res.json(mappedHandlers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch service handlers\" });\n    }\n  });\n\n  // Service visits - use 'orders' resource for permissions (Service Staff can read/update)\n  app.get(\"/api/service-visits\", requireAuth, requirePermission('orders', 'read'), async (req, res) => {\n    try {\n      const visits = await ServiceVisit.find()\n        .populate('customerId')\n        .populate('handlerIds')\n        .populate('partsUsed.productId')\n        .sort({ createdAt: -1 });\n      res.json(visits);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch service visits\" });\n    }\n  });\n\n  app.post(\"/api/service-visits\", requireAuth, requirePermission('orders', 'create'), async (req, res) => {\n    try {\n      const visit = await ServiceVisit.create(req.body);\n      await visit.populate('customerId');\n      await visit.populate('handlerIds');\n      \n      // Notify about new service visit\n      const customerName = visit.customerId?.fullName || 'Unknown Customer';\n      await notifyServiceVisitStatus(visit, customerName, visit.status);\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'create',\n        resource: 'service_visit',\n        resourceId: visit._id.toString(),\n        description: `Created service visit for ${visit.vehicleReg}`,\n        details: { status: visit.status, customerName },\n        ipAddress: req.ip,\n      });\n      \n      res.json(visit);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create service visit\" });\n    }\n  });\n\n  // Get suggested products for a service visit based on vehicle's selected parts\n  app.get(\"/api/service-visits/:id/suggested-products\", requireAuth, requirePermission('orders', 'read'), async (req, res) => {\n    try {\n      console.log('\\n========================================');\n      console.log('🔍 SUGGESTED PRODUCTS API - START');\n      console.log('========================================');\n      \n      const serviceVisit = await ServiceVisit.findById(req.params.id)\n        .populate('customerId')\n        .populate('partsUsed.productId');\n      \n      if (!serviceVisit) {\n        console.log('❌ Service visit not found');\n        return res.status(404).json({ error: \"Service visit not found\" });\n      }\n\n      console.log('📋 Service Visit Info:', {\n        id: serviceVisit._id,\n        vehicleReg: serviceVisit.vehicleReg,\n        customerId: serviceVisit.customerId?._id,\n        partsUsedCount: serviceVisit.partsUsed?.length || 0,\n      });\n\n      // First priority: Use partsUsed from the service visit (already has products)\n      if (serviceVisit.partsUsed && serviceVisit.partsUsed.length > 0) {\n        console.log('✅ Service visit has partsUsed, using those directly');\n        console.log('PartsUsed details:', JSON.stringify(serviceVisit.partsUsed, null, 2));\n        \n        // Extract product IDs (handle both populated objects and ObjectId strings)\n        const productIds = serviceVisit.partsUsed\n          .map((part: any) => {\n            if (part.productId) {\n              return typeof part.productId === 'object' \n                ? part.productId._id?.toString() || part.productId.toString()\n                : part.productId.toString();\n            }\n            return null;\n          })\n          .filter(Boolean);\n        \n        console.log('📦 Extracted Product IDs:', productIds);\n        \n        if (productIds.length > 0) {\n          // Fetch all products explicitly to ensure we have complete data\n          const products = await Product.find({ _id: { $in: productIds } });\n          \n          console.log('✅ Found products from partsUsed:', products.map(p => ({ id: p._id, name: p.name, price: p.sellingPrice })));\n          \n          const suggestedProducts = products.map(product => ({\n            productId: product._id.toString(),\n            name: product.name,\n            price: product.sellingPrice,\n            warranty: product.warranty,\n            category: product.category,\n            stockQty: product.stockQty\n          }));\n          \n          console.log('🎯 Returning', suggestedProducts.length, 'products from partsUsed');\n          console.log('========================================\\n');\n          return res.json({ products: suggestedProducts });\n        }\n      }\n\n      console.log('🔄 No partsUsed, falling back to vehicle selectedParts');\n\n      // Fallback: Look for products based on vehicle's selected parts\n      const customerId = serviceVisit.customerId?._id?.toString();\n      if (!customerId) {\n        console.log('❌ No customer ID');\n        console.log('========================================\\n');\n        return res.json({ products: [] });\n      }\n\n      // Find the specific vehicle for this service visit by matching vehicleReg\n      const vehicleReg = serviceVisit.vehicleReg;\n      if (!vehicleReg) {\n        console.log('❌ No vehicle registration');\n        console.log('========================================\\n');\n        return res.json({ products: [] });\n      }\n\n      // Try to find vehicle by vehicleNumber or vehicleId (registration number)\n      const vehicle = await RegistrationVehicle.findOne({\n        customerId,\n        $or: [\n          { vehicleNumber: vehicleReg },\n          { vehicleId: vehicleReg }\n        ]\n      });\n\n      console.log('🚗 Vehicle Lookup:', {\n        vehicleReg,\n        customerId,\n        vehicleFound: !!vehicle,\n        vehicleNumber: vehicle?.vehicleNumber,\n        vehicleId: vehicle?.vehicleId,\n        selectedPartsCount: vehicle?.selectedParts?.length || 0,\n        selectedParts: vehicle?.selectedParts,\n      });\n\n      if (!vehicle || !vehicle.selectedParts || vehicle.selectedParts.length === 0) {\n        console.log('❌ No vehicle or selectedParts found, returning empty');\n        console.log('========================================\\n');\n        return res.json({ products: [] });\n      }\n\n      // Get the selected part names from the vehicle\n      const { getPartById } = await import('@shared/vehicleData');\n      const partNames = vehicle.selectedParts\n        .map((partId: string) => {\n          const part = getPartById(partId);\n          console.log(`  🔹 Part ID \"${partId}\" -> Name: \"${part?.name}\"`);\n          return part?.name;\n        })\n        .filter(Boolean) as string[];\n\n      console.log('📝 Resolved Part Names:', partNames);\n\n      if (partNames.length === 0) {\n        console.log('❌ No valid part names found');\n        console.log('========================================\\n');\n        return res.json({ products: [] });\n      }\n\n      // Use EXACT, case-sensitive matching for product names\n      console.log('\\n🔍 Using exact, case-sensitive name matching');\n      console.log('Looking for exact matches of:', partNames);\n\n      const products = await Product.find({\n        name: { $in: partNames },\n        status: { $nin: ['discontinued'] }\n      }).limit(20);\n\n      console.log('✅ Found', products.length, 'products with exact name matches');\n      console.log('Matched products:', products.map(p => p.name));\n\n      console.log('\\n✅ Final Product Search Results:');\n      console.log('  Total products found:', products.length);\n      console.log('  Product details:', products.map(p => ({ \n        name: p.name, \n        category: p.category, \n        price: p.sellingPrice \n      })));\n\n      const suggestedProducts = products.map(product => ({\n        productId: product._id.toString(),\n        name: product.name,\n        price: product.sellingPrice,\n        warranty: product.warranty,\n        category: product.category,\n        stockQty: product.stockQty\n      }));\n\n      console.log('🎯 Returning', suggestedProducts.length, 'suggested products');\n      console.log('========================================\\n');\n      res.json({ products: suggestedProducts });\n    } catch (error) {\n      console.error('❌ Error fetching suggested products:', error);\n      console.log('========================================\\n');\n      res.status(500).json({ error: \"Failed to fetch suggested products\" });\n    }\n  });\n\n  app.patch(\"/api/service-visits/:id\", requireAuth, requirePermission('orders', 'update'), async (req, res) => {\n    try {\n      // Truncate base64 images for cleaner logging\n      const logBody = { ...req.body };\n      if (logBody.beforeImages) {\n        logBody.beforeImages = logBody.beforeImages.map((img: string) => \n          img.startsWith('data:') ? `[base64 image: ${img.substring(0, 30)}...]` : img\n        );\n      }\n      if (logBody.afterImages) {\n        logBody.afterImages = logBody.afterImages.map((img: string) => \n          img.startsWith('data:') ? `[base64 image: ${img.substring(0, 30)}...]` : img\n        );\n      }\n      \n      console.log('🔧 [SERVICE UPDATE] Request received:', {\n        id: req.params.id,\n        body: logBody,\n        timestamp: new Date().toISOString()\n      });\n\n      const visit = await ServiceVisit.findById(req.params.id);\n      if (!visit) {\n        console.log('❌ [SERVICE UPDATE] Service visit not found:', req.params.id);\n        return res.status(404).json({ error: \"Service visit not found\" });\n      }\n\n      console.log('📋 [SERVICE UPDATE] Previous state:', {\n        status: visit.status,\n        stageTimestamps: visit.stageTimestamps\n      });\n      \n      // Validate base64 images if present (format and size check - limit to 15MB per image)\n      // Also allow existing images (non-base64 URLs) to pass through unchanged\n      const validateImages = (images: string[]) => {\n        if (!images || !Array.isArray(images)) return true;\n        const dataUriRegex = /^data:image\\/(png|jpeg|jpg|gif|webp);base64,/;\n        const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;\n        const httpUrlRegex = /^https?:\\/\\//;\n        \n        return images.every(img => {\n          if (!img) return true;\n          \n          // Allow existing HTTP/HTTPS URLs (already stored images)\n          if (httpUrlRegex.test(img)) return true;\n          \n          // Check data URI format for new base64 images\n          if (!dataUriRegex.test(img)) return false;\n          \n          // Extract and validate base64 content\n          const base64Content = img.replace(dataUriRegex, '');\n          if (!base64Regex.test(base64Content)) return false;\n          \n          // Check size (15MB limit)\n          const sizeInMB = (base64Content.length * 0.75) / (1024 * 1024);\n          return sizeInMB <= 15;\n        });\n      };\n\n      if (req.body.beforeImages && !validateImages(req.body.beforeImages)) {\n        console.log('❌ [SERVICE UPDATE] Invalid before images');\n        return res.status(400).json({ error: \"Invalid before images: must be valid base64 image data (PNG, JPEG, GIF, WebP) under 15MB per image\" });\n      }\n      if (req.body.afterImages && !validateImages(req.body.afterImages)) {\n        console.log('❌ [SERVICE UPDATE] Invalid after images');\n        return res.status(400).json({ error: \"Invalid after images: must be valid base64 image data (PNG, JPEG, GIF, WebP) under 15MB per image\" });\n      }\n\n      // Store previous status for loyalty and notification logic\n      const previousStatus = visit.status;\n      const previousCustomerId = visit.customerId;\n\n      // Update fields explicitly to ensure Mongoose tracks changes properly\n      if (req.body.status !== undefined) visit.status = req.body.status;\n      if (req.body.notes !== undefined) visit.notes = req.body.notes;\n      if (req.body.beforeImages !== undefined) visit.beforeImages = req.body.beforeImages;\n      if (req.body.afterImages !== undefined) visit.afterImages = req.body.afterImages;\n      if (req.body.handlerIds !== undefined) {\n        visit.handlerIds = req.body.handlerIds;\n        visit.markModified('handlerIds'); // Explicitly mark as modified for Mongoose\n      }\n      if (req.body.partsUsed !== undefined) visit.partsUsed = req.body.partsUsed;\n      if (req.body.totalAmount !== undefined) visit.totalAmount = req.body.totalAmount;\n      \n      console.log('💾 [SERVICE UPDATE] Saving with new data:', {\n        newStatus: visit.status,\n        handlerIds: visit.handlerIds,\n        handlerIdsFromReqBody: req.body.handlerIds,\n        statusChanged: previousStatus !== visit.status\n      });\n\n      // Save the document - this triggers the pre('save') hook which updates stageTimestamps\n      await visit.save();\n      \n      console.log('🔍 [DEBUG] After save, BEFORE populate:', {\n        handlerIds: visit.handlerIds,\n        handlerIdsLength: visit.handlerIds?.length\n      });\n      \n      // Populate after save\n      await visit.populate('customerId');\n      \n      console.log('🔍 [DEBUG] After customerId populate, BEFORE handlerIds populate:', {\n        handlerIds: visit.handlerIds,\n        handlerIdsLength: visit.handlerIds?.length\n      });\n      \n      await visit.populate('handlerIds');\n\n      console.log('✅ [SERVICE UPDATE] Saved successfully:', {\n        status: visit.status,\n        handlerIds: visit.handlerIds,\n        handlerIdsPopulated: visit.handlerIds?.map((h: any) => ({ id: h._id, name: h.name })),\n        stageTimestamps: visit.stageTimestamps\n      });\n      \n      // Update customer loyalty when visit is completed\n      // Note: Customer loyalty fields (visitCount, totalSpent, loyaltyTier) are not yet implemented in the model\n      // Commenting out until those fields are added to RegistrationCustomer schema\n      /* \n      if (visit.status === 'completed' && previousStatus !== 'completed' && visit.customerId) {\n        console.log('🎖️ [SERVICE UPDATE] Updating customer loyalty');\n        const customer = await RegistrationCustomer.findById(visit.customerId._id);\n        if (customer) {\n          customer.visitCount += 1;\n          customer.totalSpent += visit.totalAmount || 0;\n          customer.calculateLoyaltyTier();\n          await customer.save();\n          console.log('✅ [SERVICE UPDATE] Customer loyalty updated:', {\n            visitCount: customer.visitCount,\n            totalSpent: customer.totalSpent,\n            loyaltyTier: customer.loyaltyTier\n          });\n        }\n      }\n      */\n      \n      // Notify about service visit status change\n      if (visit.status && previousStatus !== visit.status) {\n        console.log('🔔 [SERVICE UPDATE] Sending status change notification');\n        const customerName = visit.customerId?.name || 'Unknown Customer';\n        await notifyServiceVisitStatus(visit, customerName, visit.status);\n      }\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'update',\n        resource: 'service_visit',\n        resourceId: visit._id.toString(),\n        description: `Updated service visit for ${visit.vehicleReg}`,\n        details: { status: visit.status },\n        ipAddress: req.ip,\n      });\n      \n      console.log('🎉 [SERVICE UPDATE] Update completed successfully');\n      console.log('📤 [SERVICE UPDATE] Returning visit to frontend:', {\n        _id: visit._id,\n        handlerIds: visit.handlerIds,\n        handlerIdsType: Array.isArray(visit.handlerIds) ? 'array' : typeof visit.handlerIds,\n        handlerIdsLength: visit.handlerIds?.length,\n      });\n      console.log('\\n');\n      res.json(visit);\n    } catch (error) {\n      console.error('❌ [SERVICE UPDATE] Error:', error);\n      res.status(400).json({ error: \"Failed to update service visit\" });\n    }\n  });\n\n  app.delete(\"/api/service-visits/:id\", requireAuth, requirePermission('orders', 'delete'), async (req, res) => {\n    try {\n      const visit = await ServiceVisit.findByIdAndDelete(req.params.id);\n      if (!visit) {\n        return res.status(404).json({ error: \"Service visit not found\" });\n      }\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'delete',\n        resource: 'service_visit',\n        resourceId: visit._id.toString(),\n        description: `Deleted service visit for ${visit.vehicleReg}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete service visit\" });\n    }\n  });\n\n  // Orders endpoints with permission checks\n  app.get(\"/api/orders\", requireAuth, requirePermission('orders', 'read'), async (req, res) => {\n    try {\n      const orders = await Order.find()\n        .populate('customerId')\n        .populate('items.productId')\n        .populate('salespersonId')\n        .sort({ createdAt: -1 });\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.post(\"/api/orders\", requireAuth, requirePermission('orders', 'create'), async (req, res) => {\n    try {\n      const orderData = req.body;\n      const order = await Order.create(orderData);\n      \n      for (const item of req.body.items) {\n        const updatedProduct = await Product.findByIdAndUpdate(\n          item.productId,\n          { $inc: { stockQty: -item.quantity } },\n          { new: true }\n        );\n        \n        await InventoryTransaction.create({\n          productId: item.productId,\n          type: 'OUT',\n          quantity: item.quantity,\n          reason: `Order ${order.invoiceNumber}`,\n        });\n        \n        // Check for low stock after order\n        if (updatedProduct) {\n          await checkAndNotifyLowStock(updatedProduct);\n        }\n      }\n      \n      await order.populate('customerId');\n      await order.populate('items.productId');\n      \n      // Notify about new order\n      const customerName = order.customerId?.name || 'Unknown Customer';\n      await notifyNewOrder(order, customerName);\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'create',\n        resource: 'order',\n        resourceId: order._id.toString(),\n        description: `Created order ${order.invoiceNumber} for ${customerName}`,\n        details: { total: order.total, itemCount: order.items.length },\n        ipAddress: req.ip,\n      });\n      \n      res.json(order);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create order\" });\n    }\n  });\n\n  app.patch(\"/api/orders/:id\", requireAuth, requirePermission('orders', 'update'), async (req, res) => {\n    try {\n      const previousOrder = await Order.findById(req.params.id).populate('customerId');\n      const order = await Order.findByIdAndUpdate(req.params.id, req.body, { new: true })\n        .populate('customerId')\n        .populate('items.productId')\n        .populate('salespersonId');\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n      \n      // Notify about payment status changes\n      if (req.body.paymentStatus && previousOrder && req.body.paymentStatus !== previousOrder.paymentStatus) {\n        const customerName = order.customerId?.name || 'Unknown Customer';\n        if (req.body.paymentStatus === 'due') {\n          await notifyPaymentDue(order, customerName);\n        }\n      }\n      \n      const customerName = order.customerId?.name || 'Unknown Customer';\n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'update',\n        resource: 'order',\n        resourceId: order._id.toString(),\n        description: `Updated order ${order.invoiceNumber} for ${customerName}`,\n        details: { paymentStatus: order.paymentStatus, deliveryStatus: order.deliveryStatus },\n        ipAddress: req.ip,\n      });\n      \n      res.json(order);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update order\" });\n    }\n  });\n\n  app.delete(\"/api/orders/:id\", requireAuth, requirePermission('orders', 'delete'), async (req, res) => {\n    try {\n      const order = await Order.findById(req.params.id).populate('customerId');\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n      \n      await Order.findByIdAndDelete(req.params.id);\n      \n      const customerName = order.customerId?.name || 'Unknown Customer';\n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'delete',\n        resource: 'order',\n        resourceId: order._id.toString(),\n        description: `Deleted order ${order.invoiceNumber} for ${customerName}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete order\" });\n    }\n  });\n\n  // Inventory transactions with permission checks\n  app.get(\"/api/inventory-transactions\", requireAuth, requirePermission('inventory', 'read'), async (req, res) => {\n    try {\n      const transactions = await InventoryTransaction.find()\n        .populate('productId')\n        .populate('userId')\n        .populate('supplierId')\n        .populate('purchaseOrderId')\n        .sort({ date: -1 });\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post(\"/api/inventory-transactions\", requireAuth, requirePermission('inventory', 'create'), async (req, res) => {\n    try {\n      const product = await Product.findById(req.body.productId);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n\n      const previousStock = product.stockQty;\n      let multiplier = 1;\n      \n      if (req.body.type === 'IN' || req.body.type === 'RETURN') {\n        multiplier = 1;\n      } else if (req.body.type === 'OUT') {\n        multiplier = -1;\n      } else if (req.body.type === 'ADJUSTMENT') {\n        multiplier = 0; // For adjustments, quantity is absolute\n      }\n      \n      const newStock = req.body.type === 'ADJUSTMENT' \n        ? req.body.quantity \n        : previousStock + (multiplier * req.body.quantity);\n      \n      const transactionData = {\n        ...req.body,\n        userId: (req as any).session.userId,\n        previousStock,\n        newStock,\n      };\n      \n      const transaction = await InventoryTransaction.create(transactionData);\n      \n      const updatedProduct = await Product.findByIdAndUpdate(\n        req.body.productId,\n        { stockQty: newStock },\n        { new: true }\n      );\n      \n      // Check for low stock and create notification\n      if (updatedProduct && (req.body.type === 'OUT' || req.body.type === 'ADJUSTMENT')) {\n        await checkAndNotifyLowStock(updatedProduct);\n      }\n      \n      await transaction.populate(['productId', 'userId', 'supplierId', 'purchaseOrderId']);\n      res.json(transaction);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create transaction\" });\n    }\n  });\n\n  // Low stock alerts\n  app.get(\"/api/products/low-stock\", requireAuth, requirePermission('products', 'read'), async (req, res) => {\n    try {\n      const lowStockProducts = await Product.find({\n        $expr: { $lte: ['$stockQty', '$minStockLevel'] }\n      }).sort({ stockQty: 1 });\n      res.json(lowStockProducts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch low stock products\" });\n    }\n  });\n\n  // Product search by barcode/QR\n  app.get(\"/api/products/barcode/:barcode\", requireAuth, requirePermission('products', 'read'), async (req, res) => {\n    try {\n      const product = await Product.findOne({ barcode: req.params.barcode });\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  // Product returns with permission checks\n  app.get(\"/api/product-returns\", requireAuth, requirePermission('inventory', 'read'), async (req, res) => {\n    try {\n      const returns = await ProductReturn.find()\n        .populate('productId')\n        .populate('customerId')\n        .populate('orderId')\n        .populate('processedBy')\n        .sort({ returnDate: -1 });\n      res.json(returns);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch product returns\" });\n    }\n  });\n\n  app.post(\"/api/product-returns\", requireAuth, requirePermission('inventory', 'create'), async (req, res) => {\n    try {\n      const returnData = {\n        ...req.body,\n        returnDate: new Date(),\n      };\n      const productReturn = await ProductReturn.create(returnData);\n      await productReturn.populate(['productId', 'customerId', 'orderId']);\n      res.json(productReturn);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create product return\" });\n    }\n  });\n\n  app.patch(\"/api/product-returns/:id\", requireAuth, requirePermission('inventory', 'update'), async (req, res) => {\n    try {\n      const { status, refundAmount, restockable, notes } = req.body;\n      const updateData: any = { status, refundAmount, restockable, notes };\n      \n      if (status === 'processed') {\n        updateData.processedBy = (req as any).session.userId;\n        updateData.processedDate = new Date();\n        \n        // If approved and restockable, create inventory transaction\n        if (restockable) {\n          const productReturn = await ProductReturn.findById(req.params.id);\n          if (productReturn) {\n            await InventoryTransaction.create({\n              productId: productReturn.productId,\n              type: 'RETURN',\n              quantity: productReturn.quantity,\n              reason: `Product return: ${productReturn.reason}`,\n              userId: (req as any).session.userId,\n              returnId: productReturn._id,\n              date: new Date(),\n            });\n            \n            await Product.findByIdAndUpdate(\n              productReturn.productId,\n              { $inc: { stockQty: productReturn.quantity } }\n            );\n          }\n        }\n      }\n      \n      const updatedReturn = await ProductReturn.findByIdAndUpdate(\n        req.params.id,\n        updateData,\n        { new: true }\n      ).populate(['productId', 'customerId', 'orderId', 'processedBy']);\n      \n      if (!updatedReturn) {\n        return res.status(404).json({ error: \"Product return not found\" });\n      }\n      \n      res.json(updatedReturn);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update product return\" });\n    }\n  });\n\n  // Notifications with permission checks\n  app.get(\"/api/notifications\", requireAuth, requirePermission('notifications', 'read'), async (req, res) => {\n    try {\n      const notifications = await Notification.find().sort({ createdAt: -1 }).limit(50);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", requireAuth, requirePermission('notifications', 'update'), async (req, res) => {\n    try {\n      const notification = await Notification.findByIdAndUpdate(\n        req.params.id,\n        { read: true },\n        { new: true }\n      );\n      if (!notification) {\n        return res.status(404).json({ error: \"Notification not found\" });\n      }\n      res.json(notification);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update notification\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/mark-all-read\", requireAuth, requirePermission('notifications', 'update'), async (req, res) => {\n    try {\n      await Notification.updateMany({ read: false }, { read: true });\n      res.json({ success: true, message: \"All notifications marked as read\" });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  app.post(\"/api/notifications/create-test\", requireAuth, requirePermission('notifications', 'create'), async (req, res) => {\n    if (process.env.NODE_ENV !== 'development') {\n      return res.status(403).json({ error: \"Test endpoint only available in development\" });\n    }\n    \n    try {\n      const testNotifications = [\n        {\n          message: \"Low stock alert: Brake Pads Set (12 units remaining)\",\n          type: \"low_stock\",\n          read: false,\n        },\n        {\n          message: \"New order received from Rajesh Kumar - Order #ORD-2024-001\",\n          type: \"new_order\",\n          read: false,\n        },\n        {\n          message: \"Payment overdue: Invoice #INV-2024-045 (5 days)\",\n          type: \"payment_due\",\n          read: false,\n        },\n      ];\n      \n      const created = await Notification.insertMany(testNotifications);\n      res.json({ success: true, count: created.length, notifications: created });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create test notifications\" });\n    }\n  });\n\n  app.post(\"/api/notifications/check-overdue-payments\", requireAuth, requirePermission('notifications', 'create'), async (req, res) => {\n    try {\n      const overdueThresholdDays = 7; // Consider payments overdue after 7 days\n      const thresholdDate = new Date();\n      thresholdDate.setDate(thresholdDate.getDate() - overdueThresholdDays);\n      \n      // Find orders with payment status 'due' or 'partial' created before threshold date\n      const overdueOrders = await Order.find({\n        paymentStatus: { $in: ['due', 'partial'] },\n        createdAt: { $lt: thresholdDate }\n      }).populate('customerId');\n      \n      let notificationsCreated = 0;\n      \n      for (const order of overdueOrders) {\n        const orderAge = Math.floor((Date.now() - new Date(order.createdAt).getTime()) / (1000 * 60 * 60 * 24));\n        const daysOverdue = Math.max(orderAge - overdueThresholdDays, 1);\n        const customerName = order.customerId?.name || order.customerName || 'Unknown Customer';\n        \n        // Check if notification already exists for this order\n        const existingNotification = await Notification.findOne({\n          relatedId: order._id,\n          type: 'payment_due',\n          message: { $regex: 'overdue' }\n        });\n        \n        if (!existingNotification) {\n          await notifyPaymentOverdue(order, customerName, daysOverdue);\n          notificationsCreated++;\n        }\n      }\n      \n      res.json({ \n        success: true, \n        checked: overdueOrders.length, \n        notificationsCreated,\n        message: `Checked ${overdueOrders.length} overdue orders, created ${notificationsCreated} new notifications`\n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to check overdue payments\" });\n    }\n  });\n\n  // Dashboard stats - role-based analytics aligned with ROLE_PERMISSIONS\n  app.get(\"/api/dashboard-stats\", requireAuth, async (req, res) => {\n    try {\n      const userRole = (req as any).session.userRole;\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const stats: any = {};\n      const permissions: any = ROLE_PERMISSIONS[userRole as keyof typeof ROLE_PERMISSIONS] || {};\n      \n      // Admin sees everything (has permissions for all resources)\n      if (userRole === 'Admin') {\n        const todayOrders = await Order.find({ createdAt: { $gte: today } });\n        stats.todaySales = todayOrders.reduce((sum, order) => sum + order.total, 0);\n        stats.activeServices = await ServiceVisit.countDocuments({ \n          status: { $in: ['inquired', 'working', 'waiting'] } \n        });\n        stats.totalCustomers = await RegistrationCustomer.countDocuments();\n        stats.lowStockProducts = await Product.find({\n          $expr: { $lte: ['$stockQty', '$minStockLevel'] }\n        }).limit(5);\n        stats.totalEmployees = await User.countDocuments();\n        stats.totalProducts = await Product.countDocuments();\n      }\n      \n      // Manager sees all sections (comprehensive stats like Admin)\n      else if (userRole === 'Manager') {\n        const todayOrders = await Order.find({ createdAt: { $gte: today } });\n        stats.todaySales = todayOrders.reduce((sum, order) => sum + order.total, 0);\n        stats.activeServices = await ServiceVisit.countDocuments({ \n          status: { $in: ['inquired', 'working', 'waiting'] } \n        });\n        stats.totalCustomers = await RegistrationCustomer.countDocuments();\n        stats.lowStockProducts = await Product.find({\n          $expr: { $lte: ['$stockQty', '$minStockLevel'] }\n        }).limit(5);\n        stats.totalEmployees = await User.countDocuments();\n        stats.totalProducts = await Product.countDocuments();\n        stats.activeOrders = await Order.countDocuments({ \n          status: { $in: ['pending', 'processing'] } \n        });\n        stats.presentToday = await Attendance.countDocuments({ \n          date: today, \n          status: 'present' \n        });\n        stats.pendingLeaves = await Leave.countDocuments({ status: 'pending' });\n        stats.activeTasks = await Task.countDocuments({ \n          status: { $in: ['pending', 'in_progress'] } \n        });\n      }\n      \n      // Inventory Manager: only products and inventory (per ROLE_PERMISSIONS)\n      else if (userRole === 'Inventory Manager') {\n        stats.totalProducts = await Product.countDocuments();\n        stats.lowStockProducts = await Product.find({\n          $expr: { $lte: ['$stockQty', '$minStockLevel'] }\n        }).limit(5);\n        stats.totalInventoryValue = await Product.aggregate([\n          { $group: { _id: null, total: { $sum: { $multiply: ['$stockQty', '$sellingPrice'] } } } }\n        ]).then(result => result[0]?.total || 0);\n        stats.recentTransactions = await InventoryTransaction.countDocuments({ \n          createdAt: { $gte: today } \n        });\n      }\n      \n      // Sales Executive: service-related metrics (per ROLE_PERMISSIONS for orders)\n      else if (userRole === 'Sales Executive') {\n        stats.activeServices = await ServiceVisit.countDocuments({ \n          status: { $in: ['inquired', 'working', 'waiting'] } \n        });\n        stats.completedToday = await ServiceVisit.countDocuments({\n          status: 'completed',\n          'stageTimestamps.completed': { $gte: today }\n        });\n        stats.waitingServices = await ServiceVisit.countDocuments({ \n          status: 'waiting' \n        });\n        stats.totalServiceVisits = await ServiceVisit.countDocuments();\n        stats.inquiredServices = await ServiceVisit.countDocuments({ \n          status: 'inquired' \n        });\n        stats.workingServices = await ServiceVisit.countDocuments({ \n          status: 'working' \n        });\n      }\n      \n      // HR Manager: only employees and attendance (per ROLE_PERMISSIONS)\n      else if (userRole === 'HR Manager') {\n        stats.totalEmployees = await User.countDocuments();\n        stats.presentToday = await Attendance.countDocuments({ \n          date: today, \n          status: 'present' \n        });\n        stats.pendingLeaves = await Leave.countDocuments({ status: 'pending' });\n        stats.activeTasks = await Task.countDocuments({ \n          status: { $in: ['pending', 'in_progress'] } \n        });\n      }\n      \n      // Service Staff: only support tickets (per ROLE_PERMISSIONS)\n      else if (userRole === 'Service Staff') {\n        const userId = (req as any).session.userId;\n        // Support ticket statistics for Service Staff\n        stats.myOpenTickets = await SupportTicket.countDocuments({ \n          assignedTo: userId,\n          status: { $in: ['pending', 'in_progress'] } \n        });\n        stats.resolvedToday = await SupportTicket.countDocuments({\n          assignedTo: userId,\n          status: 'resolved',\n          resolvedAt: { $gte: today }\n        });\n        stats.urgentTickets = await SupportTicket.countDocuments({\n          assignedTo: userId,\n          priority: 'urgent',\n          status: { $in: ['pending', 'in_progress'] }\n        });\n      }\n      \n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Dashboard Analytics - Sales Trends (Last 7 Days)\n  app.get(\"/api/dashboard/sales-trends\", requireAuth, async (req, res) => {\n    try {\n      const days = [];\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      \n      for (let i = 6; i >= 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        date.setHours(0, 0, 0, 0);\n        \n        const nextDate = new Date(date);\n        nextDate.setDate(nextDate.getDate() + 1);\n        \n        const [invoices, orders] = await Promise.all([\n          Invoice.find({\n            createdAt: { $gte: date, $lt: nextDate },\n            status: { $in: ['approved', 'paid'] }\n          }),\n          Order.find({\n            createdAt: { $gte: date, $lt: nextDate }\n          })\n        ]);\n        \n        const sales = invoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);\n        const orderCount = orders.length;\n        \n        days.push({\n          day: dayNames[date.getDay()],\n          sales: Math.round(sales),\n          orders: orderCount\n        });\n      }\n      \n      res.json(days);\n    } catch (error) {\n      console.error('Sales trends error:', error);\n      res.status(500).json({ error: \"Failed to fetch sales trends\" });\n    }\n  });\n\n  // Dashboard Analytics - Service Status Distribution\n  app.get(\"/api/dashboard/service-status\", requireAuth, async (req, res) => {\n    try {\n      const [inquired, working, waiting, completed] = await Promise.all([\n        ServiceVisit.countDocuments({ status: 'inquired' }),\n        ServiceVisit.countDocuments({ status: 'working' }),\n        ServiceVisit.countDocuments({ status: 'waiting' }),\n        ServiceVisit.countDocuments({ status: 'completed' })\n      ]);\n      \n      res.json([\n        { name: 'Inquired', value: inquired, color: '#3b82f6' },\n        { name: 'Working', value: working, color: '#f59e0b' },\n        { name: 'Waiting', value: waiting, color: '#a855f7' },\n        { name: 'Completed', value: completed, color: '#10b981' }\n      ]);\n    } catch (error) {\n      console.error('Service status error:', error);\n      res.status(500).json({ error: \"Failed to fetch service status\" });\n    }\n  });\n\n  // Dashboard Analytics - Customer Growth (6 Months)\n  app.get(\"/api/dashboard/customer-growth\", requireAuth, async (req, res) => {\n    try {\n      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      const months = [];\n      \n      for (let i = 5; i >= 0; i--) {\n        const date = new Date();\n        date.setMonth(date.getMonth() - i);\n        date.setDate(1);\n        date.setHours(0, 0, 0, 0);\n        \n        const nextMonth = new Date(date);\n        nextMonth.setMonth(nextMonth.getMonth() + 1);\n        \n        const customerCount = await RegistrationCustomer.countDocuments({\n          createdAt: { $lt: nextMonth }\n        });\n        \n        months.push({\n          month: monthNames[date.getMonth()],\n          customers: customerCount\n        });\n      }\n      \n      res.json(months);\n    } catch (error) {\n      console.error('Customer growth error:', error);\n      res.status(500).json({ error: \"Failed to fetch customer growth\" });\n    }\n  });\n\n  // Dashboard Analytics - Product Categories\n  app.get(\"/api/dashboard/product-categories\", requireAuth, async (req, res) => {\n    try {\n      const categories = await Product.aggregate([\n        {\n          $group: {\n            _id: '$category',\n            count: { $sum: 1 },\n            value: { $sum: { $multiply: ['$stockQty', '$unitPrice'] } }\n          }\n        },\n        {\n          $sort: { count: -1 }\n        },\n        {\n          $limit: 10\n        }\n      ]);\n      \n      const formattedCategories = categories.map(cat => ({\n        category: cat._id || 'Uncategorized',\n        count: cat.count,\n        value: Math.round(cat.value)\n      }));\n      \n      res.json(formattedCategories);\n    } catch (error) {\n      console.error('Product categories error:', error);\n      res.status(500).json({ error: \"Failed to fetch product categories\" });\n    }\n  });\n\n\n  // Attendance with permission checks\n  app.get(\"/api/attendance\", requireAuth, requirePermission('attendance', 'read'), async (req, res) => {\n    try {\n      const { employeeId, startDate, endDate } = req.query;\n      const filter: any = {};\n      \n      if (employeeId) filter.employeeId = employeeId;\n      if (startDate && endDate) {\n        filter.date = { \n          $gte: new Date(startDate as string), \n          $lte: new Date(endDate as string) \n        };\n      }\n      \n      const attendance = await Attendance.find(filter)\n        .populate('employeeId')\n        .sort({ date: -1 });\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch attendance\" });\n    }\n  });\n\n  app.post(\"/api/attendance\", requireAuth, requirePermission('attendance', 'create'), async (req, res) => {\n    try {\n      const attendance = await Attendance.create(req.body);\n      await attendance.populate('employeeId');\n      res.json(attendance);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create attendance record\" });\n    }\n  });\n\n  app.patch(\"/api/attendance/:id\", requireAuth, requirePermission('attendance', 'update'), async (req, res) => {\n    try {\n      const attendance = await Attendance.findByIdAndUpdate(req.params.id, req.body, { new: true })\n        .populate('employeeId');\n      if (!attendance) {\n        return res.status(404).json({ error: \"Attendance record not found\" });\n      }\n      res.json(attendance);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update attendance\" });\n    }\n  });\n\n  // Leaves with permission checks\n  app.get(\"/api/leaves\", requireAuth, requirePermission('leaves', 'read'), async (req, res) => {\n    try {\n      const { employeeId, status } = req.query;\n      const filter: any = {};\n      \n      if (employeeId) filter.employeeId = employeeId;\n      if (status) filter.status = status;\n      \n      const leaves = await Leave.find(filter)\n        .populate('employeeId')\n        .populate('approvedBy')\n        .sort({ createdAt: -1 });\n      \n      console.log('📋 Fetched leaves:', leaves.map(l => ({\n        id: l._id,\n        employeeId: l.employeeId,\n        employeeIdType: typeof l.employeeId\n      })));\n      \n      res.json(leaves);\n    } catch (error) {\n      console.error('❌ Error fetching leaves:', error);\n      res.status(500).json({ error: \"Failed to fetch leaves\" });\n    }\n  });\n\n  app.post(\"/api/leaves\", requireAuth, requirePermission('leaves', 'create'), async (req, res) => {\n    try {\n      console.log('📋 Creating leave with data:', JSON.stringify(req.body, null, 2));\n      \n      const createData = { ...req.body };\n      if (createData.employeeId === '' || createData.employeeId === null) {\n        delete createData.employeeId;\n      }\n      \n      // Check if user/employee exists\n      if (createData.employeeId) {\n        const employeeExists = await User.findById(createData.employeeId);\n        console.log('🔍 Checking if user/employee exists:', {\n          requestedId: createData.employeeId,\n          exists: !!employeeExists,\n          employeeName: employeeExists?.name\n        });\n        \n        if (!employeeExists) {\n          console.error('❌ User/Employee not found with ID:', createData.employeeId);\n          // List all available users/employees\n          const allEmployees = await User.find({}).select('_id name role');\n          console.log('📋 Available users/employees:', allEmployees.map(e => ({\n            id: e._id.toString(),\n            name: e.name,\n            role: e.role\n          })));\n        }\n      }\n      \n      const leave = await Leave.create(createData);\n      console.log('💾 Leave created in database:', {\n        id: leave._id,\n        employeeId: leave.employeeId,\n        employeeIdType: typeof leave.employeeId\n      });\n      \n      await leave.populate('employeeId');\n      \n      console.log('📦 Leave after populate:', {\n        id: leave._id,\n        employeeId: leave.employeeId,\n        employeeName: leave.employeeId?.name\n      });\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'create',\n        resource: 'leave',\n        resourceId: leave._id.toString(),\n        description: `Created leave request for ${leave.employeeId?.name || 'employee'}`,\n        details: { type: leave.leaveType, status: leave.status },\n        ipAddress: req.ip,\n      });\n      \n      res.json(leave);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create leave request\" });\n    }\n  });\n\n  app.patch(\"/api/leaves/:id\", requireAuth, requirePermission('leaves', 'update'), async (req, res) => {\n    try {\n      console.log('📝 Updating leave with data:', JSON.stringify(req.body, null, 2));\n      \n      const updateData = { ...req.body };\n      if (updateData.employeeId === '' || updateData.employeeId === null) {\n        delete updateData.employeeId;\n      }\n      \n      console.log('📝 Final update data to save:', JSON.stringify(updateData, null, 2));\n      \n      const leave = await Leave.findByIdAndUpdate(req.params.id, updateData, { new: true })\n        .populate('employeeId')\n        .populate('approvedBy');\n      if (!leave) {\n        return res.status(404).json({ error: \"Leave request not found\" });\n      }\n      \n      console.log('✅ Leave updated successfully:', {\n        id: leave._id,\n        employeeId: leave.employeeId,\n        employeeName: leave.employeeId?.name\n      });\n      \n      const action = req.body.status === 'approved' ? 'approve' : req.body.status === 'rejected' ? 'reject' : 'update';\n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: action,\n        resource: 'leave',\n        resourceId: leave._id.toString(),\n        description: `${action === 'approve' ? 'Approved' : action === 'reject' ? 'Rejected' : 'Updated'} leave request for ${leave.employeeId?.name || 'employee'}`,\n        details: { status: leave.status, type: leave.leaveType },\n        ipAddress: req.ip,\n      });\n      \n      res.json(leave);\n    } catch (error) {\n      console.error('❌ Leave update error:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to update leave request\" });\n    }\n  });\n\n  app.delete(\"/api/leaves/:id\", requireAuth, requirePermission('leaves', 'delete'), async (req, res) => {\n    try {\n      const leave = await Leave.findByIdAndDelete(req.params.id);\n      if (!leave) {\n        return res.status(404).json({ error: \"Leave request not found\" });\n      }\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'delete',\n        resource: 'leave',\n        resourceId: leave._id.toString(),\n        description: `Deleted leave request`,\n        details: { status: leave.status, type: leave.leaveType },\n        ipAddress: req.ip,\n      });\n      \n      res.json({ message: \"Leave request deleted successfully\" });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete leave request\" });\n    }\n  });\n\n  // Tasks with permission checks\n  app.get(\"/api/tasks\", requireAuth, requirePermission('tasks', 'read'), async (req, res) => {\n    try {\n      const { assignedTo, status } = req.query;\n      const filter: any = {};\n      \n      if (assignedTo) filter.assignedTo = assignedTo;\n      if (status) filter.status = status;\n      \n      const tasks = await Task.find(filter)\n        .populate('assignedTo')\n        .populate('assignedBy')\n        .sort({ createdAt: -1 });\n      \n      console.log('📋 Fetched tasks:', tasks.map(t => ({\n        id: t._id,\n        title: t.title,\n        assignedTo: t.assignedTo,\n        assignedToType: typeof t.assignedTo\n      })));\n      \n      res.json(tasks);\n    } catch (error) {\n      console.error('❌ Error fetching tasks:', error);\n      res.status(500).json({ error: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", requireAuth, requirePermission('tasks', 'create'), async (req, res) => {\n    try {\n      console.log('📋 Creating task with data:', JSON.stringify(req.body, null, 2));\n      console.log('👤 Session userId:', (req as any).session.userId);\n      \n      const createData = { ...req.body };\n      if (createData.assignedTo === '' || createData.assignedTo === null) {\n        delete createData.assignedTo;\n      }\n      \n      // Check if user/employee exists\n      if (createData.assignedTo) {\n        const employeeExists = await User.findById(createData.assignedTo);\n        console.log('🔍 Checking if user/employee exists:', {\n          requestedId: createData.assignedTo,\n          exists: !!employeeExists,\n          employeeName: employeeExists?.name\n        });\n        \n        if (!employeeExists) {\n          console.error('❌ User/Employee not found with ID:', createData.assignedTo);\n          // List all available users/employees\n          const allEmployees = await User.find({}).select('_id name role');\n          console.log('📋 Available users/employees:', allEmployees.map(e => ({\n            id: e._id.toString(),\n            name: e.name,\n            role: e.role\n          })));\n        }\n      }\n      \n      const task = await Task.create(createData);\n      console.log('💾 Task created in database:', {\n        id: task._id,\n        assignedTo: task.assignedTo,\n        assignedToType: typeof task.assignedTo\n      });\n      \n      await task.populate('assignedTo');\n      await task.populate('assignedBy');\n      \n      console.log('📦 Task after populate:', {\n        id: task._id,\n        assignedTo: task.assignedTo,\n        assignedToName: task.assignedTo?.name\n      });\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'create',\n        resource: 'task',\n        resourceId: task._id.toString(),\n        description: `Created task: ${task.title} for ${task.assignedTo?.name || 'employee'}`,\n        details: { priority: task.priority, status: task.status },\n        ipAddress: req.ip,\n      });\n      \n      res.json(task);\n    } catch (error) {\n      console.error('❌ Task creation error:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to create task\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", requireAuth, requirePermission('tasks', 'update'), async (req, res) => {\n    try {\n      console.log('📝 Updating task with data:', JSON.stringify(req.body, null, 2));\n      \n      const updateData = { ...req.body };\n      if (updateData.assignedTo === '' || updateData.assignedTo === null) {\n        delete updateData.assignedTo;\n      }\n      \n      console.log('📝 Final update data to save:', JSON.stringify(updateData, null, 2));\n      \n      const task = await Task.findByIdAndUpdate(req.params.id, updateData, { new: true })\n        .populate('assignedTo')\n        .populate('assignedBy');\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      \n      console.log('✅ Task updated successfully:', {\n        id: task._id,\n        title: task.title,\n        assignedTo: task.assignedTo,\n        assignedToName: task.assignedTo?.name\n      });\n      \n      const action = req.body.status === 'completed' ? 'complete' : 'update';\n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: action,\n        resource: 'task',\n        resourceId: task._id.toString(),\n        description: `${action === 'complete' ? 'Completed' : 'Updated'} task: ${task.title}`,\n        details: { status: task.status, priority: task.priority },\n        ipAddress: req.ip,\n      });\n      \n      res.json(task);\n    } catch (error) {\n      console.error('❌ Task update error:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", requireAuth, requirePermission('tasks', 'delete'), async (req, res) => {\n    try {\n      const task = await Task.findByIdAndDelete(req.params.id);\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'delete',\n        resource: 'task',\n        resourceId: task._id.toString(),\n        description: `Deleted task: ${task.title}`,\n        details: { priority: task.priority, status: task.status },\n        ipAddress: req.ip,\n      });\n      \n      res.json({ message: \"Task deleted successfully\" });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete task\" });\n    }\n  });\n\n  // Communication logs with permission checks\n  app.get(\"/api/communication-logs\", requireAuth, requirePermission('communications', 'read'), async (req, res) => {\n    try {\n      const { customerId } = req.query;\n      const filter: any = {};\n      \n      if (customerId) filter.customerId = customerId;\n      \n      const logs = await CommunicationLog.find(filter)\n        .populate('customerId')\n        .populate('handledBy')\n        .sort({ date: -1 });\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch communication logs\" });\n    }\n  });\n\n  app.post(\"/api/communication-logs\", requireAuth, requirePermission('communications', 'create'), async (req, res) => {\n    try {\n      const log = await CommunicationLog.create(req.body);\n      await log.populate('customerId');\n      await log.populate('handledBy');\n      res.json(log);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create communication log\" });\n    }\n  });\n\n  // Feedbacks with permission checks\n  app.get(\"/api/feedbacks\", requireAuth, requirePermission('feedbacks', 'read'), async (req, res) => {\n    try {\n      const { customerId, type, status } = req.query;\n      const filter: any = {};\n      \n      if (customerId) filter.customerId = customerId;\n      if (type) filter.type = type;\n      if (status) filter.status = status;\n      \n      const feedbacks = await Feedback.find(filter)\n        .populate('customerId')\n        .populate('assignedTo')\n        .sort({ createdAt: -1 });\n      res.json(feedbacks);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch feedbacks\" });\n    }\n  });\n\n  app.post(\"/api/feedbacks\", requireAuth, requirePermission('feedbacks', 'create'), async (req, res) => {\n    try {\n      const feedback = await Feedback.create(req.body);\n      await feedback.populate('customerId');\n      res.json(feedback);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create feedback\" });\n    }\n  });\n\n  app.patch(\"/api/feedbacks/:id\", requireAuth, requirePermission('feedbacks', 'update'), async (req, res) => {\n    try {\n      const feedback = await Feedback.findByIdAndUpdate(req.params.id, req.body, { new: true })\n        .populate('customerId')\n        .populate('assignedTo');\n      if (!feedback) {\n        return res.status(404).json({ error: \"Feedback not found\" });\n      }\n      res.json(feedback);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update feedback\" });\n    }\n  });\n\n  app.get(\"/api/feedbacks/analytics/ratings\", requireAuth, requirePermission('feedbacks', 'read'), async (req, res) => {\n    try {\n      const ratingStats = await Feedback.aggregate([\n        {\n          $match: { rating: { $exists: true, $ne: null } }\n        },\n        {\n          $group: {\n            _id: {\n              year: { $year: '$createdAt' },\n              month: { $month: '$createdAt' }\n            },\n            averageRating: { $avg: '$rating' },\n            totalFeedbacks: { $sum: 1 },\n            ratingDistribution: {\n              $push: '$rating'\n            }\n          }\n        },\n        {\n          $sort: { '_id.year': -1, '_id.month': -1 }\n        }\n      ]);\n\n      const overallStats = await Feedback.aggregate([\n        {\n          $match: { rating: { $exists: true, $ne: null } }\n        },\n        {\n          $group: {\n            _id: null,\n            averageRating: { $avg: '$rating' },\n            totalFeedbacks: { $sum: 1 },\n            rating1: {\n              $sum: { $cond: [{ $eq: ['$rating', 1] }, 1, 0] }\n            },\n            rating2: {\n              $sum: { $cond: [{ $eq: ['$rating', 2] }, 1, 0] }\n            },\n            rating3: {\n              $sum: { $cond: [{ $eq: ['$rating', 3] }, 1, 0] }\n            },\n            rating4: {\n              $sum: { $cond: [{ $eq: ['$rating', 4] }, 1, 0] }\n            },\n            rating5: {\n              $sum: { $cond: [{ $eq: ['$rating', 5] }, 1, 0] }\n            }\n          }\n        }\n      ]);\n\n      res.json({\n        monthlyStats: ratingStats,\n        overallStats: overallStats[0] || {\n          averageRating: 0,\n          totalFeedbacks: 0,\n          rating1: 0,\n          rating2: 0,\n          rating3: 0,\n          rating4: 0,\n          rating5: 0\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch rating analytics\" });\n    }\n  });\n\n  // Support Tickets\n  app.get(\"/api/support-tickets\", requireAuth, requirePermission('supportTickets', 'read'), async (req, res) => {\n    try {\n      const { customerId, vehicleReg, status, priority } = req.query;\n      const filter: any = {};\n      \n      if (customerId) filter.customerId = customerId;\n      if (vehicleReg) filter.vehicleReg = new RegExp(vehicleReg as string, 'i');\n      if (status) filter.status = status;\n      if (priority) filter.priority = priority;\n      \n      const tickets = await SupportTicket.find(filter)\n        .populate('customerId', 'referenceCode fullName mobileNumber email city district isVerified')\n        .populate('vehicleId')\n        .populate('assignedTo', 'name email')\n        .populate('createdBy', 'name email')\n        .populate('feedbackId')\n        .sort({ createdAt: -1 })\n        .lean();\n      res.json(tickets);\n    } catch (error) {\n      console.error('Error fetching support tickets:', error);\n      res.status(500).json({ error: \"Failed to fetch support tickets\" });\n    }\n  });\n\n  app.get(\"/api/support-tickets/search\", requireAuth, requirePermission('supportTickets', 'read'), async (req, res) => {\n    try {\n      const { query } = req.query;\n      \n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      \n      const customers = await RegistrationCustomer.find({\n        $or: [\n          { customerId: new RegExp(query as string, 'i') },\n          { fullName: new RegExp(query as string, 'i') },\n          { mobileNumber: new RegExp(query as string, 'i') }\n        ]\n      }).select('_id customerId fullName mobileNumber');\n      \n      const vehicles = await RegistrationVehicle.find({\n        $or: [\n          { vehicleId: new RegExp(query as string, 'i') },\n          { vehicleRegistrationNumber: new RegExp(query as string, 'i') }\n        ]\n      }).select('_id vehicleId vehicleRegistrationNumber customerId');\n      \n      const customerIds = [...customers.map(c => c._id), ...vehicles.map(v => v.customerId)];\n      \n      const tickets = await SupportTicket.find({\n        $or: [\n          { customerId: { $in: customerIds } },\n          { vehicleReg: new RegExp(query as string, 'i') },\n          { ticketNumber: new RegExp(query as string, 'i') }\n        ]\n      })\n        .populate('customerId', 'referenceCode fullName mobileNumber email city district isVerified')\n        .populate('vehicleId')\n        .populate('assignedTo', 'name email')\n        .populate('createdBy', 'name email')\n        .sort({ createdAt: -1 })\n        .lean();\n      \n      res.json({ tickets, customers, vehicles });\n    } catch (error) {\n      console.error('Error searching support tickets:', error);\n      res.status(500).json({ error: \"Failed to search support tickets\" });\n    }\n  });\n\n  app.get(\"/api/support-tickets/customer/:customerId\", requireAuth, requirePermission('supportTickets', 'read'), async (req, res) => {\n    try {\n      const tickets = await SupportTicket.find({ customerId: req.params.customerId })\n        .populate('customerId', 'referenceCode fullName mobileNumber email city district isVerified')\n        .populate('vehicleId')\n        .populate('assignedTo', 'name email')\n        .populate('createdBy', 'name email')\n        .populate('feedbackId')\n        .sort({ createdAt: -1 })\n        .lean();\n      res.json(tickets);\n    } catch (error) {\n      console.error('Error fetching customer support history:', error);\n      res.status(500).json({ error: \"Failed to fetch customer support history\" });\n    }\n  });\n\n  app.post(\"/api/support-tickets\", requireAuth, requirePermission('supportTickets', 'create'), async (req, res) => {\n    try {\n      const ticketSeq = await getNextSequence('supportTicket');\n      const ticketNumber = `TKT${String(ticketSeq).padStart(5, '0')}`;\n      \n      const user = (req as any).user;\n      const ticketData = {\n        ...req.body,\n        ticketNumber,\n        createdBy: user.id,\n        assignedTo: user.id\n      };\n      \n      const ticket = await SupportTicket.create(ticketData);\n      await ticket.populate([\n        { path: 'customerId', select: 'referenceCode fullName mobileNumber email city district isVerified' },\n        { path: 'vehicleId' },\n        { path: 'assignedTo', select: 'name email' },\n        { path: 'createdBy', select: 'name email' }\n      ]);\n      \n      await logActivity({\n        userId: user.id,\n        userName: user.name,\n        userRole: user.role,\n        action: 'create',\n        resource: 'support_ticket',\n        resourceId: ticket._id.toString(),\n        description: `Created support ticket ${ticketNumber} for customer`\n      });\n      \n      res.json(ticket);\n    } catch (error: any) {\n      console.error('Error creating support ticket:', error);\n      res.status(400).json({ error: error.message || \"Failed to create support ticket\" });\n    }\n  });\n\n  app.patch(\"/api/support-tickets/:id\", requireAuth, requirePermission('supportTickets', 'update'), async (req, res) => {\n    try {\n      const updates = { ...req.body };\n      \n      if (updates.status === 'resolved' && !updates.resolvedAt) {\n        updates.resolvedAt = new Date();\n      }\n      \n      if (updates.status === 'closed' && !updates.closedAt) {\n        updates.closedAt = new Date();\n      }\n      \n      const ticket = await SupportTicket.findByIdAndUpdate(\n        req.params.id, \n        updates, \n        { new: true }\n      )\n        .populate('customerId', 'referenceCode fullName mobileNumber email city district isVerified')\n        .populate('vehicleId')\n        .populate('assignedTo', 'name email')\n        .populate('createdBy', 'name email')\n        .populate('feedbackId');\n      \n      if (!ticket) {\n        return res.status(404).json({ error: \"Support ticket not found\" });\n      }\n      \n      const user = (req as any).user;\n      await logActivity({\n        userId: user.id,\n        userName: user.name,\n        userRole: user.role,\n        action: 'update',\n        resource: 'support_ticket',\n        resourceId: ticket._id.toString(),\n        description: `Updated support ticket ${ticket.ticketNumber}`\n      });\n      \n      res.json(ticket);\n    } catch (error) {\n      console.error('Error updating support ticket:', error);\n      res.status(400).json({ error: \"Failed to update support ticket\" });\n    }\n  });\n\n  app.post(\"/api/support-tickets/:id/notes\", requireAuth, requirePermission('supportTickets', 'update'), async (req, res) => {\n    try {\n      const { note } = req.body;\n      const user = (req as any).user;\n      \n      if (!note) {\n        return res.status(400).json({ error: \"Note is required\" });\n      }\n      \n      const ticket = await SupportTicket.findByIdAndUpdate(\n        req.params.id,\n        {\n          $push: {\n            notes: {\n              note,\n              addedBy: user.id,\n              addedAt: new Date()\n            }\n          }\n        },\n        { new: true }\n      )\n        .populate('customerId', 'referenceCode fullName mobileNumber email city district isVerified')\n        .populate('assignedTo', 'name email')\n        .populate('createdBy', 'name email')\n        .populate('notes.addedBy', 'name email');\n      \n      if (!ticket) {\n        return res.status(404).json({ error: \"Support ticket not found\" });\n      }\n      \n      res.json(ticket);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to add note\" });\n    }\n  });\n\n  app.post(\"/api/support-tickets/:id/send-whatsapp\", requireAuth, requirePermission('supportTickets', 'update'), async (req, res) => {\n    try {\n      const ticket = await SupportTicket.findById(req.params.id).populate('customerId');\n      \n      if (!ticket) {\n        return res.status(404).json({ error: \"Support ticket not found\" });\n      }\n      \n      await SupportTicket.findByIdAndUpdate(req.params.id, {\n        whatsappFollowUp: {\n          sent: true,\n          sentAt: new Date(),\n          message: \"Follow-up message sent (dummy implementation)\"\n        }\n      });\n      \n      res.json({ success: true, message: \"WhatsApp follow-up marked as sent (dummy)\" });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to send WhatsApp follow-up\" });\n    }\n  });\n\n  app.post(\"/api/support-tickets/:id/send-feedback\", requireAuth, requirePermission('supportTickets', 'update'), async (req, res) => {\n    try {\n      const ticket = await SupportTicket.findById(req.params.id).populate('customerId');\n      \n      if (!ticket) {\n        return res.status(404).json({ error: \"Support ticket not found\" });\n      }\n      \n      await SupportTicket.findByIdAndUpdate(req.params.id, {\n        feedbackSent: {\n          sent: true,\n          sentAt: new Date()\n        }\n      });\n      \n      res.json({ success: true, message: \"Feedback form link sent (dummy)\" });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to send feedback form\" });\n    }\n  });\n\n  app.post(\"/api/support-tickets/auto-close\", requireAuth, async (req, res) => {\n    try {\n      const threeDaysAgo = new Date();\n      threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);\n      \n      const result = await SupportTicket.updateMany(\n        {\n          status: 'resolved',\n          resolvedAt: { $lte: threeDaysAgo },\n          closedAt: { $exists: false }\n        },\n        {\n          $set: {\n            status: 'closed',\n            closedAt: new Date()\n          }\n        }\n      );\n      \n      res.json({ \n        success: true, \n        message: `Auto-closed ${result.modifiedCount} resolved tickets older than 3 days` \n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to auto-close tickets\" });\n    }\n  });\n\n  app.delete(\"/api/support-tickets/:id\", requireAuth, requirePermission('supportTickets', 'delete'), async (req, res) => {\n    try {\n      const ticket = await SupportTicket.findById(req.params.id);\n      \n      if (!ticket) {\n        return res.status(404).json({ error: \"Support ticket not found\" });\n      }\n      \n      const user = (req as any).user;\n      await logActivity({\n        userId: user.id,\n        userName: user.name,\n        userRole: user.role,\n        action: 'delete',\n        resource: 'support_ticket',\n        resourceId: ticket._id.toString(),\n        description: `Deleted support ticket ${ticket.ticketNumber}`\n      });\n      \n      await SupportTicket.findByIdAndDelete(req.params.id);\n      \n      res.json({ success: true, message: \"Support ticket deleted successfully\" });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete support ticket\" });\n    }\n  });\n\n  // Reports - Admin and HR Manager can access\n  app.get(\"/api/reports/sales\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const { startDate, endDate, period = 'daily' } = req.query;\n      const matchStage: any = { status: 'approved' };\n      \n      if (startDate && endDate) {\n        matchStage.createdAt = { \n          $gte: new Date(startDate as string), \n          $lte: new Date(endDate as string) \n        };\n      }\n      \n      const groupFormat = period === 'monthly' \n        ? { year: { $year: '$createdAt' }, month: { $month: '$createdAt' } }\n        : { year: { $year: '$createdAt' }, month: { $month: '$createdAt' }, day: { $dayOfMonth: '$createdAt' } };\n      \n      const salesReport = await Invoice.aggregate([\n        { $match: matchStage },\n        {\n          $group: {\n            _id: groupFormat,\n            totalSales: { $sum: '$totalAmount' },\n            totalOrders: { $sum: 1 },\n            avgOrderValue: { $avg: '$totalAmount' }\n          }\n        },\n        { $sort: { '_id.year': -1, '_id.month': -1, '_id.day': -1 } }\n      ]);\n      \n      res.json(salesReport);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate sales report\" });\n    }\n  });\n\n  app.get(\"/api/reports/inventory\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const lowStockProducts = await Product.find({\n        $expr: { $lte: ['$stockQty', '$minStockLevel'] }\n      }).sort({ stockQty: 1 });\n      \n      const outOfStockProducts = await Product.find({ stockQty: 0 });\n      \n      const totalInventoryValue = await Product.aggregate([\n        {\n          $group: {\n            _id: null,\n            totalValue: { $sum: { $multiply: ['$stockQty', '$sellingPrice'] } },\n            totalItems: { $sum: '$stockQty' }\n          }\n        }\n      ]);\n      \n      res.json({\n        lowStockProducts,\n        outOfStockProducts,\n        totalInventoryValue: totalInventoryValue[0] || { totalValue: 0, totalItems: 0 }\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate inventory report\" });\n    }\n  });\n\n  app.get(\"/api/reports/top-products\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const { limit = 10 } = req.query;\n      \n      const topProducts = await Invoice.aggregate([\n        { $match: { status: 'approved' } },\n        { $unwind: '$items' },\n        { $match: { 'items.type': 'product' } },\n        {\n          $group: {\n            _id: '$items.productId',\n            totalQuantity: { $sum: '$items.quantity' },\n            totalRevenue: { $sum: '$items.totalPrice' },\n            orderCount: { $sum: 1 }\n          }\n        },\n        { $sort: { totalRevenue: -1 } },\n        { $limit: parseInt(limit as string) },\n        {\n          $lookup: {\n            from: 'products',\n            localField: '_id',\n            foreignField: '_id',\n            as: 'product'\n          }\n        },\n        { $unwind: '$product' }\n      ]);\n      \n      res.json(topProducts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate top products report\" });\n    }\n  });\n\n  app.get(\"/api/reports/employee-performance\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const employeeSales = await Invoice.aggregate([\n        { $match: { status: 'approved', salesExecutiveId: { $exists: true, $ne: null } } },\n        {\n          $group: {\n            _id: '$salesExecutiveId',\n            totalSales: { $sum: '$totalAmount' },\n            orderCount: { $sum: 1 },\n            avgOrderValue: { $avg: '$totalAmount' }\n          }\n        },\n        {\n          $lookup: {\n            from: 'employees',\n            localField: '_id',\n            foreignField: '_id',\n            as: 'employee'\n          }\n        },\n        { $unwind: '$employee' },\n        { $sort: { totalSales: -1 } }\n      ]);\n      \n      res.json(employeeSales);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate employee performance report\" });\n    }\n  });\n\n  // Enhanced Sales Report with Invoice and Coupon data\n  app.get(\"/api/reports/sales-enhanced\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const matchStage: any = { status: 'approved' };\n      \n      if (startDate && endDate) {\n        matchStage.createdAt = { \n          $gte: new Date(startDate as string), \n          $lte: new Date(endDate as string) \n        };\n      }\n      \n      const [invoiceStats, couponStats] = await Promise.all([\n        Invoice.aggregate([\n          { $match: matchStage },\n          {\n            $group: {\n              _id: null,\n              totalInvoices: { $sum: 1 },\n              totalRevenue: { $sum: '$totalAmount' },\n              totalDiscount: { $sum: '$discountAmount' },\n              avgInvoiceValue: { $avg: '$totalAmount' }\n            }\n          }\n        ]),\n        Invoice.aggregate([\n          { $match: { ...matchStage, couponCode: { $exists: true, $ne: null } } },\n          {\n            $group: {\n              _id: '$couponCode',\n              usageCount: { $sum: 1 },\n              totalDiscount: { $sum: '$discountAmount' }\n            }\n          },\n          { $sort: { usageCount: -1 } }\n        ])\n      ]);\n      \n      res.json({\n        invoices: invoiceStats[0] || { totalInvoices: 0, totalRevenue: 0, totalDiscount: 0, avgInvoiceValue: 0 },\n        coupons: couponStats\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate enhanced sales report\" });\n    }\n  });\n\n  // Customer Report\n  app.get(\"/api/reports/customers\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const now = new Date();\n      const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      \n      const [\n        totalCustomers,\n        newCustomers,\n        verifiedCustomers,\n        referredCustomers,\n        repeatCustomers\n      ] = await Promise.all([\n        RegistrationCustomer.countDocuments(),\n        RegistrationCustomer.countDocuments({ createdAt: { $gte: thirtyDaysAgo } }),\n        RegistrationCustomer.countDocuments({ isVerified: true }),\n        RegistrationCustomer.countDocuments({ referralSource: { $exists: true, $nin: [null, ''] } }),\n        Invoice.aggregate([\n          {\n            $group: {\n              _id: '$customerId',\n              invoiceCount: { $sum: 1 }\n            }\n          },\n          { $match: { invoiceCount: { $gt: 1 } } },\n          { $count: 'repeatCustomers' }\n        ])\n      ]);\n      \n      const customersByReferralSource = await RegistrationCustomer.aggregate([\n        { $match: { referralSource: { $exists: true, $nin: [null, ''] } } },\n        {\n          $group: {\n            _id: '$referralSource',\n            count: { $sum: 1 }\n          }\n        },\n        { $sort: { count: -1 } }\n      ]);\n      \n      res.json({\n        total: totalCustomers,\n        active: verifiedCustomers,\n        new: newCustomers,\n        repeat: repeatCustomers[0]?.repeatCustomers || 0,\n        referred: referredCustomers,\n        byReferralSource: customersByReferralSource\n      });\n    } catch (error) {\n      console.error('Customer report error:', error);\n      res.status(500).json({ error: \"Failed to generate customer report\" });\n    }\n  });\n\n  // Enhanced Inventory Report with Brand and Color Analysis\n  app.get(\"/api/reports/inventory-enhanced\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const [brandWise, colorWise, lowStock, outOfStock, totalValue] = await Promise.all([\n        Product.aggregate([\n          {\n            $group: {\n              _id: '$brand',\n              totalProducts: { $sum: 1 },\n              totalStock: { $sum: '$stockQty' },\n              totalValue: { $sum: { $multiply: ['$stockQty', '$sellingPrice'] } },\n              avgPrice: { $avg: '$sellingPrice' }\n            }\n          },\n          { $sort: { totalValue: -1 } }\n        ]),\n        Product.aggregate([\n          { $unwind: '$variants' },\n          {\n            $group: {\n              _id: '$variants.color',\n              totalProducts: { $sum: 1 },\n              totalStock: { $sum: '$stockQty' }\n            }\n          },\n          { $match: { _id: { $ne: null } } },\n          { $sort: { totalProducts: -1 } }\n        ]),\n        Product.find({\n          $expr: { $lte: ['$stockQty', '$minStockLevel'] },\n          stockQty: { $gt: 0 }\n        }).select('name brand stockQty minStockLevel sellingPrice').sort({ stockQty: 1 }).limit(50),\n        Product.find({ stockQty: 0 }).select('name brand category sellingPrice').limit(50),\n        Product.aggregate([\n          {\n            $group: {\n              _id: null,\n              totalValue: { $sum: { $multiply: ['$stockQty', '$sellingPrice'] } },\n              totalItems: { $sum: '$stockQty' },\n              totalProducts: { $sum: 1 }\n            }\n          }\n        ])\n      ]);\n      \n      res.json({\n        brandWise,\n        colorWise,\n        lowStockProducts: lowStock,\n        outOfStockProducts: outOfStock,\n        totalInventoryValue: totalValue[0] || { totalValue: 0, totalItems: 0, totalProducts: 0 }\n      });\n    } catch (error) {\n      console.error('Inventory report error:', error);\n      res.status(500).json({ error: \"Failed to generate enhanced inventory report\" });\n    }\n  });\n\n  // Warranty Report\n  app.get(\"/api/reports/warranties\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const now = new Date();\n      const thirtyDaysFromNow = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);\n      \n      const [activeWarranties, expiringWarranties, expiredWarranties, warrantyByProduct] = await Promise.all([\n        Warranty.countDocuments({ \n          status: 'active',\n          endDate: { $gt: now }\n        }),\n        Warranty.find({\n          status: 'active',\n          endDate: { $gt: now, $lte: thirtyDaysFromNow }\n        }).populate('customerId', 'fullName mobileNumber').sort({ endDate: 1 }).limit(100),\n        Warranty.countDocuments({\n          $or: [\n            { status: 'expired' },\n            { endDate: { $lte: now } }\n          ]\n        }),\n        Warranty.aggregate([\n          {\n            $group: {\n              _id: '$productName',\n              count: { $sum: 1 },\n              activeCount: {\n                $sum: {\n                  $cond: [\n                    { $and: [\n                      { $eq: ['$status', 'active'] },\n                      { $gt: ['$endDate', now] }\n                    ]},\n                    1,\n                    0\n                  ]\n                }\n              }\n            }\n          },\n          { $sort: { count: -1 } },\n          { $limit: 20 }\n        ])\n      ]);\n      \n      const allWarranties = await Warranty.find({})\n        .populate('customerId', 'fullName mobileNumber')\n        .sort({ createdAt: -1 })\n        .limit(100);\n      \n      res.json({\n        active: activeWarranties,\n        expiring: expiringWarranties,\n        expiringCount: expiringWarranties.length,\n        expired: expiredWarranties,\n        byProduct: warrantyByProduct,\n        recentWarranties: allWarranties\n      });\n    } catch (error) {\n      console.error('Warranty report error:', error);\n      res.status(500).json({ error: \"Failed to generate warranty report\" });\n    }\n  });\n\n  // Feedback Report\n  app.get(\"/api/reports/feedback\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const [ratingStats, typeStats, statusStats, priorityStats, recentFeedback] = await Promise.all([\n        Feedback.aggregate([\n          { $match: { rating: { $exists: true, $ne: null } } },\n          {\n            $group: {\n              _id: '$rating',\n              count: { $sum: 1 }\n            }\n          },\n          { $sort: { _id: 1 } }\n        ]),\n        Feedback.aggregate([\n          {\n            $group: {\n              _id: '$type',\n              count: { $sum: 1 },\n              avgRating: { $avg: '$rating' }\n            }\n          }\n        ]),\n        Feedback.aggregate([\n          {\n            $group: {\n              _id: '$status',\n              count: { $sum: 1 }\n            }\n          }\n        ]),\n        Feedback.aggregate([\n          {\n            $group: {\n              _id: '$priority',\n              count: { $sum: 1 }\n            }\n          }\n        ]),\n        Feedback.find({})\n          .populate('customerId', 'fullName mobileNumber')\n          .populate('assignedTo', 'name role')\n          .sort({ createdAt: -1 })\n          .limit(50)\n      ]);\n      \n      const avgRating = await Feedback.aggregate([\n        { $match: { rating: { $exists: true, $ne: null } } },\n        {\n          $group: {\n            _id: null,\n            avgRating: { $avg: '$rating' },\n            totalRated: { $sum: 1 }\n          }\n        }\n      ]);\n      \n      const complaints = await Feedback.countDocuments({ type: 'complaint' });\n      const openComplaints = await Feedback.countDocuments({ \n        type: 'complaint', \n        status: { $in: ['open', 'in_progress'] } \n      });\n      \n      res.json({\n        ratingDistribution: ratingStats,\n        byType: typeStats,\n        byStatus: statusStats,\n        byPriority: priorityStats,\n        averageRating: avgRating[0]?.avgRating || 0,\n        totalRated: avgRating[0]?.totalRated || 0,\n        totalComplaints: complaints,\n        openComplaints: openComplaints,\n        recentFeedback: recentFeedback\n      });\n    } catch (error) {\n      console.error('Feedback report error:', error);\n      res.status(500).json({ error: \"Failed to generate feedback report\" });\n    }\n  });\n\n  // Dashboard Overview - Comprehensive Analytics\n  app.get(\"/api/reports/dashboard\", requireAuth, async (req, res) => {\n    try {\n      const now = new Date();\n      const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      \n      const [\n        totalSales,\n        totalInvoices,\n        lowStockCount,\n        activeWarranties,\n        openComplaints,\n        newCustomers\n      ] = await Promise.all([\n        Invoice.aggregate([\n          { $match: { status: 'approved', createdAt: { $gte: thirtyDaysAgo } } },\n          { $group: { _id: null, total: { $sum: '$totalAmount' } } }\n        ]),\n        Invoice.countDocuments({ status: 'approved', createdAt: { $gte: thirtyDaysAgo } }),\n        Product.countDocuments({ $expr: { $lte: ['$stockQty', '$minStockLevel'] } }),\n        Warranty.countDocuments({ status: 'active', endDate: { $gt: now } }),\n        Feedback.countDocuments({ type: 'complaint', status: { $in: ['open', 'in_progress'] } }),\n        RegistrationCustomer.countDocuments({ createdAt: { $gte: thirtyDaysAgo } })\n      ]);\n      \n      res.json({\n        totalSales: totalSales[0]?.total || 0,\n        totalInvoices,\n        lowStockCount,\n        activeWarranties,\n        openComplaints,\n        newCustomers\n      });\n    } catch (error) {\n      console.error('Dashboard report error:', error);\n      res.status(500).json({ error: \"Failed to generate dashboard report\" });\n    }\n  });\n\n  // Email Report Endpoints\n  app.get(\"/api/reports/email/preview\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const reportData = await generateDailyReportData();\n      const htmlContent = formatDailyReportHTML(reportData);\n      \n      res.setHeader('Content-Type', 'text/html');\n      res.send(htmlContent);\n    } catch (error) {\n      console.error('Email preview error:', error);\n      res.status(500).json({ error: \"Failed to generate email preview\" });\n    }\n  });\n\n  app.post(\"/api/reports/email/send\", requireAuth, requirePermission('reports', 'create'), async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ error: \"Email address is required\" });\n      }\n      \n      const result = await sendDailyReportEmail(email);\n      \n      if (result.success) {\n        await logActivity({\n          userId: (req as any).session.userId,\n          userName: (req as any).session.userName,\n          userRole: (req as any).session.userRole,\n          action: 'create',\n          resource: 'other',\n          description: `Daily email report sent to ${email}`,\n        });\n        \n        res.json({ \n          success: true, \n          message: \"Daily report email has been queued for sending\",\n          note: \"Email integration (SendGrid/Resend) must be configured for actual email delivery\" \n        });\n      } else {\n        res.status(500).json({ error: result.error || \"Failed to send email\" });\n      }\n    } catch (error) {\n      console.error('Email send error:', error);\n      res.status(500).json({ error: \"Failed to send email report\" });\n    }\n  });\n\n  app.get(\"/api/reports/email/data\", requireAuth, requirePermission('reports', 'read'), async (req, res) => {\n    try {\n      const reportData = await generateDailyReportData();\n      res.json(reportData);\n    } catch (error) {\n      console.error('Email data error:', error);\n      res.status(500).json({ error: \"Failed to generate report data\" });\n    }\n  });\n\n  // New Customer Registration System Routes\n  // Customer registration with OTP verification\n  app.post(\"/api/registration/customers\", async (req, res) => {\n    try {\n      const validatedData = insertCustomerSchema.parse(req.body);\n      \n      // Check if mobile number already exists\n      const existing = await RegistrationCustomer.findOne({ mobileNumber: validatedData.mobileNumber });\n      if (existing) {\n        return res.status(400).json({ error: \"Mobile number already registered\" });\n      }\n      \n      // Generate reference code\n      const stateCodeMap: Record<string, string> = {\n        \"Andhra Pradesh\": \"AP\", \"Arunachal Pradesh\": \"AR\", \"Assam\": \"AS\", \"Bihar\": \"BR\",\n        \"Chhattisgarh\": \"CG\", \"Goa\": \"GA\", \"Gujarat\": \"GJ\", \"Haryana\": \"HR\",\n        \"Himachal Pradesh\": \"HP\", \"Jharkhand\": \"JH\", \"Karnataka\": \"KA\", \"Kerala\": \"KL\",\n        \"Madhya Pradesh\": \"MP\", \"Maharashtra\": \"MH\", \"Manipur\": \"MN\", \"Meghalaya\": \"ML\",\n        \"Mizoram\": \"MZ\", \"Nagaland\": \"NL\", \"Odisha\": \"OD\", \"Punjab\": \"PB\",\n        \"Rajasthan\": \"RJ\", \"Sikkim\": \"SK\", \"Tamil Nadu\": \"TN\", \"Telangana\": \"TS\",\n        \"Tripura\": \"TR\", \"Uttar Pradesh\": \"UP\", \"Uttarakhand\": \"UK\", \"West Bengal\": \"WB\"\n      };\n      \n      const stateCode = stateCodeMap[validatedData.state] || validatedData.state.substring(0, 2).toUpperCase();\n      const customerCount = await RegistrationCustomer.countDocuments();\n      const referenceCode = `CUST-${stateCode}-${String(customerCount + 1).padStart(6, '0')}`;\n      \n      // Generate OTP\n      const otp = Math.floor(100000 + Math.random() * 900000).toString();\n      const otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n      \n      // Capture who registered the customer (if authenticated)\n      const registeredBy = (req as any).user ? (req as any).user.name : null;\n      const registeredByRole = (req as any).user ? (req as any).user.role : null;\n      \n      const customer = await RegistrationCustomer.create({\n        ...validatedData,\n        referenceCode,\n        isVerified: false,\n        otp,\n        otpExpiresAt,\n        registeredBy,\n        registeredByRole\n      });\n      \n      // Send OTP via WhatsApp\n      console.log(`OTP for ${customer.mobileNumber}: ${otp}`);\n      const whatsappResult = await sendWhatsAppOTP({\n        to: customer.mobileNumber,\n        otp\n      });\n      \n      if (!whatsappResult.success) {\n        console.warn('⚠️ WhatsApp OTP send failed:', whatsappResult.error);\n      }\n      \n      res.json({ \n        customerId: customer._id.toString(),\n        message: \"OTP sent successfully\",\n        whatsappSent: whatsappResult.success,\n        whatsappError: whatsappResult.error\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to register customer\" });\n    }\n  });\n  \n  // Verify OTP\n  app.post(\"/api/registration/verify-otp\", async (req, res) => {\n    try {\n      const { customerId, otp } = req.body;\n      \n      const customer = await RegistrationCustomer.findById(customerId);\n      if (!customer) {\n        return res.status(404).json({ error: \"Customer not found\" });\n      }\n      \n      if (!customer.otp || !customer.otpExpiresAt) {\n        return res.status(400).json({ error: \"No OTP found for this customer\" });\n      }\n      \n      if (new Date() > customer.otpExpiresAt) {\n        return res.status(400).json({ error: \"OTP has expired\" });\n      }\n      \n      if (customer.otp !== otp) {\n        return res.status(400).json({ error: \"Invalid OTP\" });\n      }\n      \n      customer.isVerified = true;\n      customer.otp = null;\n      customer.otpExpiresAt = null;\n      await customer.save();\n      \n      // Log customer creation activity (after verification)\n      await logActivity({\n        userId: customer._id.toString(),\n        userName: customer.fullName,\n        userRole: 'Customer',\n        action: 'create',\n        resource: 'customer',\n        resourceId: customer._id.toString(),\n        description: `New customer registered: ${customer.fullName}`,\n        details: { referenceCode: customer.referenceCode, mobile: customer.mobileNumber },\n        ipAddress: req.ip,\n      });\n      \n      res.json({ \n        success: true,\n        customer: {\n          id: customer._id.toString(),\n          referenceCode: customer.referenceCode,\n          fullName: customer.fullName,\n          mobileNumber: customer.mobileNumber,\n          alternativeNumber: customer.alternativeNumber,\n          email: customer.email,\n          address: customer.address,\n          city: customer.city,\n          taluka: customer.taluka,\n          district: customer.district,\n          state: customer.state,\n          pinCode: customer.pinCode,\n          referralSource: customer.referralSource,\n          isVerified: customer.isVerified,\n          createdAt: customer.createdAt,\n        },\n        message: \"Customer verified successfully\"\n      });\n    } catch (error) {\n      res.status(400).json({ error: \"OTP verification failed\" });\n    }\n  });\n  \n  // Add vehicle to customer\n  app.post(\"/api/registration/vehicles\", async (req, res) => {\n    try {\n      const validatedData = insertVehicleSchema.parse(req.body);\n      \n      // Check if customer exists\n      const customer = await RegistrationCustomer.findById(validatedData.customerId);\n      if (!customer) {\n        return res.status(404).json({ error: \"Customer not found\" });\n      }\n      \n      // Check if vehicle number already exists (only if vehicle number is provided)\n      if (validatedData.vehicleNumber) {\n        const existing = await RegistrationVehicle.findOne({ vehicleNumber: validatedData.vehicleNumber });\n        if (existing) {\n          return res.status(400).json({ error: \"Vehicle number already registered\" });\n        }\n      }\n      \n      // Generate unique vehicle ID (VEH001, VEH002, etc.)\n      const vehicleSeq = await getNextSequence('vehicle');\n      const vehicleId = `VEH${String(vehicleSeq).padStart(3, '0')}`;\n      \n      const vehicle = await RegistrationVehicle.create({\n        ...validatedData,\n        vehicleId\n      });\n      \n      res.json({ \n        vehicle: {\n          id: vehicle._id.toString(),\n          vehicleId: vehicle.vehicleId,\n          customerId: vehicle.customerId,\n          vehicleNumber: vehicle.vehicleNumber,\n          vehicleBrand: vehicle.vehicleBrand,\n          vehicleModel: vehicle.vehicleModel,\n          customModel: vehicle.customModel,\n          variant: vehicle.variant,\n          color: vehicle.color,\n          yearOfPurchase: vehicle.yearOfPurchase,\n          vehiclePhoto: vehicle.vehiclePhoto,\n          isNewVehicle: vehicle.isNewVehicle,\n          chassisNumber: vehicle.chassisNumber,\n          selectedParts: vehicle.selectedParts,\n          warrantyCards: vehicle.warrantyCards,\n          createdAt: vehicle.createdAt,\n        },\n        customer: {\n          id: customer._id.toString(),\n          referenceCode: customer.referenceCode,\n          fullName: customer.fullName,\n        },\n        message: \"Vehicle registered successfully\"\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to register vehicle\" });\n    }\n  });\n  \n  // Complete registration - Send welcome message\n  app.post(\"/api/registration/complete\", async (req, res) => {\n    try {\n      const { customerId } = req.body;\n      \n      const customer = await RegistrationCustomer.findById(customerId);\n      if (!customer) {\n        return res.status(404).json({ error: \"Customer not found\" });\n      }\n      \n      // Get customer's vehicles\n      const vehicles = await RegistrationVehicle.find({ customerId: customer._id });\n      \n      // Create service visit in \"inquired\" status for each vehicle\n      for (const vehicle of vehicles) {\n        const existingVisit = await ServiceVisit.findOne({\n          customerId: customer._id,\n          vehicleReg: vehicle.vehicleNumber || vehicle.vehicleId,\n          status: 'inquired'\n        });\n        \n        if (!existingVisit) {\n          await ServiceVisit.create({\n            customerId: customer._id,\n            vehicleReg: vehicle.vehicleNumber || vehicle.vehicleId,\n            status: 'inquired',\n            handlerIds: [],\n            notes: 'Auto-created from customer registration'\n          });\n        }\n      }\n      \n      // Send WhatsApp welcome message with customer ID\n      const whatsappResult = await sendWhatsAppWelcome({\n        to: customer.mobileNumber,\n        templateName: process.env.WHATSAPP_TEMPLATE_NAME || 'crmtestingcustomer',\n        customerId: customer.referenceCode\n      });\n      \n      if (!whatsappResult.success) {\n        console.warn('⚠️ WhatsApp welcome message send failed:', whatsappResult.error);\n      } else {\n        console.log('✅ WhatsApp welcome message sent successfully to', customer.mobileNumber);\n      }\n      \n      res.json({ \n        success: true,\n        whatsappSent: whatsappResult.success,\n        whatsappError: whatsappResult.error,\n        message: \"Registration completed successfully\"\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to complete registration\" });\n    }\n  });\n\n  // Get customer with vehicles\n  app.get(\"/api/registration/customers/:id\", async (req, res) => {\n    try {\n      const customer = await RegistrationCustomer.findById(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ error: \"Customer not found\" });\n      }\n      \n      const vehicles = await RegistrationVehicle.find({ customerId: req.params.id });\n      \n      res.json({ \n        customer: {\n          id: customer._id.toString(),\n          referenceCode: customer.referenceCode,\n          fullName: customer.fullName,\n          mobileNumber: customer.mobileNumber,\n          alternativeNumber: customer.alternativeNumber,\n          email: customer.email,\n          address: customer.address,\n          city: customer.city,\n          taluka: customer.taluka,\n          district: customer.district,\n          state: customer.state,\n          pinCode: customer.pinCode,\n          referralSource: customer.referralSource,\n          isVerified: customer.isVerified,\n          registeredBy: customer.registeredBy,\n          registeredByRole: customer.registeredByRole,\n          createdAt: customer.createdAt,\n        },\n        vehicles: vehicles.map(v => ({\n          id: v._id.toString(),\n          vehicleId: v.vehicleId,\n          customerId: v.customerId,\n          vehicleNumber: v.vehicleNumber,\n          vehicleBrand: v.vehicleBrand,\n          vehicleModel: v.vehicleModel,\n          customModel: v.customModel,\n          variant: v.variant,\n          color: v.color,\n          yearOfPurchase: v.yearOfPurchase,\n          vehiclePhoto: v.vehiclePhoto,\n          isNewVehicle: v.isNewVehicle,\n          chassisNumber: v.chassisNumber,\n          selectedParts: v.selectedParts,\n          createdAt: v.createdAt,\n        }))\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch customer\" });\n    }\n  });\n  \n  // Get all registered customers with filtering\n  app.get(\"/api/registration/customers\", async (req, res) => {\n    try {\n      const { city, district, state, isVerified } = req.query;\n      const filters: any = {};\n      \n      if (city) filters.city = city as string;\n      if (district) filters.district = district as string;\n      if (state) filters.state = state as string;\n      if (isVerified !== undefined) filters.isVerified = isVerified === 'true';\n      \n      const customers = await RegistrationCustomer.find(filters).sort({ createdAt: -1 });\n      \n      res.json(customers.map(c => ({\n        id: c._id.toString(),\n        referenceCode: c.referenceCode,\n        fullName: c.fullName,\n        mobileNumber: c.mobileNumber,\n        alternativeNumber: c.alternativeNumber,\n        email: c.email,\n        address: c.address,\n        city: c.city,\n        taluka: c.taluka,\n        district: c.district,\n        state: c.state,\n        pinCode: c.pinCode,\n        referralSource: c.referralSource,\n        isVerified: c.isVerified,\n        registeredBy: c.registeredBy,\n        registeredByRole: c.registeredByRole,\n        createdAt: c.createdAt,\n      })));\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch customers\" });\n    }\n  });\n  \n  // Get vehicles by customer\n  app.get(\"/api/registration/customers/:id/vehicles\", async (req, res) => {\n    try {\n      const vehicles = await RegistrationVehicle.find({ customerId: req.params.id });\n      res.json(vehicles.map(v => ({\n        id: v._id.toString(),\n        vehicleId: v.vehicleId,\n        customerId: v.customerId,\n        vehicleNumber: v.vehicleNumber,\n        vehicleBrand: v.vehicleBrand,\n        vehicleModel: v.vehicleModel,\n        customModel: v.customModel,\n        variant: v.variant,\n        color: v.color,\n        yearOfPurchase: v.yearOfPurchase,\n        vehiclePhoto: v.vehiclePhoto,\n        isNewVehicle: v.isNewVehicle,\n        chassisNumber: v.chassisNumber,\n        selectedParts: v.selectedParts,\n        warrantyCards: v.warrantyCards,\n        createdAt: v.createdAt,\n      })));\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch vehicles\" });\n    }\n  });\n  \n  // Get all vehicles (for search functionality)\n  app.get(\"/api/registration/vehicles\", async (req, res) => {\n    try {\n      const vehicles = await RegistrationVehicle.find({}).sort({ createdAt: -1 });\n      res.json(vehicles.map(v => ({\n        id: v._id.toString(),\n        vehicleId: v.vehicleId,\n        customerId: v.customerId,\n        vehicleNumber: v.vehicleNumber,\n        vehicleBrand: v.vehicleBrand,\n        vehicleModel: v.vehicleModel,\n        customModel: v.customModel,\n        variant: v.variant,\n        color: v.color,\n        yearOfPurchase: v.yearOfPurchase,\n        vehiclePhoto: v.vehiclePhoto,\n        isNewVehicle: v.isNewVehicle,\n        chassisNumber: v.chassisNumber,\n        selectedParts: v.selectedParts,\n        warrantyCards: v.warrantyCards,\n        createdAt: v.createdAt,\n      })));\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch vehicles\" });\n    }\n  });\n  \n  // Update vehicle\n  app.patch(\"/api/registration/vehicles/:id\", async (req, res) => {\n    try {\n      const vehicle = await RegistrationVehicle.findByIdAndUpdate(req.params.id, req.body, { new: true });\n      if (!vehicle) {\n        return res.status(404).json({ error: \"Vehicle not found\" });\n      }\n      res.json({\n        id: vehicle._id.toString(),\n        vehicleId: vehicle.vehicleId,\n        customerId: vehicle.customerId,\n        vehicleNumber: vehicle.vehicleNumber,\n        vehicleBrand: vehicle.vehicleBrand,\n        vehicleModel: vehicle.vehicleModel,\n        customModel: vehicle.customModel,\n        variant: vehicle.variant,\n        color: vehicle.color,\n        yearOfPurchase: vehicle.yearOfPurchase,\n        vehiclePhoto: vehicle.vehiclePhoto,\n        isNewVehicle: vehicle.isNewVehicle,\n        chassisNumber: vehicle.chassisNumber,\n        selectedParts: vehicle.selectedParts,\n        warrantyCards: vehicle.warrantyCards,\n        createdAt: vehicle.createdAt,\n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update vehicle\" });\n    }\n  });\n  \n  // Delete vehicle\n  app.delete(\"/api/registration/vehicles/:id\", async (req, res) => {\n    try {\n      await RegistrationVehicle.findByIdAndDelete(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete vehicle\" });\n    }\n  });\n  \n  // Resend OTP\n  app.post(\"/api/registration/resend-otp\", async (req, res) => {\n    try {\n      const { customerId } = req.body;\n      \n      const customer = await RegistrationCustomer.findById(customerId);\n      if (!customer) {\n        return res.status(404).json({ error: \"Customer not found\" });\n      }\n      \n      if (customer.isVerified) {\n        return res.status(400).json({ error: \"Customer already verified\" });\n      }\n      \n      // Generate new OTP\n      const otp = Math.floor(100000 + Math.random() * 900000).toString();\n      const otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000);\n      \n      customer.otp = otp;\n      customer.otpExpiresAt = otpExpiresAt;\n      await customer.save();\n      \n      // TODO: Send OTP via SMS/WhatsApp\n      console.log(`New OTP for ${customer.mobileNumber}: ${otp}`);\n      \n      res.json({ \n        message: \"OTP resent successfully\"\n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to resend OTP\" });\n    }\n  });\n  \n  // Update customer (Admin only)\n  app.patch(\"/api/registration/customers/:id\", requireAuth, requirePermission(\"customers\", \"update\"), async (req, res) => {\n    try {\n      const customer = await RegistrationCustomer.findById(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ error: \"Customer not found\" });\n      }\n      \n      // Update customer fields\n      const updateData = req.body;\n      Object.keys(updateData).forEach(key => {\n        if (updateData[key] !== undefined && key !== '_id' && key !== 'referenceCode') {\n          (customer as any)[key] = updateData[key];\n        }\n      });\n      \n      await customer.save();\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'update',\n        resource: 'customer',\n        resourceId: customer._id.toString(),\n        description: `Updated customer: ${customer.fullName}`,\n        details: { referenceCode: customer.referenceCode },\n        ipAddress: req.ip,\n      });\n      \n      res.json({\n        id: customer._id.toString(),\n        referenceCode: customer.referenceCode,\n        fullName: customer.fullName,\n        mobileNumber: customer.mobileNumber,\n        alternativeNumber: customer.alternativeNumber,\n        email: customer.email,\n        address: customer.address,\n        city: customer.city,\n        taluka: customer.taluka,\n        district: customer.district,\n        state: customer.state,\n        pinCode: customer.pinCode,\n        isVerified: customer.isVerified,\n        createdAt: customer.createdAt,\n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update customer\" });\n    }\n  });\n  \n  // Delete customer (Admin only) with cascade deletion\n  app.delete(\"/api/registration/customers/:id\", requireAuth, requirePermission(\"customers\", \"delete\"), async (req, res) => {\n    try {\n      const customer = await RegistrationCustomer.findById(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ error: \"Customer not found\" });\n      }\n      \n      // Count related records before deletion for logging\n      const [vehicleCount, serviceVisitCount, supportTicketCount] = await Promise.all([\n        RegistrationVehicle.countDocuments({ customerId: req.params.id }),\n        ServiceVisit.countDocuments({ customerId: req.params.id }),\n        SupportTicket.countDocuments({ customerId: req.params.id })\n      ]);\n      \n      // Cascade delete all related records\n      await Promise.all([\n        // Delete all vehicles associated with this customer\n        RegistrationVehicle.deleteMany({ customerId: req.params.id }),\n        // Delete all service visits associated with this customer\n        ServiceVisit.deleteMany({ customerId: req.params.id }),\n        // Delete all support tickets associated with this customer\n        SupportTicket.deleteMany({ customerId: req.params.id })\n      ]);\n      \n      // Delete the customer\n      await RegistrationCustomer.findByIdAndDelete(req.params.id);\n      \n      await logActivity({\n        userId: (req as any).session.userId,\n        userName: (req as any).session.userName,\n        userRole: (req as any).session.userRole,\n        action: 'delete',\n        resource: 'customer',\n        resourceId: customer._id.toString(),\n        description: `Deleted customer: ${customer.fullName} (cascade deleted ${vehicleCount} vehicles, ${serviceVisitCount} service visits, ${supportTicketCount} support tickets)`,\n        details: { \n          referenceCode: customer.referenceCode,\n          cascadeDeleted: {\n            vehicles: vehicleCount,\n            serviceVisits: serviceVisitCount,\n            supportTickets: supportTicketCount\n          }\n        },\n        ipAddress: req.ip,\n      });\n      \n      res.json({ \n        success: true, \n        message: `Customer deleted successfully along with ${vehicleCount} vehicles, ${serviceVisitCount} service visits, and ${supportTicketCount} support tickets` \n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete customer\" });\n    }\n  });\n\n  app.get(\"/api/activity-logs\", requireAuth, requireRole('Admin'), async (req, res) => {\n    try {\n      const { limit = 50, role, resource, startDate, endDate } = req.query;\n      \n      const query: any = {};\n      \n      if (role) {\n        query.userRole = role;\n      }\n      \n      if (resource) {\n        query.resource = resource;\n      }\n      \n      if (startDate || endDate) {\n        query.createdAt = {};\n        if (startDate) {\n          query.createdAt.$gte = new Date(startDate as string);\n        }\n        if (endDate) {\n          query.createdAt.$lte = new Date(endDate as string);\n        }\n      }\n      \n      const activities = await ActivityLog.find(query)\n        .sort({ createdAt: -1 })\n        .limit(parseInt(limit as string))\n        .lean();\n      \n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch activity logs\" });\n    }\n  });\n\n  app.post(\"/api/activity-logs\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const userName = (req as any).session.userName;\n      const userRole = (req as any).session.userRole;\n      \n      const { action, resource, resourceId, description, details } = req.body;\n      \n      const activity = await ActivityLog.create({\n        userId,\n        userName,\n        userRole,\n        action,\n        resource,\n        resourceId,\n        description,\n        details,\n        ipAddress: req.ip,\n      });\n      \n      res.json(activity);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create activity log\" });\n    }\n  });\n\n  // Migration endpoint to add vehicleId to existing vehicles\n  app.post(\"/api/migrate/vehicle-ids\", requireAuth, requireRole('Admin'), async (req, res) => {\n    try {\n      const vehiclesWithoutId = await RegistrationVehicle.find({ \n        $or: [\n          { vehicleId: { $exists: false } },\n          { vehicleId: null },\n          { vehicleId: '' }\n        ]\n      });\n      \n      let updated = 0;\n      for (const vehicle of vehiclesWithoutId) {\n        const vehicleSeq = await getNextSequence('vehicle');\n        const vehicleId = `VEH${String(vehicleSeq).padStart(3, '0')}`;\n        \n        await RegistrationVehicle.updateOne(\n          { _id: vehicle._id },\n          { $set: { vehicleId } }\n        );\n        updated++;\n      }\n      \n      res.json({ \n        success: true, \n        message: `Updated ${updated} vehicles with Vehicle IDs`,\n        updated \n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Migration failed\" });\n    }\n  });\n\n  // ==================== INVOICES ====================\n  \n  // Get all invoices\n  app.get(\"/api/invoices\", requireAuth, requirePermission('invoices', 'read'), async (req, res) => {\n    try {\n      const { status, paymentStatus, customerId, fromDate, toDate } = req.query;\n      const userRole = (req as any).session.userRole;\n      const userId = (req as any).session.userId;\n      \n      let query: any = {};\n      \n      // Sales Executive can only see their own invoices\n      if (userRole === 'Sales Executive') {\n        query.createdBy = userId;\n      }\n      \n      if (status) {\n        query.status = status;\n      }\n      \n      if (paymentStatus) {\n        query.paymentStatus = paymentStatus;\n      }\n      \n      if (customerId) {\n        query.customerId = customerId;\n      }\n      \n      if (fromDate || toDate) {\n        query.createdAt = {};\n        if (fromDate) query.createdAt.$gte = new Date(fromDate as string);\n        if (toDate) query.createdAt.$lte = new Date(toDate as string);\n      }\n      \n      const invoices = await Invoice.find(query)\n        .populate('customerId', 'fullName mobileNumber email')\n        .populate('createdBy', 'name email')\n        .populate('salesExecutiveId', 'name')\n        .populate('approvalStatus.approvedBy', 'name')\n        .populate('approvalStatus.rejectedBy', 'name')\n        .sort({ createdAt: -1 })\n        .lean();\n      \n      res.json(invoices);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch invoices\" });\n    }\n  });\n  \n  // Get single invoice\n  app.get(\"/api/invoices/:id\", requireAuth, requirePermission('invoices', 'read'), async (req, res) => {\n    try {\n      const invoice = await Invoice.findById(req.params.id)\n        .populate('customerId')\n        .populate('createdBy', 'name email')\n        .populate('salesExecutiveId', 'name')\n        .populate('serviceVisitId')\n        .populate('orderId')\n        .populate('items.productId')\n        .populate('approvalStatus.approvedBy', 'name')\n        .populate('approvalStatus.rejectedBy', 'name')\n        .lean();\n      \n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch invoice\" });\n    }\n  });\n  \n  // Create invoice from service visit\n  app.post(\"/api/invoices/from-service-visit\", requireAuth, requirePermission('invoices', 'create'), async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const userName = (req as any).session.userName;\n      const userRole = (req as any).session.userRole;\n      \n      const { \n        serviceVisitId, \n        items, \n        couponCode,\n        taxRate = 18,\n        notes,\n        terms\n      } = req.body;\n      \n      // Fetch service visit\n      const serviceVisit = await ServiceVisit.findById(serviceVisitId).populate('customerId');\n      if (!serviceVisit) {\n        return res.status(404).json({ error: \"Service visit not found\" });\n      }\n      \n      if (!serviceVisit.customerId) {\n        return res.status(400).json({ error: \"Service visit has no associated customer\" });\n      }\n      \n      if (serviceVisit.status !== 'completed') {\n        return res.status(400).json({ error: \"Can only generate invoice for completed service visits\" });\n      }\n      \n      // Fetch all vehicles for this customer\n      const customer = serviceVisit.customerId as any;\n      const vehicles = await RegistrationVehicle.find({ \n        customerId: customer._id.toString() \n      }).lean();\n      \n      // Build customer details object with ALL fields\n      const customerDetails = {\n        referenceCode: customer.referenceCode,\n        fullName: customer.fullName,\n        mobileNumber: customer.mobileNumber,\n        alternativeNumber: customer.alternativeNumber,\n        email: customer.email,\n        address: customer.address,\n        city: customer.city,\n        taluka: customer.taluka,\n        district: customer.district,\n        state: customer.state,\n        pinCode: customer.pinCode,\n        referralSource: customer.referralSource,\n        isVerified: customer.isVerified,\n        registrationDate: customer.createdAt,\n      };\n      \n      // Build vehicle details array with ALL fields\n      const vehicleDetails = vehicles.map(vehicle => ({\n        vehicleId: vehicle.vehicleId,\n        vehicleNumber: vehicle.vehicleNumber,\n        vehicleBrand: vehicle.vehicleBrand,\n        vehicleModel: vehicle.vehicleModel,\n        customModel: vehicle.customModel,\n        variant: vehicle.variant,\n        color: vehicle.color,\n        yearOfPurchase: vehicle.yearOfPurchase,\n        vehiclePhoto: vehicle.vehiclePhoto,\n        isNewVehicle: vehicle.isNewVehicle,\n        chassisNumber: vehicle.chassisNumber,\n        selectedParts: vehicle.selectedParts,\n        vehicleRegistrationDate: vehicle.createdAt,\n      }));\n      \n      // Calculate subtotal\n      const subtotal = items.reduce((sum: number, item: any) => sum + item.total, 0);\n      \n      // Apply coupon if provided\n      let discountAmount = 0;\n      let couponId = null;\n      let discountType = 'none';\n      let discountValue = 0;\n      \n      if (couponCode) {\n        const coupon = await Coupon.findOne({ code: couponCode.toUpperCase() });\n        if (coupon) {\n          const validation = coupon.isValid(customer._id.toString(), subtotal);\n          if (validation.valid) {\n            discountAmount = coupon.calculateDiscount(subtotal);\n            couponId = coupon._id;\n            discountType = coupon.discountType;\n            discountValue = coupon.discountValue;\n          }\n        }\n      }\n      \n      // Calculate tax and total\n      const amountAfterDiscount = subtotal - discountAmount;\n      const taxAmount = (amountAfterDiscount * taxRate) / 100;\n      const totalAmount = amountAfterDiscount + taxAmount;\n      \n      // Create invoice (using new + save to trigger pre-save hooks)\n      const invoice = new Invoice({\n        serviceVisitId,\n        customerId: customer._id,\n        customerDetails,\n        vehicleDetails,\n        items,\n        subtotal,\n        discountType,\n        discountValue,\n        discountAmount,\n        couponCode: couponCode?.toUpperCase(),\n        couponId,\n        taxRate,\n        taxAmount,\n        totalAmount,\n        dueAmount: totalAmount,\n        createdBy: userId,\n        status: 'pending_approval',\n        notes,\n        terms\n      });\n      \n      await invoice.save();\n      \n      // Update coupon usage if applicable\n      if (couponId) {\n        await Coupon.findByIdAndUpdate(couponId, {\n          $inc: { usedCount: 1 },\n          $push: {\n            usageHistory: {\n              invoiceId: invoice._id,\n              customerId: serviceVisit.customerId._id,\n              discountApplied: discountAmount\n            }\n          }\n        });\n      }\n      \n      await logActivity({\n        userId,\n        userName,\n        userRole,\n        action: 'create',\n        resource: 'other',\n        resourceId: invoice._id.toString(),\n        description: `Created invoice ${invoice.invoiceNumber} for ${customerDetails.fullName} with ${vehicleDetails.length} vehicle(s)`,\n        ipAddress: req.ip,\n      });\n      \n      res.json(invoice);\n    } catch (error) {\n      console.error('Invoice creation error:', error);\n      res.status(500).json({ error: \"Failed to create invoice\" });\n    }\n  });\n  \n  // Approve invoice\n  app.post(\"/api/invoices/:id/approve\", requireAuth, requirePermission('invoices', 'approve'), async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const userName = (req as any).session.userName;\n      const userRole = (req as any).session.userRole;\n      \n      const invoice = await Invoice.findById(req.params.id)\n        .populate('customerId')\n        .populate('serviceVisitId');\n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      if (invoice.status !== 'pending_approval') {\n        console.log(`Invoice approval failed: Invoice ${req.params.id} has status \"${invoice.status}\", expected \"pending_approval\"`);\n        return res.status(400).json({ \n          error: \"Invoice is not pending approval\", \n          currentStatus: invoice.status \n        });\n      }\n      \n      invoice.status = 'approved';\n      invoice.approvalStatus = {\n        approvedBy: userId,\n        approvedAt: new Date()\n      } as any;\n      \n      // Generate secure access token for WhatsApp PDF delivery BEFORE PDF generation\n      const crypto = await import('crypto');\n      invoice.pdfAccessToken = crypto.randomBytes(32).toString('hex');\n      // Token expires in 7 days\n      const tokenExpiry = new Date();\n      tokenExpiry.setDate(tokenExpiry.getDate() + 7);\n      invoice.pdfTokenExpiry = tokenExpiry;\n      \n      await invoice.save();\n      \n      // Generate PDF\n      try {\n        const pdfData = {\n          invoiceNumber: invoice.invoiceNumber,\n          createdAt: invoice.createdAt,\n          dueDate: invoice.dueDate,\n          customerDetails: invoice.customerDetails,\n          vehicleDetails: invoice.vehicleDetails || [],\n          items: invoice.items.map((item: any) => ({\n            name: item.name,\n            description: item.description,\n            quantity: item.quantity,\n            unitPrice: item.unitPrice,\n            total: item.total,\n            hasGst: item.hasGst,\n            gstAmount: item.gstAmount,\n          })),\n          subtotal: invoice.subtotal,\n          discountType: invoice.discountType,\n          discountValue: invoice.discountValue,\n          discountAmount: invoice.discountAmount,\n          taxRate: invoice.taxRate,\n          taxAmount: invoice.taxAmount,\n          totalAmount: invoice.totalAmount,\n          paidAmount: invoice.paidAmount,\n          dueAmount: invoice.dueAmount,\n          notes: invoice.notes,\n          terms: invoice.terms,\n        };\n\n        const pdfPath = await generateInvoicePDF(pdfData);\n        invoice.pdfPath = pdfPath;\n        await invoice.save();\n      } catch (pdfError) {\n        console.error('PDF generation error:', pdfError);\n      }\n      \n      // Create warranties for items that have warranty enabled\n      try {\n        const warrantyPromises = invoice.items\n          .filter((item: any) => item.hasWarranty && item.type === 'product')\n          .map(async (item: any) => {\n            const product = await Product.findById(item.productId);\n            if (!product || !product.warranty) return null;\n\n            const durationMonths = parseInt(product.warranty.match(/\\d+/)?.[0] || '12');\n            const startDate = new Date();\n            const endDate = new Date(startDate);\n            endDate.setMonth(endDate.getMonth() + durationMonths);\n\n            return Warranty.create({\n              invoiceId: invoice._id,\n              customerId: invoice.customerId,\n              productId: item.productId,\n              productName: item.name,\n              warrantyType: 'manufacturer',\n              durationMonths,\n              startDate,\n              endDate,\n              coverage: product.warranty,\n              status: 'active'\n            });\n          });\n\n        await Promise.all(warrantyPromises);\n      } catch (warrantyError) {\n        console.error('Warranty creation error:', warrantyError);\n      }\n      \n      // Send WhatsApp and Email notifications with PDF (stub implementation)\n      try {\n        await sendInvoiceNotifications(invoice);\n      } catch (notificationError) {\n        console.error('Notification sending error:', notificationError);\n      }\n      \n      try {\n        await logActivity({\n          userId,\n          userName,\n          userRole,\n          action: 'approve',\n          resource: 'other',\n          resourceId: invoice._id.toString(),\n          description: `Approved invoice ${invoice.invoiceNumber}`,\n          ipAddress: req.ip,\n        });\n      } catch (activityError) {\n        console.error('Activity logging error:', activityError);\n      }\n      \n      res.json(invoice);\n    } catch (error) {\n      console.error('Invoice approval error:', error);\n      res.status(500).json({ error: \"Failed to approve invoice\", details: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n  \n  // Reject invoice\n  app.post(\"/api/invoices/:id/reject\", requireAuth, requirePermission('invoices', 'reject'), async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const userName = (req as any).session.userName;\n      const userRole = (req as any).session.userRole;\n      const { reason } = req.body;\n      \n      const invoice = await Invoice.findById(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      if (invoice.status !== 'pending_approval') {\n        return res.status(400).json({ error: \"Invoice is not pending approval\" });\n      }\n      \n      invoice.status = 'rejected';\n      invoice.approvalStatus = {\n        rejectedBy: userId,\n        rejectedAt: new Date(),\n        rejectionReason: reason\n      } as any;\n      \n      await invoice.save();\n      \n      await logActivity({\n        userId,\n        userName,\n        userRole,\n        action: 'reject',\n        resource: 'other',\n        resourceId: invoice._id.toString(),\n        description: `Rejected invoice ${invoice.invoiceNumber}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to reject invoice\" });\n    }\n  });\n  \n  // Update invoice payment status\n  app.patch(\"/api/invoices/:id/payment-status\", requireAuth, requirePermission('invoices', 'update'), async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const userName = (req as any).session.userName;\n      const userRole = (req as any).session.userRole;\n      const { paymentStatus } = req.body;\n      \n      if (!paymentStatus || !['paid', 'unpaid', 'partial'].includes(paymentStatus)) {\n        return res.status(400).json({ error: \"Invalid payment status. Must be 'paid', 'unpaid', or 'partial'\" });\n      }\n      \n      const invoice = await Invoice.findById(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      if (invoice.status !== 'approved') {\n        return res.status(400).json({ error: \"Can only update payment status for approved invoices\" });\n      }\n      \n      const oldStatus = invoice.paymentStatus;\n      invoice.paymentStatus = paymentStatus;\n      \n      // Update paid and due amounts based on the status\n      if (paymentStatus === 'paid') {\n        invoice.paidAmount = invoice.totalAmount;\n        invoice.dueAmount = 0;\n      } else if (paymentStatus === 'unpaid') {\n        invoice.paidAmount = 0;\n        invoice.dueAmount = invoice.totalAmount;\n      }\n      \n      await invoice.save();\n      \n      await logActivity({\n        userId,\n        userName,\n        userRole,\n        action: 'update',\n        resource: 'other',\n        resourceId: invoice._id.toString(),\n        description: `Updated payment status for invoice ${invoice.invoiceNumber} from ${oldStatus} to ${paymentStatus}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json(invoice);\n    } catch (error) {\n      console.error('Update payment status error:', error);\n      res.status(500).json({ error: \"Failed to update payment status\" });\n    }\n  });\n  \n  // Download invoice PDF (authenticated)\n  app.get(\"/api/invoices/:id/pdf\", requireAuth, async (req, res) => {\n    try {\n      const invoice = await Invoice.findById(req.params.id).populate('serviceVisitId');\n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      let pdfPath = invoice.pdfPath;\n      \n      if (!pdfPath || !fs.existsSync(pdfPath)) {\n        const pdfData = {\n          invoiceNumber: invoice.invoiceNumber,\n          createdAt: invoice.createdAt,\n          dueDate: invoice.dueDate,\n          customerDetails: invoice.customerDetails,\n          vehicleDetails: invoice.vehicleDetails || [],\n          items: invoice.items.map((item: any) => ({\n            name: item.name,\n            description: item.description,\n            quantity: item.quantity,\n            unitPrice: item.unitPrice,\n            total: item.total,\n            hasGst: item.hasGst,\n            gstAmount: item.gstAmount,\n          })),\n          subtotal: invoice.subtotal,\n          discountType: invoice.discountType,\n          discountValue: invoice.discountValue,\n          discountAmount: invoice.discountAmount,\n          taxRate: invoice.taxRate,\n          taxAmount: invoice.taxAmount,\n          totalAmount: invoice.totalAmount,\n          paidAmount: invoice.paidAmount,\n          dueAmount: invoice.dueAmount,\n          notes: invoice.notes,\n          terms: invoice.terms,\n        };\n\n        pdfPath = await generateInvoicePDF(pdfData);\n        invoice.pdfPath = pdfPath;\n        await invoice.save();\n      }\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${invoice.invoiceNumber.replace(/\\//g, '_')}.pdf\"`);\n      \n      const fileStream = fs.createReadStream(pdfPath);\n      fileStream.on('error', (error) => {\n        console.error('File stream error:', error);\n        res.status(500).json({ error: \"Failed to stream PDF\" });\n      });\n      fileStream.pipe(res);\n    } catch (error) {\n      console.error('PDF download error:', error);\n      res.status(500).json({ error: \"Failed to download PDF\" });\n    }\n  });\n  \n  // Download invoice PDF with token (public endpoint for WhatsApp integration)\n  app.get(\"/api/public/invoices/:id/pdf\", async (req, res) => {\n    try {\n      const { token } = req.query;\n      const invoice = await Invoice.findById(req.params.id).populate('serviceVisitId');\n      \n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      if (invoice.status !== 'approved') {\n        return res.status(400).json({ error: \"PDF can only be accessed for approved invoices\" });\n      }\n      \n      // Verify token\n      const expectedToken = invoice.pdfAccessToken;\n      const tokenExpiry = invoice.pdfTokenExpiry;\n      \n      if (!expectedToken || expectedToken !== token) {\n        console.log('Invalid PDF access token for invoice:', invoice.invoiceNumber);\n        return res.status(403).json({ error: \"Invalid or missing access token\" });\n      }\n      \n      if (tokenExpiry && new Date() > new Date(tokenExpiry)) {\n        console.log('Expired PDF access token for invoice:', invoice.invoiceNumber);\n        return res.status(403).json({ error: \"Access token has expired\" });\n      }\n      \n      let pdfPath = invoice.pdfPath;\n      \n      if (!pdfPath || !fs.existsSync(pdfPath)) {\n        const pdfData = {\n          invoiceNumber: invoice.invoiceNumber,\n          createdAt: invoice.createdAt,\n          dueDate: invoice.dueDate,\n          customerDetails: invoice.customerDetails,\n          vehicleDetails: invoice.vehicleDetails || [],\n          items: invoice.items.map((item: any) => ({\n            name: item.name,\n            description: item.description,\n            quantity: item.quantity,\n            unitPrice: item.unitPrice,\n            total: item.total,\n            hasGst: item.hasGst,\n            gstAmount: item.gstAmount,\n          })),\n          subtotal: invoice.subtotal,\n          discountType: invoice.discountType,\n          discountValue: invoice.discountValue,\n          discountAmount: invoice.discountAmount,\n          taxRate: invoice.taxRate,\n          taxAmount: invoice.taxAmount,\n          totalAmount: invoice.totalAmount,\n          paidAmount: invoice.paidAmount,\n          dueAmount: invoice.dueAmount,\n          notes: invoice.notes,\n          terms: invoice.terms,\n        };\n\n        pdfPath = await generateInvoicePDF(pdfData);\n        invoice.pdfPath = pdfPath;\n        await invoice.save();\n      }\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `inline; filename=\"${invoice.invoiceNumber.replace(/\\//g, '_')}.pdf\"`);\n      \n      const fileStream = fs.createReadStream(pdfPath);\n      fileStream.on('error', (error) => {\n        console.error('File stream error:', error);\n        res.status(500).json({ error: \"Failed to stream PDF\" });\n      });\n      fileStream.pipe(res);\n    } catch (error) {\n      console.error('PDF download error:', error);\n      res.status(500).json({ error: \"Failed to download PDF\" });\n    }\n  });\n  \n  // Add payment to invoice\n  app.post(\"/api/invoices/:id/payments\", requireAuth, requirePermission('invoices', 'update'), async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const userName = (req as any).session.userName;\n      const userRole = (req as any).session.userRole;\n      \n      const { amount, paymentMode, transactionId, notes } = req.body;\n      \n      const invoice = await Invoice.findById(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      if (invoice.status !== 'approved') {\n        return res.status(400).json({ error: \"Can only add payments to approved invoices\" });\n      }\n      \n      if (amount > invoice.dueAmount) {\n        return res.status(400).json({ error: \"Payment amount exceeds due amount\" });\n      }\n      \n      const payment = {\n        amount,\n        paymentMode,\n        transactionId,\n        notes,\n        recordedBy: userId,\n        transactionDate: new Date()\n      };\n      \n      invoice.payments.push(payment as any);\n      invoice.paidAmount += amount;\n      invoice.dueAmount -= amount;\n      \n      if (invoice.dueAmount === 0) {\n        invoice.paymentStatus = 'paid';\n      } else if (invoice.paidAmount > 0) {\n        invoice.paymentStatus = 'partial';\n      }\n      \n      await invoice.save();\n      \n      await logActivity({\n        userId,\n        userName,\n        userRole,\n        action: 'update',\n        resource: 'other',\n        resourceId: invoice._id.toString(),\n        description: `Recorded payment of ₹${amount} for invoice ${invoice.invoiceNumber}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to add payment\" });\n    }\n  });\n  \n  // Delete invoice\n  app.delete(\"/api/invoices/:id\", requireAuth, requirePermission('invoices', 'delete'), async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const userName = (req as any).session.userName;\n      const userRole = (req as any).session.userRole;\n      \n      const invoice = await Invoice.findById(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      if (invoice.pdfPath && fs.existsSync(invoice.pdfPath)) {\n        const path = await import('path');\n        const invoicesDir = path.resolve(process.cwd(), 'invoices');\n        const resolvedPdfPath = path.resolve(invoice.pdfPath);\n        const relativePath = path.relative(invoicesDir, resolvedPdfPath);\n        \n        if (!relativePath.startsWith('..') && !path.isAbsolute(relativePath)) {\n          fs.unlinkSync(resolvedPdfPath);\n        }\n      }\n      \n      await Invoice.findByIdAndDelete(req.params.id);\n      \n      await logActivity({\n        userId,\n        userName,\n        userRole,\n        action: 'delete',\n        resource: 'other',\n        resourceId: req.params.id,\n        description: `Deleted invoice ${invoice.invoiceNumber}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json({ message: \"Invoice deleted successfully\" });\n    } catch (error) {\n      console.error('Delete invoice error:', error);\n      res.status(500).json({ error: \"Failed to delete invoice\" });\n    }\n  });\n\n  // Get products from an invoice for warranty card upload\n  app.get(\"/api/invoices/:id/products\", requireAuth, async (req, res) => {\n    try {\n      const invoice = await Invoice.findById(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n\n      const products = invoice.items\n        .filter((item: any) => item.type === 'product' && item.productId)\n        .map((item: any) => ({\n          itemIndex: invoice.items.indexOf(item),\n          productId: item.productId?.toString(),\n          name: item.name,\n          description: item.description,\n          quantity: item.quantity,\n          hasWarranty: item.hasWarranty,\n          warrantyCards: item.warrantyCards || [],\n        }));\n\n      res.json({\n        invoiceNumber: invoice.invoiceNumber,\n        customerId: invoice.customerId,\n        products,\n      });\n    } catch (error) {\n      console.error('Get invoice products error:', error);\n      res.status(500).json({ error: \"Failed to fetch invoice products\" });\n    }\n  });\n\n  // Upload warranty cards for invoice products\n  app.post(\"/api/invoices/:id/warranty-cards\", requireAuth, requirePermission('invoices', 'update'), async (req, res) => {\n    try {\n      const { itemIndex, warrantyCardData, filename } = req.body;\n\n      if (typeof itemIndex !== 'number' || !warrantyCardData || !filename) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      if (!warrantyCardData.startsWith('data:')) {\n        return res.status(400).json({ error: \"Invalid file data format\" });\n      }\n\n      const dataUrlMatch = warrantyCardData.match(/^data:([^;]+);base64,(.+)$/);\n      if (!dataUrlMatch) {\n        return res.status(400).json({ error: \"Invalid base64 format\" });\n      }\n\n      const mimeType = dataUrlMatch[1];\n      const base64Data = dataUrlMatch[2];\n\n      const allowedMimeTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp', 'application/pdf'];\n      if (!allowedMimeTypes.includes(mimeType)) {\n        return res.status(400).json({ error: \"Invalid file type. Only images and PDFs are allowed\" });\n      }\n\n      const fileSizeBytes = Math.ceil((base64Data.length * 3) / 4);\n      const maxSizeBytes = 5 * 1024 * 1024;\n      if (fileSizeBytes > maxSizeBytes) {\n        return res.status(400).json({ error: \"File size exceeds 5MB limit\" });\n      }\n\n      const invoice = await Invoice.findById(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n\n      if (itemIndex < 0 || itemIndex >= invoice.items.length) {\n        return res.status(400).json({ error: \"Invalid item index\" });\n      }\n\n      const item = invoice.items[itemIndex];\n\n      if (!item.warrantyCards) {\n        item.warrantyCards = [];\n      }\n\n      item.warrantyCards.push({\n        url: warrantyCardData,\n        filename,\n        uploadedAt: new Date(),\n      });\n\n      await invoice.save();\n\n      if (item.productId && invoice.customerId) {\n        const invoiceVehicleIds = (invoice.vehicleDetails || [])\n          .filter((vd: any) => vd.vehicleId)\n          .map((vd: any) => vd.vehicleId);\n\n        if (invoiceVehicleIds.length === 0) {\n          console.warn(`Invoice ${invoice.invoiceNumber} has no vehicle details. Warranty card saved to invoice but not synced to vehicle.`);\n        } else {\n          const vehicles = await RegistrationVehicle.find({ customerId: invoice.customerId.toString() });\n          let syncedCount = 0;\n          \n          for (const vehicle of vehicles) {\n            const vehicleIdMatch = invoiceVehicleIds.includes(vehicle.vehicleId) ||\n                                  invoiceVehicleIds.includes(vehicle._id.toString());\n\n            if (!vehicleIdMatch) {\n              continue;\n            }\n\n            const productIdStr = item.productId.toString();\n            const hasProductInSelectedParts = vehicle.selectedParts && \n                                             vehicle.selectedParts.includes(productIdStr);\n\n            if (!hasProductInSelectedParts) {\n              continue;\n            }\n\n            if (!vehicle.warrantyCards) {\n              vehicle.warrantyCards = [];\n            }\n\n            const existingIndex = vehicle.warrantyCards.findIndex(\n              (wc: any) => wc.partId === productIdStr\n            );\n\n            if (existingIndex >= 0) {\n              vehicle.warrantyCards[existingIndex] = {\n                partId: productIdStr,\n                partName: item.name,\n                fileData: warrantyCardData,\n              };\n            } else {\n              vehicle.warrantyCards.push({\n                partId: productIdStr,\n                partName: item.name,\n                fileData: warrantyCardData,\n              });\n            }\n\n            await vehicle.save();\n            syncedCount++;\n          }\n\n          if (syncedCount === 0) {\n            console.warn(`Warranty card for ${item.name} saved to invoice but no matching vehicle found with this product in selectedParts.`);\n          }\n        }\n      }\n\n      const userId = (req as any).session.userId;\n      const userName = (req as any).session.userName;\n      const userRole = (req as any).session.userRole;\n\n      await logActivity({\n        userId,\n        userName,\n        userRole,\n        action: 'update',\n        resource: 'other',\n        resourceId: invoice._id.toString(),\n        description: `Uploaded warranty card for ${item.name} in invoice ${invoice.invoiceNumber}`,\n        ipAddress: req.ip,\n      });\n\n      res.json({ \n        message: \"Warranty card uploaded successfully\",\n        warrantyCard: item.warrantyCards[item.warrantyCards.length - 1],\n      });\n    } catch (error) {\n      console.error('Upload warranty card error:', error);\n      res.status(500).json({ error: \"Failed to upload warranty card\" });\n    }\n  });\n  \n  // ==================== COUPONS ====================\n  \n  // Get all coupons\n  app.get(\"/api/coupons\", requireAuth, requirePermission('coupons', 'read'), async (req, res) => {\n    try {\n      const coupons = await Coupon.find()\n        .populate('createdBy', 'name')\n        .sort({ createdAt: -1 })\n        .lean();\n      \n      res.json(coupons);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch coupons\" });\n    }\n  });\n  \n  // Validate coupon\n  app.post(\"/api/coupons/validate\", requireAuth, async (req, res) => {\n    try {\n      const { code, customerId, purchaseAmount } = req.body;\n      \n      const coupon = await Coupon.findOne({ code: code.toUpperCase() });\n      if (!coupon) {\n        return res.status(404).json({ error: \"Coupon not found\" });\n      }\n      \n      const validation = coupon.isValid(customerId, purchaseAmount);\n      \n      if (!validation.valid) {\n        return res.status(400).json({ error: validation.reason });\n      }\n      \n      const discount = coupon.calculateDiscount(purchaseAmount);\n      \n      res.json({\n        valid: true,\n        coupon: {\n          code: coupon.code,\n          discountType: coupon.discountType,\n          discountValue: coupon.discountValue,\n          discountAmount: discount\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to validate coupon\" });\n    }\n  });\n  \n  // Create coupon\n  app.post(\"/api/coupons\", requireAuth, requirePermission('coupons', 'create'), async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const userName = (req as any).session.userName;\n      const userRole = (req as any).session.userRole;\n      \n      const couponData = {\n        ...req.body,\n        code: req.body.code.toUpperCase(),\n        createdBy: userId\n      };\n      \n      const coupon = await Coupon.create(couponData);\n      \n      await logActivity({\n        userId,\n        userName,\n        userRole,\n        action: 'create',\n        resource: 'other',\n        resourceId: coupon._id.toString(),\n        description: `Created coupon ${coupon.code}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json(coupon);\n    } catch (error: any) {\n      if (error.code === 11000) {\n        return res.status(400).json({ error: \"Coupon code already exists\" });\n      }\n      res.status(500).json({ error: \"Failed to create coupon\" });\n    }\n  });\n  \n  // Update coupon\n  app.patch(\"/api/coupons/:id\", requireAuth, requirePermission('coupons', 'update'), async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const userName = (req as any).session.userName;\n      const userRole = (req as any).session.userRole;\n      \n      const coupon = await Coupon.findByIdAndUpdate(\n        req.params.id,\n        req.body,\n        { new: true }\n      );\n      \n      if (!coupon) {\n        return res.status(404).json({ error: \"Coupon not found\" });\n      }\n      \n      await logActivity({\n        userId,\n        userName,\n        userRole,\n        action: 'update',\n        resource: 'other',\n        resourceId: coupon._id.toString(),\n        description: `Updated coupon ${coupon.code}`,\n        ipAddress: req.ip,\n      });\n      \n      res.json(coupon);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update coupon\" });\n    }\n  });\n  \n  // ==================== WARRANTIES ====================\n  \n  // Get warranties\n  app.get(\"/api/warranties\", requireAuth, requirePermission('warranties', 'read'), async (req, res) => {\n    try {\n      const { status, customerId } = req.query;\n      \n      let query: any = {};\n      if (status) query.status = status;\n      if (customerId) query.customerId = customerId;\n      \n      const warranties = await Warranty.find(query)\n        .populate('customerId', 'fullName mobileNumber')\n        .populate('productId', 'name')\n        .populate('invoiceId', 'invoiceNumber')\n        .sort({ createdAt: -1 })\n        .lean();\n      \n      res.json(warranties);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch warranties\" });\n    }\n  });\n  \n  // Create warranty\n  app.post(\"/api/warranties\", requireAuth, requirePermission('warranties', 'create'), async (req, res) => {\n    try {\n      const warranty = await Warranty.create(req.body);\n      res.json(warranty);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create warranty\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":182156},"client/src/pages/Invoices.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { FileText, DollarSign, CheckCircle, XCircle, Clock, Filter, Eye, CreditCard, Download, Trash2, Upload } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { PaymentRecordingDialog } from \"@/components/PaymentRecordingDialog\";\n\ninterface Invoice {\n  _id: string;\n  invoiceNumber: string;\n  customerName: string;\n  customerId: { fullName: string; mobileNumber: string; email: string };\n  subtotal: number;\n  discountAmount: number;\n  taxAmount: number;\n  totalAmount: number;\n  paidAmount: number;\n  dueAmount: number;\n  status: 'draft' | 'pending_approval' | 'approved' | 'rejected' | 'cancelled';\n  paymentStatus: 'unpaid' | 'partial' | 'paid';\n  createdAt: string;\n  createdBy: { name: string };\n  approvalStatus?: {\n    approvedBy?: { name: string };\n    rejectedBy?: { name: string };\n    rejectionReason?: string;\n  };\n}\n\nexport default function Invoices() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [paymentFilter, setPaymentFilter] = useState<string>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\n  const [showApprovalDialog, setShowApprovalDialog] = useState(false);\n  const [showRejectDialog, setShowRejectDialog] = useState(false);\n  const [rejectionReason, setRejectionReason] = useState('');\n  const [showPaymentDialog, setShowPaymentDialog] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [showWarrantyDialog, setShowWarrantyDialog] = useState(false);\n\n  const { data: invoices = [], isLoading } = useQuery<Invoice[]>({\n    queryKey: ['/api/invoices', statusFilter, paymentFilter],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (statusFilter !== 'all') params.append('status', statusFilter);\n      if (paymentFilter !== 'all') params.append('paymentStatus', paymentFilter);\n      return fetch(`/api/invoices?${params}`).then(res => res.json());\n    },\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (invoiceId: string) => {\n      console.log('🚀 [FRONTEND] Starting invoice approval process');\n      console.log('   Invoice ID:', invoiceId);\n      console.log('   Timestamp:', new Date().toISOString());\n      \n      const response = await apiRequest('POST', `/api/invoices/${invoiceId}/approve`, {});\n      const data = await response.json();\n      \n      console.log('✅ [FRONTEND] Approval API request completed');\n      console.log('   Response data:', data);\n      \n      return data;\n    },\n    onSuccess: (data: any, invoiceId) => {\n      console.log('🎉 [FRONTEND] Invoice approval successful!');\n      console.log('   Invoice ID:', invoiceId);\n      console.log('   Response data:', data);\n      console.log('   Notifications sent:', {\n        email: data?.notificationsSent?.email,\n        emailSentAt: data?.notificationsSent?.emailSentAt,\n        whatsapp: data?.notificationsSent?.whatsapp,\n        whatsappSentAt: data?.notificationsSent?.whatsappSentAt,\n      });\n      \n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({ title: \"Invoice approved successfully\" });\n      setShowApprovalDialog(false);\n      setSelectedInvoice(null);\n    },\n    onError: (error: any, invoiceId) => {\n      console.error('❌ [FRONTEND] Invoice approval failed');\n      console.error('   Invoice ID:', invoiceId);\n      console.error('   Error:', error);\n      console.error('   Error message:', error?.message);\n      console.error('   Error details:', error?.response?.data);\n      \n      toast({ title: \"Failed to approve invoice\", variant: \"destructive\" });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: ({ invoiceId, reason }: { invoiceId: string; reason: string }) =>\n      apiRequest('POST', `/api/invoices/${invoiceId}/reject`, { reason }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({ title: \"Invoice rejected\" });\n      setShowRejectDialog(false);\n      setSelectedInvoice(null);\n      setRejectionReason('');\n    },\n    onError: () => {\n      toast({ title: \"Failed to reject invoice\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (invoiceId: string) => apiRequest('DELETE', `/api/invoices/${invoiceId}`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({ title: \"Invoice deleted successfully\" });\n      setShowDeleteDialog(false);\n      setSelectedInvoice(null);\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete invoice\", variant: \"destructive\" });\n    },\n  });\n\n  const togglePaidStatusMutation = useMutation({\n    mutationFn: ({ invoiceId, currentStatus }: { invoiceId: string; currentStatus: string }) => {\n      const newStatus = currentStatus === 'paid' ? 'unpaid' : 'paid';\n      return apiRequest('PATCH', `/api/invoices/${invoiceId}/payment-status`, { paymentStatus: newStatus });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({ title: \"Payment status updated\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update payment status\", variant: \"destructive\" });\n    },\n  });\n\n  const handleDownloadPDF = async (invoiceId: string) => {\n    try {\n      const response = await fetch(`/api/invoices/${invoiceId}/pdf`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to download PDF');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `invoice_${invoiceId}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({ title: \"PDF downloaded successfully\" });\n    } catch (error) {\n      toast({ title: \"Failed to download PDF\", variant: \"destructive\" });\n    }\n  };\n\n  const handleViewPDF = async (invoiceId: string) => {\n    try {\n      const response = await fetch(`/api/invoices/${invoiceId}/pdf`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to load PDF');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n      \n      toast({ title: \"Invoice opened in new tab\" });\n    } catch (error) {\n      toast({ title: \"Failed to view PDF\", variant: \"destructive\" });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, { variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\"; label: string }> = {\n      draft: { variant: \"secondary\", label: \"Draft\" },\n      pending_approval: { variant: \"outline\", label: \"Pending Approval\" },\n      approved: { variant: \"default\", label: \"Approved\" },\n      rejected: { variant: \"destructive\", label: \"Rejected\" },\n      cancelled: { variant: \"destructive\", label: \"Cancelled\" },\n    };\n    const config = variants[status] || { variant: \"outline\" as const, label: status };\n    return <Badge variant={config.variant} data-testid={`badge-status-${status}`}>{config.label}</Badge>;\n  };\n\n  const getPaymentBadge = (paymentStatus: string) => {\n    const variants: Record<string, { variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\"; label: string }> = {\n      unpaid: { variant: \"destructive\", label: \"Unpaid\" },\n      partial: { variant: \"outline\", label: \"Partial\" },\n      paid: { variant: \"default\", label: \"Paid\" },\n    };\n    const config = variants[paymentStatus] || { variant: \"outline\" as const, label: paymentStatus };\n    return <Badge variant={config.variant} data-testid={`badge-payment-${paymentStatus}`}>{config.label}</Badge>;\n  };\n\n  const filteredInvoices = invoices.filter(invoice => {\n    const matchesSearch = invoice.invoiceNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      invoice.customerName.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-invoices\">Invoices & Billing</h1>\n          <p className=\"text-muted-foreground\">Manage invoices, payments, and billing</p>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            All Invoices\n          </CardTitle>\n          <CardDescription>View and manage invoices</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-4 flex-wrap\">\n            <Input\n              placeholder=\"Search by invoice number or customer...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"max-w-sm\"\n              data-testid=\"input-search-invoice\"\n            />\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"draft\">Draft</SelectItem>\n                <SelectItem value=\"pending_approval\">Pending Approval</SelectItem>\n                <SelectItem value=\"approved\">Approved</SelectItem>\n                <SelectItem value=\"rejected\">Rejected</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={paymentFilter} onValueChange={setPaymentFilter}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-payment-filter\">\n                <SelectValue placeholder=\"Filter by payment\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Payments</SelectItem>\n                <SelectItem value=\"unpaid\">Unpaid</SelectItem>\n                <SelectItem value=\"partial\">Partial</SelectItem>\n                <SelectItem value=\"paid\">Paid</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Invoice #</TableHead>\n                  <TableHead>Customer</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Paid</TableHead>\n                  <TableHead>Due</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Payment</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={9} className=\"text-center py-8\">\n                      Loading invoices...\n                    </TableCell>\n                  </TableRow>\n                ) : filteredInvoices.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={9} className=\"text-center py-8 text-muted-foreground\">\n                      No invoices found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredInvoices.map((invoice) => (\n                    <TableRow key={invoice._id} data-testid={`row-invoice-${invoice._id}`}>\n                      <TableCell className=\"font-medium\" data-testid={`text-invoice-number-${invoice._id}`}>\n                        {invoice.invoiceNumber}\n                      </TableCell>\n                      <TableCell>\n                        {invoice.customerId?.fullName || invoice.customerName}\n                      </TableCell>\n                      <TableCell>₹{invoice.totalAmount.toLocaleString()}</TableCell>\n                      <TableCell>₹{invoice.paidAmount.toLocaleString()}</TableCell>\n                      <TableCell>₹{invoice.dueAmount.toLocaleString()}</TableCell>\n                      <TableCell>{getStatusBadge(invoice.status)}</TableCell>\n                      <TableCell>{getPaymentBadge(invoice.paymentStatus)}</TableCell>\n                      <TableCell>{format(new Date(invoice.createdAt), 'dd MMM yyyy')}</TableCell>\n                      <TableCell className=\"text-right space-x-2\">\n                        {(user?.role === 'Admin' || user?.role === 'Manager') && invoice.status === 'pending_approval' && (\n                          <>\n                            <Button\n                              size=\"sm\"\n                              variant=\"default\"\n                              onClick={() => {\n                                setSelectedInvoice(invoice);\n                                setShowApprovalDialog(true);\n                              }}\n                              data-testid={`button-approve-${invoice._id}`}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Approve\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => {\n                                setSelectedInvoice(invoice);\n                                setShowRejectDialog(true);\n                              }}\n                              data-testid={`button-reject-${invoice._id}`}\n                            >\n                              <XCircle className=\"h-4 w-4 mr-1\" />\n                              Reject\n                            </Button>\n                          </>\n                        )}\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleViewPDF(invoice._id)}\n                          data-testid={`button-view-${invoice._id}`}\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View\n                        </Button>\n                        {invoice.status === 'approved' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleDownloadPDF(invoice._id)}\n                            data-testid={`button-download-${invoice._id}`}\n                          >\n                            <Download className=\"h-4 w-4 mr-1\" />\n                            Download\n                          </Button>\n                        )}\n                        {user?.role === 'Admin' && invoice.status === 'approved' && (\n                          <Button\n                            size=\"sm\"\n                            variant={invoice.paymentStatus === 'paid' ? 'secondary' : 'default'}\n                            onClick={() => togglePaidStatusMutation.mutate({ invoiceId: invoice._id, currentStatus: invoice.paymentStatus })}\n                            disabled={togglePaidStatusMutation.isPending}\n                            data-testid={`button-toggle-paid-${invoice._id}`}\n                          >\n                            {invoice.paymentStatus === 'paid' ? 'Mark Unpaid' : 'Mark Paid'}\n                          </Button>\n                        )}\n                        {invoice.paymentStatus === 'paid' && invoice.status === 'approved' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              setSelectedInvoice(invoice);\n                              setShowWarrantyDialog(true);\n                            }}\n                            data-testid={`button-warranty-${invoice._id}`}\n                          >\n                            <FileText className=\"h-4 w-4 mr-1\" />\n                            Warranty Cards\n                          </Button>\n                        )}\n                        {user?.role === 'Admin' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => {\n                              setSelectedInvoice(invoice);\n                              setShowDeleteDialog(true);\n                            }}\n                            data-testid={`button-delete-${invoice._id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-1\" />\n                            Delete\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Approval Dialog */}\n      <Dialog open={showApprovalDialog} onOpenChange={setShowApprovalDialog}>\n        <DialogContent data-testid=\"dialog-approve-invoice\">\n          <DialogHeader>\n            <DialogTitle>Approve Invoice</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to approve invoice {selectedInvoice?.invoiceNumber}?\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowApprovalDialog(false)} data-testid=\"button-cancel-approve\">\n              Cancel\n            </Button>\n            <Button\n              onClick={() => selectedInvoice && approveMutation.mutate(selectedInvoice._id)}\n              disabled={approveMutation.isPending}\n              data-testid=\"button-confirm-approve\"\n            >\n              {approveMutation.isPending ? \"Approving...\" : \"Approve Invoice\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Reject Dialog */}\n      <Dialog open={showRejectDialog} onOpenChange={setShowRejectDialog}>\n        <DialogContent data-testid=\"dialog-reject-invoice\">\n          <DialogHeader>\n            <DialogTitle>Reject Invoice</DialogTitle>\n            <DialogDescription>\n              Please provide a reason for rejecting invoice {selectedInvoice?.invoiceNumber}\n            </DialogDescription>\n          </DialogHeader>\n          <Textarea\n            placeholder=\"Reason for rejection...\"\n            value={rejectionReason}\n            onChange={(e) => setRejectionReason(e.target.value)}\n            data-testid=\"textarea-rejection-reason\"\n          />\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowRejectDialog(false)} data-testid=\"button-cancel-reject\">\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => selectedInvoice && rejectMutation.mutate({ invoiceId: selectedInvoice._id, reason: rejectionReason })}\n              disabled={rejectMutation.isPending || !rejectionReason}\n              data-testid=\"button-confirm-reject\"\n            >\n              {rejectMutation.isPending ? \"Rejecting...\" : \"Reject Invoice\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Payment Dialog */}\n      {selectedInvoice && (\n        <PaymentRecordingDialog\n          open={showPaymentDialog}\n          onOpenChange={setShowPaymentDialog}\n          invoice={selectedInvoice}\n        />\n      )}\n\n      {/* Delete Dialog */}\n      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <DialogContent data-testid=\"dialog-delete-invoice\">\n          <DialogHeader>\n            <DialogTitle>Delete Invoice</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete invoice {selectedInvoice?.invoiceNumber}? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowDeleteDialog(false)} data-testid=\"button-cancel-delete\">\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => selectedInvoice && deleteMutation.mutate(selectedInvoice._id)}\n              disabled={deleteMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Deleting...\" : \"Delete Invoice\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Warranty Cards Dialog */}\n      {selectedInvoice && (\n        <WarrantyCardDialog\n          open={showWarrantyDialog}\n          onOpenChange={setShowWarrantyDialog}\n          invoiceId={selectedInvoice._id}\n          invoiceNumber={selectedInvoice.invoiceNumber}\n        />\n      )}\n    </div>\n  );\n}\n\ninterface Product {\n  itemIndex: number;\n  productId: string;\n  name: string;\n  description?: string;\n  quantity: number;\n  hasWarranty: boolean;\n  warrantyCards: Array<{ url: string; filename: string; uploadedAt: string }>;\n}\n\ninterface WarrantyCardDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  invoiceId: string;\n  invoiceNumber: string;\n}\n\nfunction WarrantyCardDialog({ open, onOpenChange, invoiceId, invoiceNumber }: WarrantyCardDialogProps) {\n  const { toast } = useToast();\n  const fileInputRefs = useRef<{ [key: number]: HTMLInputElement | null }>({});\n\n  const { data: productsData, isLoading } = useQuery({\n    queryKey: ['/api/invoices', invoiceId, 'products'],\n    queryFn: () => fetch(`/api/invoices/${invoiceId}/products`, { credentials: 'include' }).then(res => res.json()),\n    enabled: open,\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async ({ itemIndex, file }: { itemIndex: number; file: File }) => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = async () => {\n          try {\n            const base64Data = reader.result as string;\n            const response = await apiRequest('POST', `/api/invoices/${invoiceId}/warranty-cards`, {\n              itemIndex,\n              warrantyCardData: base64Data,\n              filename: file.name,\n            });\n            resolve(response);\n          } catch (error) {\n            reject(error);\n          }\n        };\n        reader.onerror = () => reject(reader.error);\n        reader.readAsDataURL(file);\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices', invoiceId, 'products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/registration/customers'] });\n      toast({ title: \"Warranty card uploaded successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to upload warranty card\", variant: \"destructive\" });\n    },\n  });\n\n  const handleFileSelect = (itemIndex: number, event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.match(/image\\/(jpeg|jpg|png|gif|webp)|application\\/pdf/)) {\n      toast({ title: \"Please select an image or PDF file\", variant: \"destructive\" });\n      return;\n    }\n\n    if (file.size > 5 * 1024 * 1024) {\n      toast({ title: \"File size must be less than 5MB\", variant: \"destructive\" });\n      return;\n    }\n\n    uploadMutation.mutate({ itemIndex, file });\n  };\n\n  const handleViewWarrantyCard = (url: string, filename: string) => {\n    const newWindow = window.open();\n    if (newWindow) {\n      newWindow.document.write(`\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <title>${filename}</title>\n            <style>\n              body { margin: 0; display: flex; justify-content: center; align-items: center; min-height: 100vh; background: #f0f0f0; }\n              img, embed { max-width: 100%; max-height: 100vh; }\n            </style>\n          </head>\n          <body>\n            ${url.startsWith('data:application/pdf') \n              ? `<embed src=\"${url}\" type=\"application/pdf\" width=\"100%\" height=\"100%\" />`\n              : `<img src=\"${url}\" alt=\"${filename}\" />`\n            }\n          </body>\n        </html>\n      `);\n    }\n  };\n\n  const products: Product[] = productsData?.products || [];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\" data-testid=\"dialog-warranty-cards\">\n        <DialogHeader>\n          <DialogTitle>Upload Warranty Cards</DialogTitle>\n          <DialogDescription>\n            Upload warranty cards for products in invoice {invoiceNumber}\n          </DialogDescription>\n        </DialogHeader>\n\n        {isLoading ? (\n          <div className=\"p-8 text-center\">\n            <p className=\"text-muted-foreground\">Loading products...</p>\n          </div>\n        ) : products.length === 0 ? (\n          <div className=\"p-8 text-center\">\n            <p className=\"text-muted-foreground\">No products found in this invoice.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Upload warranty card documents for each product. The warranty cards will be synced to the customer's vehicle records.\n            </p>\n            \n            <div className=\"space-y-3\">\n              {products.map((product) => (\n                <Card key={product.itemIndex} className=\"p-4\" data-testid={`card-product-${product.itemIndex}`}>\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-sm\" data-testid={`text-product-name-${product.itemIndex}`}>\n                        {product.name}\n                      </h4>\n                      {product.description && (\n                        <p className=\"text-xs text-muted-foreground mt-1\">{product.description}</p>\n                      )}\n                      <div className=\"flex gap-2 mt-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Qty: {product.quantity}\n                        </Badge>\n                        {product.hasWarranty && (\n                          <Badge variant=\"default\" className=\"text-xs\">\n                            Has Warranty\n                          </Badge>\n                        )}\n                      </div>\n                      \n                      {product.warrantyCards.length > 0 && (\n                        <div className=\"mt-3 space-y-1\">\n                          <p className=\"text-xs font-medium\">Uploaded Cards:</p>\n                          {product.warrantyCards.map((card, idx) => (\n                            <Button\n                              key={idx}\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-auto p-0 text-xs justify-start\"\n                              onClick={() => handleViewWarrantyCard(card.url, card.filename)}\n                              data-testid={`button-view-warranty-${product.itemIndex}-${idx}`}\n                            >\n                              <Eye className=\"h-3 w-3 mr-1\" />\n                              {card.filename} ({format(new Date(card.uploadedAt), 'PP')})\n                            </Button>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <input\n                        type=\"file\"\n                        ref={(el) => (fileInputRefs.current[product.itemIndex] = el)}\n                        onChange={(e) => handleFileSelect(product.itemIndex, e)}\n                        accept=\"image/*,.pdf\"\n                        className=\"hidden\"\n                        data-testid={`input-file-${product.itemIndex}`}\n                      />\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => fileInputRefs.current[product.itemIndex]?.click()}\n                        disabled={uploadMutation.isPending}\n                        data-testid={`button-upload-${product.itemIndex}`}\n                      >\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        {uploadMutation.isPending ? \"Uploading...\" : \"Upload Card\"}\n                      </Button>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)} data-testid=\"button-close-warranty\">\n            Close\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":30141},"client/src/pages/Orders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Plus, Search, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function Orders() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Form state\n  const [customerId, setCustomerId] = useState(\"walk-in\");\n  const [items, setItems] = useState<Array<{ productId: string; quantity: string; price: string }>>([\n    { productId: \"\", quantity: \"1\", price: \"\" }\n  ]);\n  const [paymentStatus, setPaymentStatus] = useState(\"due\");\n  const [deliveryStatus, setDeliveryStatus] = useState(\"pending\");\n\n  const { data: orders = [], isLoading, error, refetch } = useQuery<any[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: customers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/registration/customers\"],\n  });\n\n  const { data: products = [] } = useQuery<any[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/orders', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      setIsCreateDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Order created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setCustomerId(\"walk-in\");\n    setItems([{ productId: \"\", quantity: \"1\", price: \"\" }]);\n    setPaymentStatus(\"due\");\n    setDeliveryStatus(\"pending\");\n  };\n\n  const addItem = () => {\n    setItems([...items, { productId: \"\", quantity: \"1\", price: \"\" }]);\n  };\n\n  const removeItem = (index: number) => {\n    if (items.length > 1) {\n      setItems(items.filter((_, i) => i !== index));\n    }\n  };\n\n  const updateItem = (index: number, field: string, value: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], [field]: value };\n    \n    if (field === \"productId\" && value) {\n      const product = products.find((p: any) => p._id === value);\n      if (product && product.sellingPrice) {\n        newItems[index].price = product.sellingPrice.toString();\n      }\n    }\n    \n    setItems(newItems);\n  };\n\n  const calculateTotal = () => {\n    return items.reduce((sum, item) => {\n      const quantity = parseFloat(item.quantity) || 0;\n      const price = parseFloat(item.price) || 0;\n      return sum + (quantity * price);\n    }, 0);\n  };\n\n  const handleCreateOrder = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const orderItems = items\n      .filter(item => item.productId && item.quantity && item.price)\n      .map(item => ({\n        productId: item.productId,\n        quantity: parseInt(item.quantity),\n        price: parseFloat(item.price),\n      }));\n\n    if (orderItems.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please add at least one item to the order\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createOrderMutation.mutate({\n      customerId: customerId === \"walk-in\" ? undefined : customerId,\n      items: orderItems,\n      total: calculateTotal(),\n      paymentStatus,\n      deliveryStatus,\n    });\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const filteredOrders = orders.filter((order: any) =>\n    order.invoiceNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    order.customerName?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getPaymentStatusBadge = (status: string) => {\n    switch (status) {\n      case \"paid\":\n        return <Badge variant=\"default\" data-testid={`payment-paid`}>Paid</Badge>;\n      case \"partial\":\n        return <Badge variant=\"secondary\" data-testid={`payment-partial`}>Partial</Badge>;\n      case \"due\":\n        return <Badge variant=\"destructive\" data-testid={`payment-due`}>Due</Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid={`payment-${status}`}>{status}</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"space-y-3\">\n          {[...Array(5)].map((_, i) => (\n            <Skeleton key={i} className=\"h-24\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold\">Orders</h1>\n        <Card className=\"border-destructive\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <ShoppingCart className=\"h-12 w-12 mx-auto text-destructive mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Failed to load orders</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {(error as Error)?.message || 'An error occurred while fetching orders'}\n              </p>\n              <Button onClick={() => refetch()}>Retry</Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Orders</h1>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-order\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Order\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New Order</DialogTitle>\n              <DialogDescription>\n                Add a new order with customer details and items\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreateOrder} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"customer\">Customer (Optional)</Label>\n                <Select value={customerId} onValueChange={setCustomerId}>\n                  <SelectTrigger id=\"customer\" data-testid=\"select-customer\">\n                    <SelectValue placeholder=\"Select a customer or leave empty for walk-in\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem key=\"walk-in\" value=\"walk-in\">Walk-in Customer</SelectItem>\n                    {customers.map((customer: any) => (\n                      <SelectItem key={customer._id} value={customer._id}>\n                        {customer.name} - {customer.phone}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label>Order Items</Label>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addItem}\n                    data-testid=\"button-add-item\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Item\n                  </Button>\n                </div>\n\n                {items.map((item, index) => (\n                  <div key={index} className=\"flex gap-2 items-end\">\n                    <div className=\"flex-1 space-y-2\">\n                      <Label htmlFor={`product-${index}`}>Product</Label>\n                      <Select\n                        value={item.productId}\n                        onValueChange={(value) => updateItem(index, \"productId\", value)}\n                      >\n                        <SelectTrigger id={`product-${index}`} data-testid={`select-product-${index}`}>\n                          <SelectValue placeholder=\"Select product\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {products.map((product: any) => (\n                            <SelectItem key={product._id} value={product._id}>\n                              {product.name} - {product.brand} ({formatCurrency(product.sellingPrice)})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"w-24 space-y-2\">\n                      <Label htmlFor={`quantity-${index}`}>Quantity</Label>\n                      <Input\n                        id={`quantity-${index}`}\n                        type=\"number\"\n                        min=\"1\"\n                        value={item.quantity}\n                        onChange={(e) => updateItem(index, \"quantity\", e.target.value)}\n                        required\n                        data-testid={`input-quantity-${index}`}\n                      />\n                    </div>\n                    <div className=\"w-32 space-y-2\">\n                      <Label htmlFor={`price-${index}`}>Price</Label>\n                      <Input\n                        id={`price-${index}`}\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={item.price}\n                        onChange={(e) => updateItem(index, \"price\", e.target.value)}\n                        required\n                        data-testid={`input-price-${index}`}\n                      />\n                    </div>\n                    {items.length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => removeItem(index)}\n                        data-testid={`button-remove-item-${index}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"paymentStatus\">Payment Status</Label>\n                  <Select value={paymentStatus} onValueChange={setPaymentStatus}>\n                    <SelectTrigger id=\"paymentStatus\" data-testid=\"select-payment-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem key=\"due\" value=\"due\">Due</SelectItem>\n                      <SelectItem key=\"partial\" value=\"partial\">Partial</SelectItem>\n                      <SelectItem key=\"paid\" value=\"paid\">Paid</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"deliveryStatus\">Delivery Status</Label>\n                  <Select value={deliveryStatus} onValueChange={setDeliveryStatus}>\n                    <SelectTrigger id=\"deliveryStatus\" data-testid=\"select-delivery-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem key=\"pending\" value=\"pending\">Pending</SelectItem>\n                      <SelectItem key=\"processing\" value=\"processing\">Processing</SelectItem>\n                      <SelectItem key=\"shipped\" value=\"shipped\">Shipped</SelectItem>\n                      <SelectItem key=\"delivered\" value=\"delivered\">Delivered</SelectItem>\n                      <SelectItem key=\"cancelled\" value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-semibold\">Total:</span>\n                  <span className=\"text-2xl font-bold\" data-testid=\"text-total\">\n                    {formatCurrency(calculateTotal())}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsCreateDialogOpen(false)}\n                  data-testid=\"button-cancel-order\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createOrderMutation.isPending}\n                  data-testid=\"button-submit-order\"\n                >\n                  {createOrderMutation.isPending ? 'Creating...' : 'Create Order'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"relative max-w-md\">\n        <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search orders...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10\"\n          data-testid=\"input-search\"\n        />\n      </div>\n\n      {filteredOrders.length > 0 ? (\n        <div className=\"space-y-3\">\n          {filteredOrders.map((order: any) => (\n            <Card key={order._id} className=\"hover-elevate\" data-testid={`card-order-${order._id}`}>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <ShoppingCart className=\"h-5 w-5 text-muted-foreground\" />\n                    <div>\n                      <CardTitle className=\"text-lg\">{order.invoiceNumber || 'N/A'}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {order.customerName || order.customerId?.name || 'Walk-in Customer'}\n                      </p>\n                    </div>\n                  </div>\n                  {getPaymentStatusBadge(order.paymentStatus)}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Date</p>\n                    <p className=\"text-sm font-medium\">{format(new Date(order.createdAt), 'dd MMM, yyyy')}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Items</p>\n                    <p className=\"text-sm font-medium\">{order.items?.length || 0}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Total Amount</p>\n                    <p className=\"text-sm font-medium\">{formatCurrency(order.total)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Salesperson</p>\n                    <p className=\"text-sm font-medium\">{order.salespersonId?.name || 'N/A'}</p>\n                  </div>\n                </div>\n                <div className=\"flex gap-2 mt-4\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${order._id}`}>\n                    View Details\n                  </Button>\n                  {order.paymentStatus !== 'paid' && (\n                    <Button variant=\"outline\" size=\"sm\" data-testid={`button-payment-${order._id}`}>\n                      Record Payment\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : orders.length > 0 ? (\n        <div className=\"text-center py-12\">\n          <ShoppingCart className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No orders match your search criteria</p>\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <ShoppingCart className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No orders found. Create your first order to get started.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":17415},"server/models/RegistrationVehicle.ts":{"content":"import mongoose from 'mongoose';\n\nconst registrationVehicleSchema = new mongoose.Schema({\n  vehicleId: { type: String, unique: true, required: true, index: true },\n  customerId: { type: String, required: true, index: true },\n  vehicleNumber: { type: String, required: false },\n  vehicleBrand: { type: String, required: true },\n  vehicleModel: { type: String, required: true },\n  customModel: { type: String, default: null },\n  variant: { type: String, enum: ['Top', 'Base'], default: null },\n  color: { type: String, default: null },\n  yearOfPurchase: { type: Number, default: null },\n  vehiclePhoto: { type: String, required: true },\n  isNewVehicle: { type: Boolean, default: false },\n  chassisNumber: { type: String, default: null },\n  selectedParts: { type: [String], default: [] },\n  warrantyCards: { \n    type: [{\n      partId: { type: String, required: true },\n      partName: { type: String, required: true },\n      fileData: { type: String, required: true }\n    }], \n    default: [] \n  },\n}, { timestamps: true });\n\nexport const RegistrationVehicle = mongoose.models.RegistrationVehicle || mongoose.model('RegistrationVehicle', registrationVehicleSchema);\n","size_bytes":1164},"REPORTS_UPDATE_SUMMARY.md":{"content":"# Reports Section - Real Data Implementation\n\n## Overview\nThe Reports & Analytics section has been completely updated to use **real data from the database** instead of dummy/mock data. All reports are now fully functional with actual aggregated data from your MongoDB database.\n\n## What Was Changed\n\n### ✅ Removed All Dummy Data\n- Eliminated all hardcoded mock values\n- Removed the \"todo: remove mock functionality\" comment\n- Connected all report cards to real backend APIs\n\n### ✅ Implemented Real-Time Data Fetching\n\n#### 1. **Sales Report**\n- Fetches actual sales data from orders\n- Shows total sales amount in ₹ (Indian Rupees)\n- Displays total number of orders\n- Calculates average order value\n- Supports period filtering (Today, Week, Month, Year)\n- Data aggregated by day or month based on selected period\n\n#### 2. **Inventory Status**\n- Real-time inventory value calculation\n- Counts actual stock quantities across all products\n- Shows total items in stock\n- Identifies low stock products (stock ≤ minimum level)\n- Identifies out-of-stock products (stock = 0)\n- **Alert system** for inventory issues\n\n#### 3. **Top Products Report**\n- Lists best-selling products based on actual sales\n- Shows quantity sold and revenue generated\n- Displays product category information\n- Ranked by total revenue\n\n#### 4. **Employee Performance Report**\n- Real sales performance data by salesperson\n- Total sales per employee\n- Order count per employee\n- Average order value per employee\n- Sorted by highest sales\n\n## New Features Added\n\n### 📊 Period Filtering\n- **Today**: Shows data for current day only\n- **This Week**: Last 7 days of data\n- **This Month**: Last 30 days of data\n- **This Year**: Last 365 days of data\n\n### 💾 Export Functionality\n- Export individual reports as JSON files\n- Export all reports at once\n- Timestamped file names for easy tracking\n- Toast notifications confirm successful exports\n\n### 📈 Detailed View Dialogs\n- Click any report card to see detailed breakdown\n- Sales Report: Period-by-period analysis with dates\n- Inventory: Low stock and out-of-stock product lists\n- Top Products: Complete ranking with categories\n- Employee Performance: Full team performance metrics\n\n### 🚨 Inventory Alerts\n- Visual alert card appears when stock issues detected\n- Shows count of out-of-stock products (red)\n- Shows count of low-stock products (orange)\n- Helps prevent stockouts proactively\n\n### 📋 Additional Analysis Section\n- **Average Order Value**: Calculated from real data\n- **Stock Status Overview**: Quick summary of inventory health\n- **Top Performing Salesperson**: Best employee by sales\n- **Top Selling Product**: Best product by revenue\n- **Period Analysis**: Current selected time period\n\n## Technical Implementation\n\n### Backend APIs Used\nAll reports use existing backend endpoints with proper authentication and role-based access:\n\n```\nGET /api/reports/sales?startDate=<date>&endDate=<date>&period=<daily|monthly>\nGET /api/reports/inventory\nGET /api/reports/top-products?limit=<number>\nGET /api/reports/employee-performance\n```\n\n### Data Flow\n1. User selects a time period\n2. Frontend calculates date range\n3. React Query fetches data from backend\n4. MongoDB aggregation pipelines process data\n5. Real-time results displayed in UI\n6. Loading skeletons shown during fetch\n7. Export generates JSON files on demand\n\n### Role-Based Access\nReports are protected by permissions:\n- **Admin**: Full access to all reports\n- **HR Manager**: Full access to all reports\n- Other roles: Limited based on ROLE_PERMISSIONS\n\n## How to Use\n\n### Accessing Reports\n1. Login as Admin or HR Manager\n2. Navigate to Reports & Analytics section\n3. Select desired time period from dropdown\n4. View real-time aggregated data\n\n### Viewing Details\n1. Click any report card\n2. See detailed breakdown in dialog\n3. View tabular data with all metrics\n4. Export specific report if needed\n\n### Exporting Data\n1. Click \"Export All\" to download all reports\n2. Or click individual \"Export\" buttons\n3. Or view details and export specific report\n4. JSON files saved with timestamp\n\n## Data Accuracy\n\nAll reports show **100% real data** from your MongoDB database:\n\n- ✅ Sales figures calculated from actual orders\n- ✅ Inventory values from product stock quantities\n- ✅ Top products ranked by real sales revenue\n- ✅ Employee performance from actual order data\n- ✅ All monetary values in Indian Rupees (₹)\n- ✅ All calculations use MongoDB aggregation pipelines\n\n## Testing\n\nTo test the Reports section:\n\n1. **Login**: Use your database-configured admin credentials\n\n2. **Navigate to Reports**:\n   - Click on \"Reports & Analytics\" in the navigation\n\n3. **Test Features**:\n   - Change period selector\n   - Click report cards for details\n   - Export individual reports\n   - Export all reports\n   - Check inventory alerts (if any)\n\n## Summary\n\nThe Reports section is now a **fully functional analytics dashboard** with:\n- ✅ Real data from MongoDB\n- ✅ Period-based filtering\n- ✅ Detailed breakdowns\n- ✅ Export functionality\n- ✅ Inventory alerts\n- ✅ Performance metrics\n- ✅ No dummy/mock data\n\nAll reports use actual database queries and aggregations to provide accurate, real-time business insights.\n","size_bytes":5225},"client/src/lib/excelExport.ts":{"content":"import * as XLSX from 'xlsx';\n\ninterface ExcelSheet {\n  name: string;\n  data: any[];\n  columns?: string[];\n}\n\nexport function exportToExcel(sheets: ExcelSheet[], filename: string) {\n  const workbook = XLSX.utils.book_new();\n\n  sheets.forEach(sheet => {\n    let worksheet;\n    \n    if (sheet.data && sheet.data.length > 0) {\n      if (sheet.columns) {\n        const formattedData = sheet.data.map(row => {\n          const formattedRow: any = {};\n          sheet.columns!.forEach(col => {\n            formattedRow[col] = row[col] !== undefined ? row[col] : '';\n          });\n          return formattedRow;\n        });\n        worksheet = XLSX.utils.json_to_sheet(formattedData, { header: sheet.columns });\n      } else {\n        worksheet = XLSX.utils.json_to_sheet(sheet.data);\n      }\n\n      const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1');\n      \n      for (let C = range.s.c; C <= range.e.c; ++C) {\n        const address = XLSX.utils.encode_col(C) + \"1\";\n        if (!worksheet[address]) continue;\n        worksheet[address].s = {\n          font: { bold: true, color: { rgb: \"FFFFFF\" } },\n          fill: { fgColor: { rgb: \"4472C4\" } },\n          alignment: { horizontal: \"center\", vertical: \"center\" }\n        };\n      }\n\n      const colWidths = [];\n      for (let C = range.s.c; C <= range.e.c; ++C) {\n        let maxWidth = 10;\n        for (let R = range.s.r; R <= range.e.r; ++R) {\n          const cellAddress = XLSX.utils.encode_cell({ r: R, c: C });\n          const cell = worksheet[cellAddress];\n          if (cell && cell.v) {\n            const cellValue = String(cell.v);\n            maxWidth = Math.max(maxWidth, cellValue.length);\n          }\n        }\n        colWidths.push({ wch: Math.min(maxWidth + 2, 50) });\n      }\n      worksheet['!cols'] = colWidths;\n    } else {\n      worksheet = XLSX.utils.aoa_to_sheet([['No data available']]);\n    }\n\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheet.name);\n  });\n\n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = `${filename}-${new Date().toISOString().split('T')[0]}.xlsx`;\n  a.click();\n  URL.revokeObjectURL(url);\n}\n\nexport function formatSalesDataForExcel(salesReport: any[]) {\n  return salesReport.map(item => ({\n    'Period': item._id.day \n      ? `${item._id.year}-${String(item._id.month).padStart(2, '0')}-${String(item._id.day).padStart(2, '0')}` \n      : `${item._id.year}-${String(item._id.month).padStart(2, '0')}`,\n    'Total Sales (₹)': item.totalSales,\n    'Total Orders': item.totalOrders,\n    'Avg Order Value (₹)': Math.round(item.avgOrderValue)\n  }));\n}\n\nexport function formatInventoryDataForExcel(inventoryReport: any) {\n  const sheets = [];\n\n  if (inventoryReport.lowStockProducts && inventoryReport.lowStockProducts.length > 0) {\n    sheets.push({\n      name: 'Low Stock Products',\n      data: inventoryReport.lowStockProducts.map((p: any) => ({\n        'Product Name': p.name,\n        'Current Stock': p.stockQty,\n        'Min Stock Level': p.minStockLevel,\n        'Category': p.category || 'N/A',\n        'Price (₹)': p.price || 'N/A'\n      }))\n    });\n  }\n\n  if (inventoryReport.outOfStockProducts && inventoryReport.outOfStockProducts.length > 0) {\n    sheets.push({\n      name: 'Out of Stock Products',\n      data: inventoryReport.outOfStockProducts.map((p: any) => ({\n        'Product Name': p.name,\n        'Category': p.category || 'N/A',\n        'Min Stock Level': p.minStockLevel,\n        'Price (₹)': p.price || 'N/A'\n      }))\n    });\n  }\n\n  sheets.push({\n    name: 'Summary',\n    data: [{\n      'Total Inventory Value (₹)': inventoryReport.totalInventoryValue?.totalValue || 0,\n      'Total Items': inventoryReport.totalInventoryValue?.totalItems || 0,\n      'Low Stock Count': inventoryReport.lowStockProducts?.length || 0,\n      'Out of Stock Count': inventoryReport.outOfStockProducts?.length || 0\n    }]\n  });\n\n  return sheets;\n}\n\nexport function formatTopProductsForExcel(topProducts: any[]) {\n  return topProducts.map((p: any) => ({\n    'Product Name': p.product?.name || 'N/A',\n    'Category': p.product?.category || 'N/A',\n    'Total Quantity Sold': p.totalQuantity,\n    'Total Revenue (₹)': p.totalRevenue,\n    'Order Count': p.orderCount\n  }));\n}\n\nexport function formatEmployeePerformanceForExcel(employeePerformance: any[]) {\n  return employeePerformance.map((emp: any) => ({\n    'Employee Name': emp.employee?.name || 'N/A',\n    'Role': emp.employee?.role || 'N/A',\n    'Total Sales (₹)': emp.totalSales,\n    'Order Count': emp.orderCount,\n    'Avg Order Value (₹)': Math.round(emp.avgOrderValue)\n  }));\n}\n\nexport function formatSalesEnhancedForExcel(salesEnhanced: any) {\n  const sheets = [];\n\n  sheets.push({\n    name: 'Sales Summary',\n    data: [{\n      'Total Revenue (₹)': salesEnhanced.invoices?.totalRevenue || 0,\n      'Total Invoices': salesEnhanced.invoices?.totalInvoices || 0,\n      'Avg Invoice Value (₹)': Math.round(salesEnhanced.invoices?.avgInvoiceValue || 0),\n      'Total Discounts (₹)': salesEnhanced.invoices?.totalDiscount || 0\n    }]\n  });\n\n  if (salesEnhanced.coupons && salesEnhanced.coupons.length > 0) {\n    sheets.push({\n      name: 'Coupon Usage',\n      data: salesEnhanced.coupons.map((c: any) => ({\n        'Coupon Code': c._id,\n        'Usage Count': c.usageCount,\n        'Total Discount (₹)': c.totalDiscount\n      }))\n    });\n  }\n\n  return sheets;\n}\n\nexport function formatCustomersForExcel(customers: any) {\n  const sheets = [];\n\n  sheets.push({\n    name: 'Customer Summary',\n    data: [{\n      'Total Customers': customers.total || 0,\n      'Active Customers': customers.active || 0,\n      'New Customers (30d)': customers.new || 0,\n      'Repeat Customers': customers.repeat || 0,\n      'Referred Customers': customers.referred || 0\n    }]\n  });\n\n  if (customers.byReferralSource && customers.byReferralSource.length > 0) {\n    sheets.push({\n      name: 'Referral Sources',\n      data: customers.byReferralSource.map((r: any) => ({\n        'Source': r._id,\n        'Customer Count': r.count\n      }))\n    });\n  }\n\n  return sheets;\n}\n\nexport function formatInventoryEnhancedForExcel(inventoryEnhanced: any) {\n  const sheets = [];\n\n  sheets.push({\n    name: 'Inventory Summary',\n    data: [{\n      'Total Inventory Value (₹)': inventoryEnhanced.totalInventoryValue?.totalValue || 0,\n      'Total Products': inventoryEnhanced.totalInventoryValue?.totalProducts || 0,\n      'Total Items': inventoryEnhanced.totalInventoryValue?.totalItems || 0,\n      'Low Stock Count': inventoryEnhanced.lowStockProducts?.length || 0,\n      'Out of Stock Count': inventoryEnhanced.outOfStockProducts?.length || 0\n    }]\n  });\n\n  if (inventoryEnhanced.brandWise && inventoryEnhanced.brandWise.length > 0) {\n    sheets.push({\n      name: 'Brand-wise Analysis',\n      data: inventoryEnhanced.brandWise.map((b: any) => ({\n        'Brand': b._id,\n        'Total Products': b.totalProducts,\n        'Total Stock': b.totalStock,\n        'Total Value (₹)': b.totalValue,\n        'Avg Price (₹)': Math.round(b.avgPrice)\n      }))\n    });\n  }\n\n  if (inventoryEnhanced.colorWise && inventoryEnhanced.colorWise.length > 0) {\n    sheets.push({\n      name: 'Color-wise Analysis',\n      data: inventoryEnhanced.colorWise.map((c: any) => ({\n        'Color': c._id,\n        'Total Products': c.totalProducts,\n        'Total Stock': c.totalStock\n      }))\n    });\n  }\n\n  if (inventoryEnhanced.lowStockProducts && inventoryEnhanced.lowStockProducts.length > 0) {\n    sheets.push({\n      name: 'Low Stock Products',\n      data: inventoryEnhanced.lowStockProducts.map((p: any) => ({\n        'Product Name': p.name,\n        'Current Stock': p.stockQty,\n        'Min Stock Level': p.minStockLevel,\n        'Category': p.category || 'N/A'\n      }))\n    });\n  }\n\n  if (inventoryEnhanced.outOfStockProducts && inventoryEnhanced.outOfStockProducts.length > 0) {\n    sheets.push({\n      name: 'Out of Stock Products',\n      data: inventoryEnhanced.outOfStockProducts.map((p: any) => ({\n        'Product Name': p.name,\n        'Min Stock Level': p.minStockLevel,\n        'Category': p.category || 'N/A'\n      }))\n    });\n  }\n\n  return sheets;\n}\n\nexport function formatWarrantiesForExcel(warranties: any) {\n  const sheets = [];\n\n  sheets.push({\n    name: 'Warranty Summary',\n    data: [{\n      'Active Warranties': warranties.active || 0,\n      'Expiring Soon': warranties.expiringCount || 0,\n      'Expired Warranties': warranties.expired || 0\n    }]\n  });\n\n  if (warranties.byProduct && warranties.byProduct.length > 0) {\n    sheets.push({\n      name: 'Warranties by Product',\n      data: warranties.byProduct.map((w: any) => ({\n        'Product': w._id,\n        'Total Warranties': w.count,\n        'Active Warranties': w.activeCount\n      }))\n    });\n  }\n\n  if (warranties.expiring && warranties.expiring.length > 0) {\n    sheets.push({\n      name: 'Expiring Warranties',\n      data: warranties.expiring.map((w: any) => ({\n        'Customer': w.customerName || 'N/A',\n        'Product': w.productName || 'N/A',\n        'Expiry Date': w.expiryDate ? new Date(w.expiryDate).toLocaleDateString() : 'N/A',\n        'Phone': w.phone || 'N/A'\n      }))\n    });\n  }\n\n  return sheets;\n}\n\nexport function formatFeedbackForExcel(feedback: any) {\n  const sheets = [];\n\n  sheets.push({\n    name: 'Feedback Summary',\n    data: [{\n      'Average Rating': feedback.averageRating ? feedback.averageRating.toFixed(2) : 'N/A',\n      'Total Rated': feedback.totalRated || 0,\n      'Total Complaints': feedback.totalComplaints || 0,\n      'Open Complaints': feedback.openComplaints || 0\n    }]\n  });\n\n  if (feedback.ratingDistribution && feedback.ratingDistribution.length > 0) {\n    sheets.push({\n      name: 'Rating Distribution',\n      data: feedback.ratingDistribution.map((r: any) => ({\n        'Rating': r._id + ' Stars',\n        'Count': r.count\n      }))\n    });\n  }\n\n  if (feedback.byType && feedback.byType.length > 0) {\n    sheets.push({\n      name: 'Feedback by Type',\n      data: feedback.byType.map((t: any) => ({\n        'Type': t._id,\n        'Count': t.count,\n        'Avg Rating': t.avgRating ? t.avgRating.toFixed(2) : 'N/A'\n      }))\n    });\n  }\n\n  if (feedback.byStatus && feedback.byStatus.length > 0) {\n    sheets.push({\n      name: 'Feedback by Status',\n      data: feedback.byStatus.map((s: any) => ({\n        'Status': s._id,\n        'Count': s.count\n      }))\n    });\n  }\n\n  if (feedback.byPriority && feedback.byPriority.length > 0) {\n    sheets.push({\n      name: 'Feedback by Priority',\n      data: feedback.byPriority.map((p: any) => ({\n        'Priority': p._id,\n        'Count': p.count\n      }))\n    });\n  }\n\n  return sheets;\n}\n","size_bytes":10865},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/types/express-session.d.ts":{"content":"import 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    userRole?: string;\n    userName?: string;\n    userEmail?: string;\n  }\n}\n","size_bytes":185},"client/src/components/DataTable.tsx":{"content":"import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface Column<T> {\n  header: string;\n  accessor: keyof T | ((row: T) => React.ReactNode);\n  className?: string;\n}\n\ninterface DataTableProps<T> {\n  columns: Column<T>[];\n  data: T[];\n  onRowClick?: (row: T) => void;\n  itemsPerPage?: number;\n}\n\nexport function DataTable<T>({ columns, data, onRowClick, itemsPerPage = 10 }: DataTableProps<T>) {\n  const [currentPage, setCurrentPage] = useState(1);\n  \n  const totalPages = Math.ceil(data.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedData = data.slice(startIndex, startIndex + itemsPerPage);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"rounded-lg border border-border overflow-hidden\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"hover:bg-transparent\">\n              {columns.map((column, index) => (\n                <TableHead key={index} className={column.className}>\n                  {column.header}\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {paginatedData.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"text-center py-12 text-muted-foreground\">\n                  No data available\n                </TableCell>\n              </TableRow>\n            ) : (\n              paginatedData.map((row, rowIndex) => (\n                <TableRow\n                  key={rowIndex}\n                  onClick={() => onRowClick?.(row)}\n                  className={onRowClick ? \"cursor-pointer\" : \"\"}\n                  data-testid={`table-row-${rowIndex}`}\n                >\n                  {columns.map((column, colIndex) => (\n                    <TableCell key={colIndex} className={column.className}>\n                      {typeof column.accessor === \"function\"\n                        ? column.accessor(row)\n                        : String(row[column.accessor])}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {totalPages > 1 && (\n        <div className=\"flex items-center justify-between\">\n          <p className=\"text-sm text-muted-foreground\">\n            Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, data.length)} of {data.length} entries\n          </p>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage((p) => Math.max(1, p - 1))}\n              disabled={currentPage === 1}\n              data-testid=\"button-prev-page\"\n            >\n              <ChevronLeft className=\"h-4 w-4 mr-1\" />\n              Previous\n            </Button>\n            <div className=\"text-sm text-muted-foreground\">\n              Page {currentPage} of {totalPages}\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))}\n              disabled={currentPage === totalPages}\n              data-testid=\"button-next-page\"\n            >\n              Next\n              <ChevronRight className=\"h-4 w-4 ml-1\" />\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3609},"server/models/Counter.ts":{"content":"import mongoose from 'mongoose';\n\nconst counterSchema = new mongoose.Schema({\n  _id: { type: String, required: true },\n  sequence_value: { type: Number, required: true, default: 0 }\n});\n\nexport const Counter = mongoose.models.Counter || mongoose.model('Counter', counterSchema);\n\nexport async function getNextSequence(sequenceName: string): Promise<number> {\n  const counter = await Counter.findByIdAndUpdate(\n    sequenceName,\n    { $inc: { sequence_value: 1 } },\n    { new: true, upsert: true }\n  );\n  return counter.sequence_value;\n}\n","size_bytes":537},"client/src/pages/Employees.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Plus, Search, User, X, FileText, ArrowUpDown } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ImageCropDialog } from \"@/components/ImageCropDialog\";\nimport { useAuth } from \"@/lib/auth\";\n\ninterface Employee {\n  _id: string;\n  employeeId?: string;\n  name: string;\n  role: string;\n  contact: string;\n  email?: string;\n  department?: string;\n  salary?: number;\n  joiningDate: string;\n  isActive: boolean;\n  panNumber?: string;\n  aadharNumber?: string;\n  photo?: string;\n  documents?: string[];\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ntype SortOption = 'name-asc' | 'name-desc' | 'id-asc' | 'id-desc' | 'role-asc' | 'role-desc';\n\nexport default function Employees() {\n  const { user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState<SortOption>('name-asc');\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const [viewingDocument, setViewingDocument] = useState<string | null>(null);\n  const [isCropDialogOpen, setIsCropDialogOpen] = useState(false);\n  const [imageToCrop, setImageToCrop] = useState<string>(\"\");\n  const [otpSent, setOtpSent] = useState(false);\n  const [otpVerified, setOtpVerified] = useState(false);\n  const [otpCode, setOtpCode] = useState(\"\");\n  const [editOtpSent, setEditOtpSent] = useState(false);\n  const [editOtpVerified, setEditOtpVerified] = useState(false);\n  const [editOtpCode, setEditOtpCode] = useState(\"\");\n  const { toast } = useToast();\n  \n  const isAdmin = user?.role === 'Admin';\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    password: \"\",\n    role: \"\",\n    department: \"\",\n    salary: \"\",\n    joiningDate: \"\",\n    panNumber: \"\",\n    aadharNumber: \"\",\n    photo: \"\",\n    documents: [] as string[],\n  });\n\n  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files) return;\n\n    const filePromises = Array.from(files).map(file => {\n      return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const base64 = reader.result as string;\n          resolve(base64);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(file);\n      });\n    });\n\n    try {\n      const base64Files = await Promise.all(filePromises);\n      setFormData({ ...formData, documents: [...formData.documents, ...base64Files] });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload files\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const removeDocument = (index: number) => {\n    setFormData({\n      ...formData,\n      documents: formData.documents.filter((_, i) => i !== index)\n    });\n  };\n\n  const handlePhotoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = () => {\n      setImageToCrop(reader.result as string);\n      setIsCropDialogOpen(true);\n    };\n    reader.onerror = () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload photo\",\n        variant: \"destructive\",\n      });\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleCropComplete = (croppedImage: string) => {\n    setFormData({ ...formData, photo: croppedImage });\n  };\n\n  const { data: employees = [], isLoading, error, refetch } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  });\n\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/employees', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] });\n      setIsCreateDialogOpen(false);\n      resetCreateForm();\n      toast({\n        title: \"Success\",\n        description: \"Employee created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEmployeeMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PATCH', `/api/employees/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] });\n      setIsEditDialogOpen(false);\n      setSelectedEmployee(null);\n      toast({\n        title: \"Success\",\n        description: \"Employee updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/employees/${id}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] });\n      toast({\n        title: \"Success\",\n        description: \"Employee deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendOtpMutation = useMutation({\n    mutationFn: async ({ mobileNumber, purpose }: { mobileNumber: string; purpose: string }) => {\n      const response = await apiRequest('POST', '/api/employees/send-otp', { mobileNumber, purpose });\n      return response.json();\n    },\n    onSuccess: () => {\n      setOtpSent(true);\n      toast({\n        title: \"Success\",\n        description: \"OTP sent to WhatsApp\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send OTP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyOtpMutation = useMutation({\n    mutationFn: async ({ mobileNumber, otp, purpose }: { mobileNumber: string; otp: string; purpose: string }) => {\n      const response = await apiRequest('POST', '/api/employees/verify-otp', { mobileNumber, otp, purpose });\n      return response.json();\n    },\n    onSuccess: () => {\n      setOtpVerified(true);\n      toast({\n        title: \"Success\",\n        description: \"Phone number verified successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Invalid OTP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendEditOtpMutation = useMutation({\n    mutationFn: async ({ mobileNumber, purpose }: { mobileNumber: string; purpose: string }) => {\n      const response = await apiRequest('POST', '/api/employees/send-otp', { mobileNumber, purpose });\n      return response.json();\n    },\n    onSuccess: () => {\n      setEditOtpSent(true);\n      toast({\n        title: \"Success\",\n        description: \"OTP sent to WhatsApp\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send OTP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyEditOtpMutation = useMutation({\n    mutationFn: async ({ mobileNumber, otp, purpose }: { mobileNumber: string; otp: string; purpose: string }) => {\n      const response = await apiRequest('POST', '/api/employees/verify-otp', { mobileNumber, otp, purpose });\n      return response.json();\n    },\n    onSuccess: () => {\n      setEditOtpVerified(true);\n      toast({\n        title: \"Success\",\n        description: \"Phone number verified successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Invalid OTP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateEmployee = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!otpVerified) {\n      toast({\n        title: \"Verification Required\",\n        description: \"Please verify the phone number with OTP before creating the employee\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const payload: any = {\n      name: formData.name,\n      email: formData.email,\n      contact: formData.phone,\n      password: formData.password,\n      role: formData.role,\n      photo: formData.photo,\n      isActive: true,\n    };\n    \n    if (formData.role !== 'Admin') {\n      payload.department = formData.department;\n      payload.panNumber = formData.panNumber;\n      payload.aadharNumber = formData.aadharNumber;\n      payload.documents = formData.documents;\n      payload.salary = parseFloat(formData.salary);\n      payload.joiningDate = formData.joiningDate;\n    }\n    \n    createEmployeeMutation.mutate(payload);\n  };\n\n  const handleEditEmployee = (employee: Employee) => {\n    if (employee.role === 'Admin' && !isAdmin) {\n      toast({\n        title: \"Access Denied\",\n        description: \"Only Admin users can edit Admin accounts\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setSelectedEmployee(employee);\n    setFormData({\n      name: employee.name,\n      email: employee.email || \"\",\n      phone: employee.contact,\n      password: \"\",\n      role: employee.role,\n      department: employee.department || \"\",\n      salary: employee.salary ? employee.salary.toString() : \"\",\n      joiningDate: employee.joiningDate ? employee.joiningDate.split('T')[0] : \"\",\n      panNumber: employee.panNumber || \"\",\n      aadharNumber: employee.aadharNumber || \"\",\n      photo: employee.photo || \"\",\n      documents: employee.documents || [],\n    });\n    setEditOtpSent(false);\n    setEditOtpVerified(false);\n    setEditOtpCode(\"\");\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateEmployee = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedEmployee) return;\n    \n    if (formData.phone !== selectedEmployee.contact && !editOtpVerified) {\n      toast({\n        title: \"Verification Required\",\n        description: \"Please verify the new phone number with OTP before updating\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const updateData: any = {\n      name: formData.name,\n      email: formData.email,\n      contact: formData.phone,\n      role: formData.role,\n      photo: formData.photo,\n    };\n    \n    if (formData.role !== 'Admin') {\n      updateData.department = formData.department;\n      updateData.panNumber = formData.panNumber;\n      updateData.aadharNumber = formData.aadharNumber;\n      updateData.documents = formData.documents;\n      updateData.salary = parseFloat(formData.salary);\n      updateData.joiningDate = formData.joiningDate;\n    }\n    \n    updateEmployeeMutation.mutate({\n      id: selectedEmployee._id,\n      data: updateData,\n    });\n  };\n\n  const handleSendOtp = () => {\n    if (!formData.phone) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a phone number first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendOtpMutation.mutate({ mobileNumber: formData.phone, purpose: 'employee_verification' });\n  };\n\n  const handleVerifyOtp = () => {\n    if (!otpCode) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter the OTP code\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    verifyOtpMutation.mutate({ mobileNumber: formData.phone, otp: otpCode, purpose: 'employee_verification' });\n  };\n\n  const handleSendEditOtp = () => {\n    if (!formData.phone) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a phone number first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (selectedEmployee && formData.phone === selectedEmployee.contact) {\n      setEditOtpVerified(true);\n      return;\n    }\n    sendEditOtpMutation.mutate({ mobileNumber: formData.phone, purpose: 'phone_update' });\n  };\n\n  const handleVerifyEditOtp = () => {\n    if (!editOtpCode) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter the OTP code\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    verifyEditOtpMutation.mutate({ mobileNumber: formData.phone, otp: editOtpCode, purpose: 'phone_update' });\n  };\n\n  const resetCreateForm = () => {\n    setFormData({\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      password: \"\",\n      role: \"\",\n      department: \"\",\n      salary: \"\",\n      joiningDate: \"\",\n      panNumber: \"\",\n      aadharNumber: \"\",\n      photo: \"\",\n      documents: [] as string[],\n    });\n    setOtpSent(false);\n    setOtpVerified(false);\n    setOtpCode(\"\");\n  };\n\n  const handleViewEmployee = (employee: Employee) => {\n    setSelectedEmployee(employee);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleDeleteEmployee = (employee: Employee) => {\n    if (employee.role === 'Admin' && !isAdmin) {\n      toast({\n        title: \"Access Denied\",\n        description: \"Only Admin users can delete Admin accounts\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (confirm('Are you sure you want to delete this employee?')) {\n      deleteEmployeeMutation.mutate(employee._id);\n    }\n  };\n\n  const handleToggleActive = (employee: Employee) => {\n    updateEmployeeMutation.mutate({\n      id: employee._id,\n      data: {\n        isActive: !employee.isActive\n      }\n    });\n  };\n\n  const filteredAndSortedEmployees = employees\n    .filter((emp: Employee) =>\n      emp.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      emp.role.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      emp.contact.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (emp.email && emp.email.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (emp.employeeId && emp.employeeId.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (emp.department && emp.department.toLowerCase().includes(searchTerm.toLowerCase()))\n    )\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'name-asc':\n          return a.name.localeCompare(b.name);\n        case 'name-desc':\n          return b.name.localeCompare(a.name);\n        case 'id-asc':\n          return (a.employeeId || '').localeCompare(b.employeeId || '');\n        case 'id-desc':\n          return (b.employeeId || '').localeCompare(a.employeeId || '');\n        case 'role-asc':\n          return a.role.localeCompare(b.role);\n        case 'role-desc':\n          return b.role.localeCompare(a.role);\n        default:\n          return 0;\n      }\n    });\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getRoleCardColor = (role: string) => {\n    switch (role) {\n      case 'Admin':\n        return 'bg-red-50 dark:bg-red-900/30 border-red-200 dark:border-red-700/50';\n      case 'Manager':\n        return 'bg-blue-50 dark:bg-blue-900/30 border-blue-200 dark:border-blue-700/50';\n      case 'Inventory Manager':\n        return 'bg-purple-50 dark:bg-purple-900/30 border-purple-200 dark:border-purple-700/50';\n      case 'Sales Executive':\n        return 'bg-green-50 dark:bg-green-900/30 border-green-200 dark:border-green-700/50';\n      case 'HR Manager':\n        return 'bg-orange-50 dark:bg-orange-900/30 border-orange-200 dark:border-orange-700/50';\n      case 'Service Staff':\n        return 'bg-cyan-50 dark:bg-cyan-900/30 border-cyan-200 dark:border-cyan-700/50';\n      default:\n        return 'bg-gray-50 dark:bg-gray-900/30 border-gray-200 dark:border-gray-700/50';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-48\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold\">Employees</h1>\n        <Card className=\"border-destructive\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <User className=\"h-12 w-12 mx-auto text-destructive mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Failed to load employees</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {(error as Error)?.message || 'An error occurred while fetching employees'}\n              </p>\n              <Button onClick={() => refetch()}>Retry</Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Employees</h1>\n          <p className=\"text-muted-foreground mt-1 text-sm\">All employees have user accounts for system access</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-employee\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Employee\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Add New Employee</DialogTitle>\n              <DialogDescription>\n                Add a new employee to your team\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreateEmployee} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Name *</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    required\n                    data-testid=\"input-employee-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                    required\n                    data-testid=\"input-employee-email\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password *</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  required\n                  placeholder=\"Enter login password\"\n                  data-testid=\"input-employee-password\"\n                />\n                <p className=\"text-xs text-muted-foreground\">This password will be used for employee login</p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"photo\">Employee Photo</Label>\n                <Input\n                  id=\"photo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handlePhotoUpload}\n                  data-testid=\"input-employee-photo\"\n                />\n                {formData.photo && (\n                  <div className=\"flex items-center gap-4 mt-2\">\n                    <img \n                      src={formData.photo} \n                      alt=\"Employee preview\" \n                      className=\"h-20 w-20 rounded-full object-cover border-2\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setFormData({ ...formData, photo: \"\" })}\n                    >\n                      Remove Photo\n                    </Button>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone *</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"phone\"\n                      value={formData.phone}\n                      onChange={(e) => {\n                        setFormData({ ...formData, phone: e.target.value });\n                        setOtpSent(false);\n                        setOtpVerified(false);\n                        setOtpCode(\"\");\n                      }}\n                      required\n                      data-testid=\"input-employee-phone\"\n                      disabled={otpVerified}\n                    />\n                    <Button\n                      type=\"button\"\n                      onClick={handleSendOtp}\n                      disabled={!formData.phone || otpSent || otpVerified || sendOtpMutation.isPending}\n                      data-testid=\"button-send-otp\"\n                    >\n                      {sendOtpMutation.isPending ? \"Sending...\" : otpVerified ? \"Verified\" : otpSent ? \"Sent\" : \"Send OTP\"}\n                    </Button>\n                  </div>\n                  {otpSent && !otpVerified && (\n                    <div className=\"flex gap-2 mt-2\">\n                      <Input\n                        placeholder=\"Enter OTP\"\n                        value={otpCode}\n                        onChange={(e) => setOtpCode(e.target.value)}\n                        data-testid=\"input-otp-code\"\n                      />\n                      <Button\n                        type=\"button\"\n                        onClick={handleVerifyOtp}\n                        disabled={!otpCode || verifyOtpMutation.isPending}\n                        data-testid=\"button-verify-otp\"\n                      >\n                        {verifyOtpMutation.isPending ? \"Verifying...\" : \"Verify\"}\n                      </Button>\n                    </div>\n                  )}\n                  {otpVerified && (\n                    <p className=\"text-sm text-green-600 dark:text-green-400\">✓ Phone number verified</p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"role\">Role *</Label>\n                  <Select\n                    value={formData.role}\n                    onValueChange={(value) => setFormData({ ...formData, role: value })}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-employee-role\">\n                      <SelectValue placeholder=\"Select role\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {isAdmin && <SelectItem value=\"Admin\">Admin</SelectItem>}\n                      <SelectItem value=\"Manager\">Manager</SelectItem>\n                      <SelectItem value=\"Inventory Manager\">Inventory Manager</SelectItem>\n                      <SelectItem value=\"Sales Executive\">Sales Executive</SelectItem>\n                      <SelectItem value=\"HR Manager\">HR Manager</SelectItem>\n                      <SelectItem value=\"Service Staff\">Service Staff</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {formData.role !== 'Admin' && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"department\">Department *</Label>\n                  <Input\n                    id=\"department\"\n                    value={formData.department}\n                    onChange={(e) => setFormData({ ...formData, department: e.target.value })}\n                    required\n                    placeholder=\"e.g., Service, Sales\"\n                    data-testid=\"input-employee-department\"\n                  />\n                </div>\n              )}\n\n              {formData.role !== 'Admin' && (\n                <>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"salary\">Salary *</Label>\n                    <Input\n                      id=\"salary\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.salary}\n                      onChange={(e) => setFormData({ ...formData, salary: e.target.value })}\n                      required\n                      data-testid=\"input-employee-salary\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"joiningDate\">Joining Date *</Label>\n                    <Input\n                      id=\"joiningDate\"\n                      type=\"date\"\n                      value={formData.joiningDate}\n                      onChange={(e) => setFormData({ ...formData, joiningDate: e.target.value })}\n                      required\n                      data-testid=\"input-employee-joiningdate\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"panNumber\">PAN Number</Label>\n                      <Input\n                        id=\"panNumber\"\n                        value={formData.panNumber}\n                        onChange={(e) => setFormData({ ...formData, panNumber: e.target.value })}\n                        placeholder=\"ABCDE1234F\"\n                        data-testid=\"input-employee-pan\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"aadharNumber\">Aadhar Number</Label>\n                      <Input\n                        id=\"aadharNumber\"\n                        value={formData.aadharNumber}\n                        onChange={(e) => setFormData({ ...formData, aadharNumber: e.target.value })}\n                        placeholder=\"1234 5678 9012\"\n                        data-testid=\"input-employee-aadhar\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"documents\">Upload Documents (PDF)</Label>\n                    <Input\n                      id=\"documents\"\n                      type=\"file\"\n                      accept=\".pdf\"\n                      multiple\n                      onChange={handleFileUpload}\n                      data-testid=\"input-employee-documents\"\n                    />\n                    {formData.documents.length > 0 && (\n                      <div className=\"space-y-2 mt-2\">\n                        <p className=\"text-sm text-muted-foreground\">Uploaded files ({formData.documents.length}):</p>\n                        <div className=\"space-y-1\">\n                          {formData.documents.map((doc, index) => (\n                            <div key={index} className=\"flex items-center gap-2 p-2 bg-muted rounded-md\">\n                              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                              <span className=\"text-sm flex-1\">Document {index + 1}</span>\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => removeDocument(index)}\n                                data-testid={`button-remove-document-${index}`}\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </>\n              )}\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsCreateDialogOpen(false)}\n                  data-testid=\"button-cancel-employee\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createEmployeeMutation.isPending || !otpVerified}\n                  data-testid=\"button-submit-employee\"\n                >\n                  {createEmployeeMutation.isPending ? 'Creating...' : 'Create Employee'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search employees...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search\"\n          />\n        </div>\n        \n        <div className=\"flex items-center gap-2 w-full sm:w-auto\">\n          <ArrowUpDown className=\"h-4 w-4 text-muted-foreground\" />\n          <Select value={sortBy} onValueChange={(value) => setSortBy(value as SortOption)}>\n            <SelectTrigger className=\"w-full sm:w-[200px]\" data-testid=\"select-sort\">\n              <SelectValue placeholder=\"Sort by...\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"name-asc\">Name (A-Z)</SelectItem>\n              <SelectItem value=\"name-desc\">Name (Z-A)</SelectItem>\n              <SelectItem value=\"id-asc\">Employee ID (Asc)</SelectItem>\n              <SelectItem value=\"id-desc\">Employee ID (Desc)</SelectItem>\n              <SelectItem value=\"role-asc\">Role (A-Z)</SelectItem>\n              <SelectItem value=\"role-desc\">Role (Z-A)</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {filteredAndSortedEmployees.length > 0 ? (\n        <div className=\"space-y-8\">\n          {/* Admin Section */}\n          {filteredAndSortedEmployees.filter((emp: Employee) => emp.role === 'Admin').length > 0 && (\n            <div className=\"space-y-4\">\n              <h2 className=\"text-2xl font-bold text-red-600 dark:text-red-400\">Admin</h2>\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                {filteredAndSortedEmployees\n                  .filter((emp: Employee) => emp.role === 'Admin')\n                  .map((employee: any) => (\n                    <Card key={employee._id} className={`hover-elevate ${getRoleCardColor(employee.role)}`} data-testid={`card-employee-${employee._id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center gap-4\">\n                          <Avatar className=\"h-20 w-20\">\n                            {employee.photo ? (\n                              <img \n                                src={employee.photo} \n                                alt={employee.name} \n                                className=\"h-full w-full object-cover\"\n                              />\n                            ) : (\n                              <AvatarFallback className=\"text-2xl\">{getInitials(employee.name)}</AvatarFallback>\n                            )}\n                          </Avatar>\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"text-lg\">{employee.name}</CardTitle>\n                            <p className=\"text-sm text-muted-foreground\">{employee.role}</p>\n                            {employee.employeeId && (\n                              <p className=\"text-xs text-muted-foreground mt-1\" data-testid={`text-employeeid-${employee._id}`}>ID: {employee.employeeId}</p>\n                            )}\n                          </div>\n                          {employee.isActive ? (\n                            <Badge variant=\"default\" data-testid={`status-active-${employee._id}`}>Active</Badge>\n                          ) : (\n                            <Badge variant=\"secondary\" data-testid={`status-inactive-${employee._id}`}>Inactive</Badge>\n                          )}\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"text-xs text-muted-foreground\">Status</p>\n                            <p className=\"text-sm\">{employee.isActive ? 'Active' : 'Inactive'}</p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Label htmlFor={`toggle-active-${employee._id}`} className=\"text-xs\">\n                              Mark as {employee.isActive ? 'Inactive' : 'Active'}\n                            </Label>\n                            <Switch\n                              id={`toggle-active-${employee._id}`}\n                              checked={employee.isActive}\n                              onCheckedChange={() => handleToggleActive(employee)}\n                              data-testid={`toggle-active-${employee._id}`}\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-muted-foreground\">Contact</p>\n                          <p className=\"text-sm\">{employee.contact}</p>\n                        </div>\n                        {employee.email && (\n                          <div>\n                            <p className=\"text-xs text-muted-foreground\">Email</p>\n                            <p className=\"text-sm\">{employee.email}</p>\n                          </div>\n                        )}\n                        <div className=\"flex gap-2 pt-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"flex-1\" \n                            onClick={() => handleEditEmployee(employee)} \n                            disabled={employee.role === 'Admin' && !isAdmin}\n                            data-testid={`button-edit-${employee._id}`}\n                          >\n                            Edit\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" className=\"flex-1\" onClick={() => handleViewEmployee(employee)} data-testid={`button-view-${employee._id}`}>\n                            View Details\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n              </div>\n            </div>\n          )}\n\n          {/* Employee Section */}\n          {filteredAndSortedEmployees.filter((emp: Employee) => emp.role !== 'Admin').length > 0 && (\n            <div className=\"space-y-4\">\n              <h2 className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">Employee</h2>\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                {filteredAndSortedEmployees\n                  .filter((emp: Employee) => emp.role !== 'Admin')\n                  .map((employee: any) => (\n                    <Card key={employee._id} className={`hover-elevate ${getRoleCardColor(employee.role)}`} data-testid={`card-employee-${employee._id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center gap-4\">\n                          <Avatar className=\"h-20 w-20\">\n                            {employee.photo ? (\n                              <img \n                                src={employee.photo} \n                                alt={employee.name} \n                                className=\"h-full w-full object-cover\"\n                              />\n                            ) : (\n                              <AvatarFallback className=\"text-2xl\">{getInitials(employee.name)}</AvatarFallback>\n                            )}\n                          </Avatar>\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"text-lg\">{employee.name}</CardTitle>\n                            <p className=\"text-sm text-muted-foreground\">{employee.role}</p>\n                            {employee.employeeId && (\n                              <p className=\"text-xs text-muted-foreground mt-1\" data-testid={`text-employeeid-${employee._id}`}>ID: {employee.employeeId}</p>\n                            )}\n                          </div>\n                          {employee.isActive ? (\n                            <Badge variant=\"default\" data-testid={`status-active-${employee._id}`}>Active</Badge>\n                          ) : (\n                            <Badge variant=\"secondary\" data-testid={`status-inactive-${employee._id}`}>Inactive</Badge>\n                          )}\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"text-xs text-muted-foreground\">Status</p>\n                            <p className=\"text-sm\">{employee.isActive ? 'Active' : 'Inactive'}</p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Label htmlFor={`toggle-active-${employee._id}`} className=\"text-xs\">\n                              Mark as {employee.isActive ? 'Inactive' : 'Active'}\n                            </Label>\n                            <Switch\n                              id={`toggle-active-${employee._id}`}\n                              checked={employee.isActive}\n                              onCheckedChange={() => handleToggleActive(employee)}\n                              data-testid={`toggle-active-${employee._id}`}\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-muted-foreground\">Contact</p>\n                          <p className=\"text-sm\">{employee.contact}</p>\n                        </div>\n                        {employee.email && (\n                          <div>\n                            <p className=\"text-xs text-muted-foreground\">Email</p>\n                            <p className=\"text-sm\">{employee.email}</p>\n                          </div>\n                        )}\n                        {employee.role !== 'Admin' && (\n                          <div>\n                            <p className=\"text-xs text-muted-foreground\">Joining Date</p>\n                            <p className=\"text-sm\">{format(new Date(employee.joiningDate), 'dd MMM, yyyy')}</p>\n                          </div>\n                        )}\n                        <div className=\"flex gap-2 pt-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"flex-1\" \n                            onClick={() => handleEditEmployee(employee)} \n                            disabled={employee.role === 'Admin' && !isAdmin}\n                            data-testid={`button-edit-${employee._id}`}\n                          >\n                            Edit\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" className=\"flex-1\" onClick={() => handleViewEmployee(employee)} data-testid={`button-view-${employee._id}`}>\n                            View Details\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      ) : employees.length > 0 ? (\n        <div className=\"text-center py-12\">\n          <User className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No employees match your search criteria</p>\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <User className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No employees found. Add your first employee to get started.</p>\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Employee</DialogTitle>\n            <DialogDescription>\n              Update employee information\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleUpdateEmployee} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-name\">Name *</Label>\n                <Input\n                  id=\"edit-name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-email\">Email *</Label>\n                <Input\n                  id=\"edit-email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-photo\">Employee Photo</Label>\n              <Input\n                id=\"edit-photo\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handlePhotoUpload}\n              />\n              {formData.photo && (\n                <div className=\"flex items-center gap-4 mt-2\">\n                  <img \n                    src={formData.photo} \n                    alt=\"Employee preview\" \n                    className=\"h-20 w-20 rounded-full object-cover border-2\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setFormData({ ...formData, photo: \"\" })}\n                  >\n                    Remove Photo\n                  </Button>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-phone\">Phone *</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    id=\"edit-phone\"\n                    value={formData.phone}\n                    onChange={(e) => {\n                      setFormData({ ...formData, phone: e.target.value });\n                      setEditOtpSent(false);\n                      setEditOtpVerified(false);\n                      setEditOtpCode(\"\");\n                    }}\n                    required\n                    disabled={editOtpVerified}\n                  />\n                  <Button\n                    type=\"button\"\n                    onClick={handleSendEditOtp}\n                    disabled={!formData.phone || editOtpSent || (selectedEmployee && formData.phone === selectedEmployee.contact) || sendEditOtpMutation.isPending}\n                    data-testid=\"button-send-edit-otp\"\n                  >\n                    {sendEditOtpMutation.isPending ? \"Sending...\" : editOtpVerified || (selectedEmployee && formData.phone === selectedEmployee.contact) ? \"Verified\" : editOtpSent ? \"Sent\" : \"Send OTP\"}\n                  </Button>\n                </div>\n                {editOtpSent && !editOtpVerified && selectedEmployee && formData.phone !== selectedEmployee.contact && (\n                  <div className=\"flex gap-2 mt-2\">\n                    <Input\n                      placeholder=\"Enter OTP\"\n                      value={editOtpCode}\n                      onChange={(e) => setEditOtpCode(e.target.value)}\n                      data-testid=\"input-edit-otp-code\"\n                    />\n                    <Button\n                      type=\"button\"\n                      onClick={handleVerifyEditOtp}\n                      disabled={!editOtpCode || verifyEditOtpMutation.isPending}\n                      data-testid=\"button-verify-edit-otp\"\n                    >\n                      {verifyEditOtpMutation.isPending ? \"Verifying...\" : \"Verify\"}\n                    </Button>\n                  </div>\n                )}\n                {(editOtpVerified || (selectedEmployee && formData.phone === selectedEmployee.contact)) && (\n                  <p className=\"text-sm text-green-600 dark:text-green-400\">✓ Phone number verified</p>\n                )}\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-role\">Role *</Label>\n                <Select\n                  value={formData.role}\n                  onValueChange={(value) => setFormData({ ...formData, role: value })}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {isAdmin && <SelectItem value=\"Admin\">Admin</SelectItem>}\n                    <SelectItem value=\"Manager\">Manager</SelectItem>\n                    <SelectItem value=\"Inventory Manager\">Inventory Manager</SelectItem>\n                    <SelectItem value=\"Sales Executive\">Sales Executive</SelectItem>\n                    <SelectItem value=\"HR Manager\">HR Manager</SelectItem>\n                    <SelectItem value=\"Service Staff\">Service Staff</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            {formData.role !== 'Admin' && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-department\">Department *</Label>\n                <Input\n                  id=\"edit-department\"\n                  value={formData.department}\n                  onChange={(e) => setFormData({ ...formData, department: e.target.value })}\n                  required\n                />\n              </div>\n            )}\n\n            {formData.role !== 'Admin' && (\n              <>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-salary\">Salary *</Label>\n                  <Input\n                    id=\"edit-salary\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.salary}\n                    onChange={(e) => setFormData({ ...formData, salary: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-joiningDate\">Joining Date *</Label>\n                  <Input\n                    id=\"edit-joiningDate\"\n                    type=\"date\"\n                    value={formData.joiningDate}\n                    onChange={(e) => setFormData({ ...formData, joiningDate: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-panNumber\">PAN Number</Label>\n                    <Input\n                      id=\"edit-panNumber\"\n                      value={formData.panNumber}\n                      onChange={(e) => setFormData({ ...formData, panNumber: e.target.value })}\n                      placeholder=\"ABCDE1234F\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-aadharNumber\">Aadhar Number</Label>\n                    <Input\n                      id=\"edit-aadharNumber\"\n                      value={formData.aadharNumber}\n                      onChange={(e) => setFormData({ ...formData, aadharNumber: e.target.value })}\n                      placeholder=\"1234 5678 9012\"\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-documents\">Upload Documents (PDF)</Label>\n                  <Input\n                    id=\"edit-documents\"\n                    type=\"file\"\n                    accept=\".pdf\"\n                    multiple\n                    onChange={handleFileUpload}\n                  />\n                  {formData.documents.length > 0 && (\n                    <div className=\"space-y-2 mt-2\">\n                      <p className=\"text-sm text-muted-foreground\">Uploaded files ({formData.documents.length}):</p>\n                      <div className=\"space-y-1\">\n                        {formData.documents.map((doc, index) => (\n                          <div key={index} className=\"flex items-center gap-2 p-2 bg-muted rounded-md\">\n                            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"text-sm flex-1\">Document {index + 1}</span>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeDocument(index)}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </>\n            )}\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateEmployeeMutation.isPending || (!!selectedEmployee && formData.phone !== selectedEmployee.contact && !editOtpVerified)}\n                data-testid=\"button-update-employee\"\n              >\n                {updateEmployeeMutation.isPending ? 'Updating...' : 'Update Employee'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Employee Details</DialogTitle>\n          </DialogHeader>\n          {selectedEmployee && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-4\">\n                <Avatar className=\"h-16 w-16\">\n                  {selectedEmployee.photo ? (\n                    <img \n                      src={selectedEmployee.photo} \n                      alt={selectedEmployee.name} \n                      className=\"h-full w-full object-cover\"\n                    />\n                  ) : (\n                    <AvatarFallback className=\"text-2xl\">{getInitials(selectedEmployee.name)}</AvatarFallback>\n                  )}\n                </Avatar>\n                <div>\n                  <h3 className=\"text-xl font-semibold\">{selectedEmployee.name}</h3>\n                  <p className=\"text-muted-foreground\">{selectedEmployee.role}</p>\n                  {selectedEmployee.employeeId && (\n                    <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"text-view-employeeid\">ID: {selectedEmployee.employeeId}</p>\n                  )}\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {selectedEmployee.role !== 'Admin' && selectedEmployee.department && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Department</p>\n                    <p className=\"text-sm font-medium\">{selectedEmployee.department}</p>\n                  </div>\n                )}\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Contact</p>\n                  <p className=\"text-sm font-medium\">{selectedEmployee.contact}</p>\n                </div>\n                {selectedEmployee.email && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Email</p>\n                    <p className=\"text-sm font-medium\">{selectedEmployee.email}</p>\n                  </div>\n                )}\n                {selectedEmployee.salary && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Salary</p>\n                    <p className=\"text-sm font-medium\">₹{selectedEmployee.salary.toLocaleString()}</p>\n                  </div>\n                )}\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Joining Date</p>\n                  <p className=\"text-sm font-medium\">{format(new Date(selectedEmployee.joiningDate), 'dd MMM, yyyy')}</p>\n                </div>\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Status</p>\n                  {selectedEmployee.isActive ? (\n                    <Badge variant=\"default\">Active</Badge>\n                  ) : (\n                    <Badge variant=\"secondary\">Inactive</Badge>\n                  )}\n                </div>\n                {selectedEmployee.role !== 'Admin' && selectedEmployee.panNumber && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">PAN Number</p>\n                    <p className=\"text-sm font-medium\">{selectedEmployee.panNumber}</p>\n                  </div>\n                )}\n                {selectedEmployee.role !== 'Admin' && selectedEmployee.aadharNumber && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Aadhar Number</p>\n                    <p className=\"text-sm font-medium\">{selectedEmployee.aadharNumber}</p>\n                  </div>\n                )}\n              </div>\n              {selectedEmployee.role !== 'Admin' && selectedEmployee.documents && selectedEmployee.documents.length > 0 && (\n                <div className=\"space-y-2\">\n                  <p className=\"text-xs text-muted-foreground\">Documents</p>\n                  <div className=\"space-y-1\">\n                    {selectedEmployee.documents.map((doc, index) => (\n                      <Button\n                        key={index}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"w-full justify-start\"\n                        onClick={() => setViewingDocument(doc)}\n                      >\n                        <FileText className=\"h-4 w-4 mr-2\" />\n                        Document {index + 1}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              )}\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n                  Close\n                </Button>\n                <Button variant=\"destructive\" onClick={() => {\n                  setIsViewDialogOpen(false);\n                  handleDeleteEmployee(selectedEmployee);\n                }}>\n                  Delete Employee\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Document Viewer Dialog */}\n      <Dialog open={!!viewingDocument} onOpenChange={() => setViewingDocument(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh]\">\n          <DialogHeader>\n            <DialogTitle>Document Viewer</DialogTitle>\n          </DialogHeader>\n          <div className=\"w-full h-[70vh] overflow-auto\">\n            {viewingDocument && (\n              <iframe\n                src={viewingDocument}\n                className=\"w-full h-full border-0\"\n                title=\"Document Viewer\"\n              />\n            )}\n          </div>\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button variant=\"outline\" onClick={() => setViewingDocument(null)}>\n              Close\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Image Crop Dialog */}\n      <ImageCropDialog\n        open={isCropDialogOpen}\n        onOpenChange={setIsCropDialogOpen}\n        imageSrc={imageToCrop}\n        onCropComplete={handleCropComplete}\n      />\n    </div>\n  );\n}\n","size_bytes":58286},"client/src/pages/Products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Package, X, ImagePlus, Barcode, Trash2, ImageIcon, Download, Upload, Copy } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport * as XLSX from \"xlsx\";\n\nexport default function Products() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isStockDialogOpen, setIsStockDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [stockFormData, setStockFormData] = useState({\n    quantity: \"\",\n    type: \"IN\",\n    reason: \"\",\n  });\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    brand: \"\",\n    category: \"\",\n    mrp: \"\",\n    sellingPrice: \"\",\n    discount: \"\",\n    stockQty: \"\",\n    minStockLevel: \"\",\n    warehouseLocation: \"\",\n    barcode: \"\",\n    warranty: \"\",\n    images: [\"\"],\n    modelCompatibility: [\"\"],\n    variants: [{ size: \"\", color: \"\" }],\n  });\n\n  const { data: products = [], isLoading, error, refetch } = useQuery<any[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/products', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsCreateDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PATCH', `/api/products/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsEditDialogOpen(false);\n      setSelectedProduct(null);\n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStockMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/inventory-transactions', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/inventory-transactions'] });\n      setIsStockDialogOpen(false);\n      setSelectedProduct(null);\n      setStockFormData({ quantity: \"\", type: \"IN\", reason: \"\" });\n      toast({\n        title: \"Success\",\n        description: \"Stock updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update stock\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/products/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsDeleteDialogOpen(false);\n      setSelectedProduct(null);\n      toast({\n        title: \"Success\",\n        description: \"Product deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDuplicatesMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/products/delete-duplicates', {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Success\",\n        description: `Deleted ${data.deletedCount} duplicate products from ${data.duplicateGroups} groups`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete duplicates\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importProductsMutation = useMutation({\n    mutationFn: async (productsData: any[]) => {\n      const response = await apiRequest('POST', '/api/products/import', { products: productsData });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Success\",\n        description: `Imported ${data.imported} products. ${data.errors > 0 ? `${data.errors} errors occurred.` : ''}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to import products\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      brand: \"\",\n      category: \"\",\n      mrp: \"\",\n      sellingPrice: \"\",\n      discount: \"\",\n      stockQty: \"\",\n      minStockLevel: \"\",\n      warehouseLocation: \"\",\n      barcode: \"\",\n      warranty: \"\",\n      images: [\"\"],\n      modelCompatibility: [\"\"],\n      variants: [{ size: \"\", color: \"\" }],\n    });\n  };\n\n  const addImage = () => {\n    setFormData({ ...formData, images: [...formData.images, \"\"] });\n  };\n\n  const removeImage = (index: number) => {\n    const newImages = formData.images.filter((_, i) => i !== index);\n    setFormData({ ...formData, images: newImages.length > 0 ? newImages : [\"\"] });\n  };\n\n  const updateImage = (index: number, value: string) => {\n    const newImages = [...formData.images];\n    newImages[index] = value;\n    setFormData({ ...formData, images: newImages });\n  };\n\n  const addModelCompat = () => {\n    setFormData({ ...formData, modelCompatibility: [...formData.modelCompatibility, \"\"] });\n  };\n\n  const removeModelCompat = (index: number) => {\n    const newModels = formData.modelCompatibility.filter((_, i) => i !== index);\n    setFormData({ ...formData, modelCompatibility: newModels.length > 0 ? newModels : [\"\"] });\n  };\n\n  const updateModelCompat = (index: number, value: string) => {\n    const newModels = [...formData.modelCompatibility];\n    newModels[index] = value;\n    setFormData({ ...formData, modelCompatibility: newModels });\n  };\n\n  const addVariant = () => {\n    setFormData({ ...formData, variants: [...formData.variants, { size: \"\", color: \"\" }] });\n  };\n\n  const removeVariant = (index: number) => {\n    const newVariants = formData.variants.filter((_, i) => i !== index);\n    setFormData({ ...formData, variants: newVariants.length > 0 ? newVariants : [{ size: \"\", color: \"\" }] });\n  };\n\n  const updateVariant = (index: number, field: 'size' | 'color', value: string) => {\n    const newVariants = [...formData.variants];\n    newVariants[index][field] = value;\n    setFormData({ ...formData, variants: newVariants });\n  };\n\n  const handleExportProducts = () => {\n    const exportData = products.map(product => ({\n      name: product.name,\n      brand: product.brand,\n      category: product.category,\n      mrp: product.mrp,\n      sellingPrice: product.sellingPrice,\n      discount: product.discount,\n      stockQty: product.stockQty,\n      minStockLevel: product.minStockLevel,\n      warehouseLocation: product.warehouseLocation || \"\",\n      barcode: product.barcode || \"\",\n      warranty: product.warranty || \"\",\n      status: product.status,\n      modelCompatibility: Array.isArray(product.modelCompatibility) ? product.modelCompatibility.join(\", \") : \"\",\n    }));\n\n    const ws = XLSX.utils.json_to_sheet(exportData);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Products\");\n    \n    const fileName = `products_export_${new Date().toISOString().split('T')[0]}.xlsx`;\n    XLSX.writeFile(wb, fileName);\n    \n    toast({\n      title: \"Success\",\n      description: `Exported ${products.length} products to ${fileName}`,\n    });\n  };\n\n  const handleImportProducts = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target?.result as ArrayBuffer);\n        const workbook = XLSX.read(data, { type: 'array' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n        const productsData = jsonData.map((row: any) => ({\n          name: row.name || row.Name,\n          brand: row.brand || row.Brand,\n          category: row.category || row.Category,\n          mrp: row.mrp || row.MRP || 0,\n          sellingPrice: row.sellingPrice || row.SellingPrice || row.selling_price || 0,\n          discount: row.discount || row.Discount || 0,\n          stockQty: row.stockQty || row.StockQty || row.stock_qty || 0,\n          minStockLevel: row.minStockLevel || row.MinStockLevel || row.min_stock_level || 10,\n          warehouseLocation: row.warehouseLocation || row.WarehouseLocation || row.warehouse_location || \"\",\n          barcode: row.barcode || row.Barcode || \"\",\n          warranty: row.warranty || row.Warranty || \"\",\n          modelCompatibility: row.modelCompatibility \n            ? (typeof row.modelCompatibility === 'string' ? row.modelCompatibility.split(\",\").map((s: string) => s.trim()) : [])\n            : [],\n        }));\n\n        importProductsMutation.mutate(productsData);\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to parse Excel file. Please check the format.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n    reader.readAsArrayBuffer(file);\n    event.target.value = '';\n  };\n\n  const handleCreateProduct = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const mrp = parseFloat(formData.mrp);\n    const sellingPrice = parseFloat(formData.sellingPrice);\n    const discount = parseFloat(formData.discount) || 0;\n    const stockQty = parseInt(formData.stockQty);\n    const minStockLevel = parseInt(formData.minStockLevel);\n    \n    if (!formData.name || !formData.brand || !formData.category) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (isNaN(mrp) || mrp <= 0 || isNaN(sellingPrice) || sellingPrice <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter valid prices greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (isNaN(stockQty) || stockQty < 0 || isNaN(minStockLevel) || minStockLevel < 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter valid stock quantities\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const productData = {\n      name: formData.name,\n      brand: formData.brand,\n      category: formData.category,\n      mrp,\n      sellingPrice,\n      discount,\n      stockQty,\n      minStockLevel,\n      warehouseLocation: formData.warehouseLocation,\n      barcode: formData.barcode,\n      warranty: formData.warranty,\n      images: formData.images.filter(img => img.trim() !== \"\"),\n      modelCompatibility: formData.modelCompatibility.filter(m => m.trim() !== \"\"),\n      variants: formData.variants.filter(v => v.size || v.color),\n    };\n    \n    createProductMutation.mutate(productData);\n  };\n\n  const handleEditProduct = (product: any) => {\n    setSelectedProduct(product);\n    setFormData({\n      name: product.name || \"\",\n      brand: product.brand || \"\",\n      category: product.category || \"\",\n      mrp: product.mrp?.toString() || \"\",\n      sellingPrice: product.sellingPrice?.toString() || \"\",\n      discount: product.discount?.toString() || \"0\",\n      stockQty: product.stockQty?.toString() || \"\",\n      minStockLevel: product.minStockLevel?.toString() || \"\",\n      warehouseLocation: product.warehouseLocation || \"\",\n      barcode: product.barcode || \"\",\n      warranty: product.warranty || \"\",\n      images: (product.images && product.images.length > 0) ? product.images : [\"\"],\n      modelCompatibility: (product.modelCompatibility && product.modelCompatibility.length > 0) ? product.modelCompatibility : [\"\"],\n      variants: (product.variants && product.variants.length > 0) ? product.variants : [{ size: \"\", color: \"\" }],\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateProduct = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const mrp = parseFloat(formData.mrp);\n    const sellingPrice = parseFloat(formData.sellingPrice);\n    const discount = parseFloat(formData.discount) || 0;\n    const stockQty = parseInt(formData.stockQty);\n    const minStockLevel = parseInt(formData.minStockLevel);\n    \n    if (!formData.name || !formData.brand || !formData.category) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (isNaN(mrp) || mrp <= 0 || isNaN(sellingPrice) || sellingPrice <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter valid prices greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (isNaN(stockQty) || stockQty < 0 || isNaN(minStockLevel) || minStockLevel < 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter valid stock quantities\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (selectedProduct) {\n      const productData = {\n        name: formData.name,\n        brand: formData.brand,\n        category: formData.category,\n        mrp,\n        sellingPrice,\n        discount,\n        stockQty,\n        minStockLevel,\n        warehouseLocation: formData.warehouseLocation,\n        barcode: formData.barcode,\n        warranty: formData.warranty,\n        images: formData.images.filter(img => img.trim() !== \"\"),\n        modelCompatibility: formData.modelCompatibility.filter(m => m.trim() !== \"\"),\n        variants: formData.variants.filter(v => v.size || v.color),\n      };\n      \n      updateProductMutation.mutate({\n        id: selectedProduct._id,\n        data: productData,\n      });\n    }\n  };\n\n  const handleManageStock = (product: any) => {\n    setSelectedProduct(product);\n    setStockFormData({ quantity: \"\", type: \"IN\", reason: \"\" });\n    setIsStockDialogOpen(true);\n  };\n\n  const handleUpdateStock = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const quantity = parseInt(stockFormData.quantity);\n    \n    if (isNaN(quantity) || quantity <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid quantity greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!stockFormData.reason) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please provide a reason for the stock change\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (selectedProduct) {\n      updateStockMutation.mutate({\n        productId: selectedProduct._id,\n        type: stockFormData.type,\n        quantity,\n        reason: stockFormData.reason,\n      });\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const calculateDiscountPercentage = (mrp: number, sellingPrice: number) => {\n    if (mrp > sellingPrice) {\n      return Math.round(((mrp - sellingPrice) / mrp) * 100);\n    }\n    return 0;\n  };\n\n  const filteredProducts = products.filter((product: any) => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (product.barcode && product.barcode.includes(searchTerm));\n    const matchesCategory = categoryFilter === \"all\" || product.category === categoryFilter;\n    return matchesSearch && matchesCategory;\n  });\n\n  const categories = [\"all\", ...Array.from(new Set(products.map((p: any) => p.category)))];\n\n  const getStatusBadge = (status: string, stock: number) => {\n    switch (status) {\n      case \"in_stock\":\n        return <Badge variant=\"default\" data-testid={`status-in-stock`}>In Stock ({stock})</Badge>;\n      case \"low_stock\":\n        return <Badge variant=\"secondary\" data-testid={`status-low-stock`}>Low Stock ({stock})</Badge>;\n      case \"out_of_stock\":\n        return <Badge variant=\"destructive\" data-testid={`status-out-of-stock`}>Out of Stock</Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid={`status-${status}`}>{status}</Badge>;\n    }\n  };\n\n  const renderProductForm = (isEdit: boolean) => (\n    <form onSubmit={isEdit ? handleUpdateProduct : handleCreateProduct} className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"name\">Product Name *</Label>\n          <Input\n            id=\"name\"\n            value={formData.name}\n            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n            required\n            data-testid=\"input-product-name\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"brand\">Brand *</Label>\n          <Input\n            id=\"brand\"\n            value={formData.brand}\n            onChange={(e) => setFormData({ ...formData, brand: e.target.value })}\n            required\n            data-testid=\"input-product-brand\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"category\">Category *</Label>\n          <Input\n            id=\"category\"\n            value={formData.category}\n            onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n            required\n            placeholder=\"e.g., Engine Parts, Brakes\"\n            data-testid=\"input-product-category\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"barcode\">Barcode/QR Code</Label>\n          <div className=\"relative\">\n            <Barcode className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n            <Input\n              id=\"barcode\"\n              value={formData.barcode}\n              onChange={(e) => setFormData({ ...formData, barcode: e.target.value })}\n              className=\"pl-10\"\n              data-testid=\"input-product-barcode\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"mrp\">MRP *</Label>\n          <Input\n            id=\"mrp\"\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.mrp}\n            onChange={(e) => setFormData({ ...formData, mrp: e.target.value })}\n            required\n            data-testid=\"input-product-mrp\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"sellingPrice\">Selling Price *</Label>\n          <Input\n            id=\"sellingPrice\"\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.sellingPrice}\n            onChange={(e) => setFormData({ ...formData, sellingPrice: e.target.value })}\n            required\n            data-testid=\"input-product-sellingprice\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"discount\">Discount % (Auto-calculated)</Label>\n          <Input\n            id=\"discount\"\n            type=\"text\"\n            value={formData.mrp && formData.sellingPrice ? \n              `${calculateDiscountPercentage(parseFloat(formData.mrp), parseFloat(formData.sellingPrice))}%` : \n              '0%'\n            }\n            readOnly\n            className=\"bg-muted\"\n            data-testid=\"input-product-discount\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"stockQty\">Stock Quantity *</Label>\n          <Input\n            id=\"stockQty\"\n            type=\"number\"\n            value={formData.stockQty}\n            onChange={(e) => setFormData({ ...formData, stockQty: e.target.value })}\n            required\n            data-testid=\"input-product-stockqty\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"minStockLevel\">Min Stock Level *</Label>\n          <Input\n            id=\"minStockLevel\"\n            type=\"number\"\n            value={formData.minStockLevel}\n            onChange={(e) => setFormData({ ...formData, minStockLevel: e.target.value })}\n            required\n            data-testid=\"input-product-minstocklevel\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"warehouseLocation\">Warehouse Location</Label>\n          <Input\n            id=\"warehouseLocation\"\n            value={formData.warehouseLocation}\n            onChange={(e) => setFormData({ ...formData, warehouseLocation: e.target.value })}\n            data-testid=\"input-product-warehouse\"\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"warranty\">Warranty Information</Label>\n        <Input\n          id=\"warranty\"\n          value={formData.warranty}\n          onChange={(e) => setFormData({ ...formData, warranty: e.target.value })}\n          placeholder=\"e.g., 1 Year Manufacturer Warranty\"\n          data-testid=\"input-product-warranty\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label>Product Images</Label>\n        {formData.images.map((image, index) => (\n          <div key={index} className=\"flex gap-2\">\n            <Input\n              value={image}\n              onChange={(e) => updateImage(index, e.target.value)}\n              placeholder=\"Image URL\"\n              data-testid={`input-image-${index}`}\n            />\n            {formData.images.length > 1 && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => removeImage(index)}\n                data-testid={`button-remove-image-${index}`}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        ))}\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={addImage}\n          data-testid=\"button-add-image\"\n        >\n          <ImagePlus className=\"h-4 w-4 mr-2\" />\n          Add Image\n        </Button>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label>Model Compatibility</Label>\n        {formData.modelCompatibility.map((model, index) => (\n          <div key={index} className=\"flex gap-2\">\n            <Input\n              value={model}\n              onChange={(e) => updateModelCompat(index, e.target.value)}\n              placeholder=\"Compatible model\"\n              data-testid={`input-model-${index}`}\n            />\n            {formData.modelCompatibility.length > 1 && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => removeModelCompat(index)}\n                data-testid={`button-remove-model-${index}`}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        ))}\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={addModelCompat}\n          data-testid=\"button-add-model\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Model\n        </Button>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label>Product Variants</Label>\n        {formData.variants.map((variant, index) => (\n          <div key={index} className=\"flex gap-2\">\n            <Input\n              value={variant.size}\n              onChange={(e) => updateVariant(index, 'size', e.target.value)}\n              placeholder=\"Size\"\n              data-testid={`input-variant-size-${index}`}\n            />\n            <Input\n              value={variant.color}\n              onChange={(e) => updateVariant(index, 'color', e.target.value)}\n              placeholder=\"Color\"\n              data-testid={`input-variant-color-${index}`}\n            />\n            {formData.variants.length > 1 && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => removeVariant(index)}\n                data-testid={`button-remove-variant-${index}`}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        ))}\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={addVariant}\n          data-testid=\"button-add-variant\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Variant\n        </Button>\n      </div>\n\n      <div className=\"flex justify-end gap-2 pt-4\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() => {\n            isEdit ? setIsEditDialogOpen(false) : setIsCreateDialogOpen(false);\n            if (!isEdit) resetForm();\n          }}\n          data-testid=\"button-cancel-product\"\n        >\n          Cancel\n        </Button>\n        <Button \n          type=\"submit\" \n          disabled={isEdit ? updateProductMutation.isPending : createProductMutation.isPending}\n          data-testid=\"button-submit-product\"\n        >\n          {isEdit \n            ? (updateProductMutation.isPending ? 'Updating...' : 'Update Product')\n            : (createProductMutation.isPending ? 'Creating...' : 'Create Product')\n          }\n        </Button>\n      </div>\n    </form>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-64\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold\">Products & Inventory</h1>\n        <Card className=\"border-destructive\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <Package className=\"h-12 w-12 mx-auto text-destructive mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Failed to load products</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {(error as Error)?.message || 'An error occurred while fetching products'}\n              </p>\n              <Button onClick={() => refetch()}>Retry</Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Products & Inventory</h1>\n        <div className=\"flex gap-2\">\n          <input\n            type=\"file\"\n            id=\"import-products\"\n            accept=\".xlsx,.xls\"\n            onChange={handleImportProducts}\n            className=\"hidden\"\n          />\n          <Button\n            variant=\"outline\"\n            onClick={handleExportProducts}\n            disabled={products.length === 0}\n            data-testid=\"button-export\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={() => document.getElementById('import-products')?.click()}\n            data-testid=\"button-import\"\n          >\n            <Upload className=\"h-4 w-4 mr-2\" />\n            Import\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={() => deleteDuplicatesMutation.mutate()}\n            disabled={deleteDuplicatesMutation.isPending}\n            data-testid=\"button-delete-duplicates\"\n          >\n            <Copy className=\"h-4 w-4 mr-2\" />\n            Delete Duplicates\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-product\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Product\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Add New Product</DialogTitle>\n                <DialogDescription>\n                  Add a new product with specifications, images, and variants\n                </DialogDescription>\n              </DialogHeader>\n              {renderProductForm(false)}\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <div className=\"flex gap-4 flex-wrap\">\n        <div className=\"relative flex-1 min-w-[300px]\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search products by name, brand, or barcode...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search\"\n          />\n        </div>\n        <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n          <SelectTrigger className=\"w-[200px]\" data-testid=\"select-category\">\n            <SelectValue placeholder=\"Category\" />\n          </SelectTrigger>\n          <SelectContent>\n            {categories.map((cat: string) => (\n              <SelectItem key={cat} value={cat}>\n                {cat === \"all\" ? \"All Categories\" : cat}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {filteredProducts.length > 0 ? (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {filteredProducts.map((product: any) => {\n            const discountPercent = calculateDiscountPercentage(product.mrp, product.sellingPrice);\n            return (\n              <Card key={product._id} className=\"hover-elevate\" data-testid={`card-product-${product._id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{product.name}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{product.brand}</p>\n                      {product.barcode && (\n                        <p className=\"text-xs text-muted-foreground mt-1 flex items-center gap-1\">\n                          <Barcode className=\"h-3 w-3\" />\n                          {product.barcode}\n                        </p>\n                      )}\n                    </div>\n                    <Package className=\"h-5 w-5 text-muted-foreground\" />\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {product.images && product.images.length > 0 && product.images[0] ? (\n                    <div className=\"relative w-full h-40 bg-muted rounded-md overflow-hidden\">\n                      <img \n                        src={product.images[0]} \n                        alt={product.name}\n                        className=\"w-full h-full object-cover\"\n                        onError={(e) => {\n                          const target = e.target as HTMLImageElement;\n                          target.style.display = 'none';\n                          target.nextElementSibling?.classList.remove('hidden');\n                        }}\n                      />\n                      <div className=\"hidden absolute inset-0 flex items-center justify-center bg-muted\">\n                        <ImageIcon className=\"h-12 w-12 text-muted-foreground\" />\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"w-full h-40 bg-muted rounded-md flex items-center justify-center\">\n                      <ImageIcon className=\"h-12 w-12 text-muted-foreground\" />\n                    </div>\n                  )}\n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    <Badge variant=\"outline\" data-testid={`category-${product._id}`}>{product.category}</Badge>\n                    {getStatusBadge(product.status, product.stockQty)}\n                    {discountPercent > 0 && (\n                      <Badge variant=\"default\" className=\"bg-green-600\">\n                        {discountPercent}% OFF\n                      </Badge>\n                    )}\n                  </div>\n\n                  {product.warranty && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Warranty: {product.warranty}\n                    </p>\n                  )}\n\n                  {product.modelCompatibility && product.modelCompatibility.length > 0 && (\n                    <div className=\"text-xs\">\n                      <span className=\"text-muted-foreground\">Compatible: </span>\n                      <span>{product.modelCompatibility.slice(0, 2).join(', ')}</span>\n                      {product.modelCompatibility.length > 2 && <span> +{product.modelCompatibility.length - 2} more</span>}\n                    </div>\n                  )}\n\n                  {product.variants && product.variants.length > 0 && (\n                    <div className=\"text-xs\">\n                      <span className=\"text-muted-foreground\">Variants: </span>\n                      {product.variants.map((v: any, i: number) => (\n                        <Badge key={i} variant=\"outline\" className=\"mr-1\">\n                          {v.size && v.color ? `${v.size}/${v.color}` : v.size || v.color}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">MRP</p>\n                      <p className=\"text-sm line-through text-muted-foreground\">{formatCurrency(product.mrp)}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Selling Price</p>\n                      <p className=\"text-lg font-bold\">{formatCurrency(product.sellingPrice)}</p>\n                    </div>\n                  </div>\n\n                  {product.warehouseLocation && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Location: {product.warehouseLocation}\n                    </p>\n                  )}\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"flex-1\" \n                      onClick={() => handleEditProduct(product)}\n                      data-testid={`button-edit-${product._id}`}\n                    >\n                      Edit\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"flex-1\" \n                      onClick={() => handleManageStock(product)}\n                      data-testid={`button-stock-${product._id}`}\n                    >\n                      Manage Stock\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() => {\n                        setSelectedProduct(product);\n                        setIsDeleteDialogOpen(true);\n                      }}\n                      data-testid={`button-delete-${product._id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      ) : products.length > 0 ? (\n        <div className=\"text-center py-12\">\n          <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No products match your search criteria</p>\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No products found. Add your first product to get started.</p>\n        </div>\n      )}\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Product</DialogTitle>\n            <DialogDescription>\n              Update product information, specifications, and variants\n            </DialogDescription>\n          </DialogHeader>\n          {renderProductForm(true)}\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isStockDialogOpen} onOpenChange={setIsStockDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Manage Stock</DialogTitle>\n            <DialogDescription>\n              Update inventory for {selectedProduct?.name}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleUpdateStock} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"stock-type\">Transaction Type</Label>\n              <Select\n                value={stockFormData.type}\n                onValueChange={(value) => setStockFormData({ ...stockFormData, type: value })}\n              >\n                <SelectTrigger data-testid=\"select-stock-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"IN\">Stock In</SelectItem>\n                  <SelectItem value=\"OUT\">Stock Out</SelectItem>\n                  <SelectItem value=\"ADJUSTMENT\">Adjustment</SelectItem>\n                  <SelectItem value=\"RETURN\">Return</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"stock-quantity\">Quantity</Label>\n              <Input\n                id=\"stock-quantity\"\n                type=\"number\"\n                value={stockFormData.quantity}\n                onChange={(e) => setStockFormData({ ...stockFormData, quantity: e.target.value })}\n                required\n                data-testid=\"input-stock-quantity\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"stock-reason\">Reason</Label>\n              <Textarea\n                id=\"stock-reason\"\n                value={stockFormData.reason}\n                onChange={(e) => setStockFormData({ ...stockFormData, reason: e.target.value })}\n                required\n                data-testid=\"input-stock-reason\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsStockDialogOpen(false)}\n                data-testid=\"button-cancel-stock\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateStockMutation.isPending}\n                data-testid=\"button-submit-stock\"\n              >\n                {updateStockMutation.isPending ? 'Updating...' : 'Update Stock'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Product</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{selectedProduct?.name}\"? This action cannot be undone and will permanently remove this product from your inventory.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                if (selectedProduct) {\n                  deleteProductMutation.mutate(selectedProduct._id);\n                }\n              }}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":42756},"client/src/pages/Settings.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useAuth } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Settings as SettingsIcon, User, Bell, Lock, Palette, Loader2 } from 'lucide-react';\n\nconst profileSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Invalid email address'),\n  mobileNumber: z.string().min(10, 'Mobile number must be at least 10 digits'),\n  department: z.string().optional(),\n});\n\ntype ProfileData = z.infer<typeof profileSchema>;\n\ninterface ProfileResponse extends ProfileData {\n  role: string;\n  employeeId?: string;\n  joiningDate?: string;\n  photo?: string;\n}\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [pushNotifications, setPushNotifications] = useState(true);\n  const [orderAlerts, setOrderAlerts] = useState(true);\n  const [stockAlerts, setStockAlerts] = useState(true);\n\n  const { data: profileData, isLoading: isLoadingProfile } = useQuery<ProfileResponse>({\n    queryKey: ['/api/profile'],\n  });\n\n  const form = useForm<ProfileData>({\n    resolver: zodResolver(profileSchema),\n    values: profileData ? {\n      name: profileData.name || '',\n      email: profileData.email || '',\n      mobileNumber: profileData.mobileNumber || '',\n      department: profileData.department || '',\n    } : undefined,\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileData) => {\n      const response = await apiRequest('PUT', '/api/profile', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/profile'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      toast({\n        title: 'Profile updated',\n        description: 'Your profile settings have been updated successfully.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Update failed',\n        description: 'Failed to update profile. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSaveProfile = (data: ProfileData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handleSaveNotifications = () => {\n    toast({\n      title: 'Notifications updated',\n      description: 'Your notification preferences have been saved.',\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-6xl\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <SettingsIcon className=\"h-8 w-8\" />\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-title\">Settings</h1>\n      </div>\n\n      <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n        <TabsList data-testid=\"tabs-settings\">\n          <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">\n            <User className=\"h-4 w-4 mr-2\" />\n            Profile\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n            <Bell className=\"h-4 w-4 mr-2\" />\n            Notifications\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" data-testid=\"tab-security\">\n            <Lock className=\"h-4 w-4 mr-2\" />\n            Security\n          </TabsTrigger>\n          <TabsTrigger value=\"appearance\" data-testid=\"tab-appearance\">\n            <Palette className=\"h-4 w-4 mr-2\" />\n            Appearance\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"profile\" className=\"space-y-4\">\n          <Card data-testid=\"card-profile-settings\">\n            <CardHeader>\n              <CardTitle>Profile Information</CardTitle>\n              <CardDescription>\n                Update your personal information and contact details\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {isLoadingProfile ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                </div>\n              ) : (\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(handleSaveProfile)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel data-testid=\"label-name\">Full Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel data-testid=\"label-email\">Email</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"mobileNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel data-testid=\"label-phone\">Phone Number</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"tel\" data-testid=\"input-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"role\" data-testid=\"label-role\">Role</Label>\n                        <Input id=\"role\" value={profileData?.role || user?.role || ''} disabled className=\"bg-muted\" data-testid=\"input-role\" />\n                      </div>\n                      <FormField\n                        control={form.control}\n                        name=\"department\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel data-testid=\"label-department\">Department</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-department\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"employeeId\" data-testid=\"label-employee-id\">Employee ID</Label>\n                        <Input id=\"employeeId\" value={profileData?.employeeId || 'N/A'} disabled className=\"bg-muted\" data-testid=\"input-employee-id\" />\n                      </div>\n                    </div>\n                    <Button \n                      type=\"submit\" \n                      disabled={updateProfileMutation.isPending}\n                      data-testid=\"button-save-profile\"\n                    >\n                      {updateProfileMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                      Save Changes\n                    </Button>\n                  </form>\n                </Form>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\" className=\"space-y-4\">\n          <Card data-testid=\"card-notification-settings\">\n            <CardHeader>\n              <CardTitle>Notification Preferences</CardTitle>\n              <CardDescription>\n                Manage how you receive notifications and alerts\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label data-testid=\"label-email-notifications\">Email Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">Receive notifications via email</p>\n                </div>\n                <Switch\n                  checked={emailNotifications}\n                  onCheckedChange={setEmailNotifications}\n                  data-testid=\"switch-email-notifications\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label data-testid=\"label-push-notifications\">Push Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">Receive push notifications in browser</p>\n                </div>\n                <Switch\n                  checked={pushNotifications}\n                  onCheckedChange={setPushNotifications}\n                  data-testid=\"switch-push-notifications\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label data-testid=\"label-order-alerts\">Order Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">Get notified about new orders</p>\n                </div>\n                <Switch\n                  checked={orderAlerts}\n                  onCheckedChange={setOrderAlerts}\n                  data-testid=\"switch-order-alerts\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label data-testid=\"label-stock-alerts\">Low Stock Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">Get notified when stock is low</p>\n                </div>\n                <Switch\n                  checked={stockAlerts}\n                  onCheckedChange={setStockAlerts}\n                  data-testid=\"switch-stock-alerts\"\n                />\n              </div>\n              <Button onClick={handleSaveNotifications} data-testid=\"button-save-notifications\">\n                Save Preferences\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-4\">\n          <Card data-testid=\"card-security-settings\">\n            <CardHeader>\n              <CardTitle>Security Settings</CardTitle>\n              <CardDescription>\n                Manage your password and security preferences\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"current-password\" data-testid=\"label-current-password\">Current Password</Label>\n                <Input id=\"current-password\" type=\"password\" data-testid=\"input-current-password\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"new-password\" data-testid=\"label-new-password\">New Password</Label>\n                <Input id=\"new-password\" type=\"password\" data-testid=\"input-new-password\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirm-password\" data-testid=\"label-confirm-password\">Confirm New Password</Label>\n                <Input id=\"confirm-password\" type=\"password\" data-testid=\"input-confirm-password\" />\n              </div>\n              <Button data-testid=\"button-change-password\">Change Password</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"appearance\" className=\"space-y-4\">\n          <Card data-testid=\"card-appearance-settings\">\n            <CardHeader>\n              <CardTitle>Appearance</CardTitle>\n              <CardDescription>\n                Customize the look and feel of your dashboard\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label data-testid=\"label-theme\">Theme</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Use the theme toggle in the header to switch between light and dark mode\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":13530},"server/models/ActivityLog.ts":{"content":"import mongoose from 'mongoose';\n\nconst activityLogSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  userName: { type: String, required: true },\n  userRole: { type: String, required: true },\n  action: { \n    type: String, \n    enum: [\n      'create', 'update', 'delete', \n      'login', 'logout',\n      'approve', 'reject', 'complete',\n      'other'\n    ],\n    required: true \n  },\n  resource: { \n    type: String,\n    enum: [\n      'product', 'order', 'customer', 'employee', \n      'inventory', 'supplier', 'purchase_order',\n      'service_visit', 'attendance', 'leave', 'task',\n      'communication', 'feedback', 'user',\n      'other'\n    ],\n    required: true \n  },\n  resourceId: { type: mongoose.Schema.Types.ObjectId },\n  description: { type: String, required: true },\n  details: { type: mongoose.Schema.Types.Mixed },\n  ipAddress: { type: String },\n}, { timestamps: true });\n\nactivityLogSchema.index({ userId: 1, createdAt: -1 });\nactivityLogSchema.index({ userRole: 1, createdAt: -1 });\nactivityLogSchema.index({ resource: 1, createdAt: -1 });\nactivityLogSchema.index({ createdAt: -1 });\n\nexport const ActivityLog = mongoose.models.ActivityLog || mongoose.model('ActivityLog', activityLogSchema);\n","size_bytes":1269},"server/models/Coupon.ts":{"content":"import mongoose from 'mongoose';\n\nconst couponSchema = new mongoose.Schema({\n  code: { type: String, required: true, unique: true, uppercase: true },\n  description: { type: String },\n  \n  // Discount details\n  discountType: { \n    type: String, \n    enum: ['percentage', 'fixed'],\n    required: true \n  },\n  discountValue: { type: Number, required: true },\n  \n  // Usage limits\n  maxUses: { type: Number, default: 0 }, // 0 means unlimited\n  usedCount: { type: Number, default: 0 },\n  maxUsesPerCustomer: { type: Number, default: 1 },\n  \n  // Validity\n  validFrom: { type: Date, required: true },\n  validUntil: { type: Date, required: true },\n  \n  // Conditions\n  minPurchaseAmount: { type: Number, default: 0 },\n  maxDiscountAmount: { type: Number }, // For percentage discounts\n  applicableOn: { \n    type: String, \n    enum: ['all', 'products', 'services'],\n    default: 'all'\n  },\n  \n  // Status\n  isActive: { type: Boolean, default: true },\n  \n  // Tracking\n  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  usageHistory: [{\n    invoiceId: { type: mongoose.Schema.Types.ObjectId, ref: 'Invoice' },\n    customerId: { type: mongoose.Schema.Types.ObjectId, ref: 'RegistrationCustomer' },\n    usedAt: { type: Date, default: Date.now },\n    discountApplied: { type: Number },\n  }],\n  \n}, { timestamps: true });\n\n// Method to validate coupon\ncouponSchema.methods.isValid = function(customerId?: string, purchaseAmount?: number) {\n  const now = new Date();\n  \n  // Check if active\n  if (!this.isActive) {\n    return { valid: false, reason: 'Coupon is inactive' };\n  }\n  \n  // Check validity period\n  if (now < this.validFrom) {\n    return { valid: false, reason: 'Coupon not yet valid' };\n  }\n  if (now > this.validUntil) {\n    return { valid: false, reason: 'Coupon has expired' };\n  }\n  \n  // Check max uses\n  if (this.maxUses > 0 && this.usedCount >= this.maxUses) {\n    return { valid: false, reason: 'Coupon usage limit reached' };\n  }\n  \n  // Check customer usage\n  if (customerId && this.maxUsesPerCustomer > 0) {\n    const customerUsage = this.usageHistory.filter(\n      (h: any) => h.customerId?.toString() === customerId\n    ).length;\n    \n    if (customerUsage >= this.maxUsesPerCustomer) {\n      return { valid: false, reason: 'Coupon usage limit reached for this customer' };\n    }\n  }\n  \n  // Check minimum purchase amount\n  if (purchaseAmount !== undefined && purchaseAmount < this.minPurchaseAmount) {\n    return { valid: false, reason: `Minimum purchase amount of ₹${this.minPurchaseAmount} required` };\n  }\n  \n  return { valid: true };\n};\n\n// Method to calculate discount\ncouponSchema.methods.calculateDiscount = function(amount: number) {\n  if (this.discountType === 'percentage') {\n    let discount = (amount * this.discountValue) / 100;\n    if (this.maxDiscountAmount && discount > this.maxDiscountAmount) {\n      discount = this.maxDiscountAmount;\n    }\n    return discount;\n  } else {\n    return Math.min(this.discountValue, amount);\n  }\n};\n\nexport const Coupon = mongoose.models.Coupon || mongoose.model('Coupon', couponSchema);\n","size_bytes":3073},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport { User } from './models/User';\nimport { OTP } from './models/OTP';\nimport { sendRoleOTP, sendWhatsAppOTP, generateOTP } from './services/whatsapp';\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport async function createUser(email: string, password: string, name: string, role: string, mobileNumber: string) {\n  const passwordHash = await hashPassword(password);\n  return User.create({\n    email,\n    passwordHash,\n    name,\n    role,\n    mobileNumber,\n    isActive: true\n  });\n}\n\nexport async function authenticateUser(email: string, password: string) {\n  const user = await User.findOne({ email, isActive: true });\n  if (!user) {\n    return null;\n  }\n  \n  const isValid = await verifyPassword(password, user.passwordHash);\n  if (!isValid) {\n    return null;\n  }\n  \n  return user;\n}\n\nexport const ROLE_PERMISSIONS = {\n  Admin: {\n    products: ['read', 'create', 'update', 'delete'],\n    inventory: ['read', 'create', 'update', 'delete'],\n    employees: ['read', 'create', 'update', 'delete'],\n    customers: ['read', 'create', 'update', 'delete'],\n    orders: ['read', 'create', 'update', 'delete'],\n    invoices: ['read', 'create', 'update', 'delete', 'approve', 'reject'],\n    coupons: ['read', 'create', 'update', 'delete'],\n    warranties: ['read', 'create', 'update', 'delete'],\n    reports: ['read'],\n    notifications: ['read', 'update'],\n    users: ['read', 'create', 'update', 'delete'],\n    suppliers: ['read', 'create', 'update', 'delete'],\n    purchaseOrders: ['read', 'create', 'update', 'delete'],\n    attendance: ['read', 'create', 'update', 'delete'],\n    leaves: ['read', 'create', 'update', 'delete'],\n    tasks: ['read', 'create', 'update', 'delete'],\n    communications: ['read', 'create', 'update', 'delete'],\n    feedbacks: ['read', 'create', 'update', 'delete'],\n    supportTickets: ['read', 'create', 'update', 'delete'],\n  },\n  Manager: {\n    products: ['read', 'create', 'update', 'delete'],\n    inventory: ['read', 'create', 'update', 'delete'],\n    employees: ['read', 'create', 'update', 'delete'],\n    customers: ['read', 'create', 'update', 'delete'],\n    orders: ['read', 'create', 'update', 'delete'],\n    invoices: ['read', 'create', 'update', 'delete', 'approve', 'reject'],\n    coupons: ['read', 'create', 'update', 'delete'],\n    warranties: ['read', 'create', 'update', 'delete'],\n    reports: ['read'],\n    notifications: ['read', 'update'],\n    users: ['read', 'create', 'update', 'delete'],\n    suppliers: ['read', 'create', 'update', 'delete'],\n    purchaseOrders: ['read', 'create', 'update', 'delete'],\n    attendance: ['read', 'create', 'update', 'delete'],\n    leaves: ['read', 'create', 'update', 'delete'],\n    tasks: ['read', 'create', 'update', 'delete'],\n    communications: ['read', 'create', 'update', 'delete'],\n    feedbacks: ['read', 'create', 'update', 'delete'],\n    supportTickets: ['read', 'create', 'update', 'delete'],\n  },\n  'Inventory Manager': {\n    products: ['read', 'create', 'update', 'delete'],\n    inventory: ['read', 'create', 'update', 'delete'],\n    orders: ['read', 'create', 'update', 'delete'],\n  },\n  'Sales Executive': {\n    customers: ['read', 'create', 'update', 'delete'],\n    orders: ['read', 'create', 'update', 'delete'],\n    invoices: ['read', 'create'],\n    warranties: ['read', 'create'],\n  },\n  'HR Manager': {\n    employees: ['read', 'create', 'update', 'delete'],\n    attendance: ['read', 'create', 'update', 'delete'],\n    tasks: ['read', 'create', 'update', 'delete'],\n    leaves: ['read', 'create', 'update', 'delete'],\n    users: ['read', 'create', 'update', 'delete'],\n  },\n  'Service Staff': {\n    supportTickets: ['read', 'create', 'update'],\n    feedbacks: ['read', 'create'],\n  },\n};\n\nexport function hasPermission(userRole: string, resource: string, action: string): boolean {\n  const permissions = ROLE_PERMISSIONS[userRole as keyof typeof ROLE_PERMISSIONS];\n  if (!permissions) return false;\n  \n  const resourcePermissions = permissions[resource as keyof typeof permissions] as string[] | undefined;\n  if (!resourcePermissions) return false;\n  \n  return resourcePermissions.includes(action);\n}\n\nexport async function sendOTPToMobile(mobileNumber: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    const otp = generateOTP();\n    const expiresAt = new Date(Date.now() + 10 * 60 * 1000);\n\n    await OTP.deleteMany({ mobileNumber, verified: false });\n\n    await OTP.create({\n      mobileNumber,\n      otp,\n      expiresAt,\n      verified: false,\n      attempts: 0,\n    });\n\n    const result = await sendRoleOTP({ to: mobileNumber, otp });\n\n    if (result.success) {\n      return { success: true };\n    } else {\n      return { success: false, error: result.error || 'Failed to send OTP' };\n    }\n  } catch (error) {\n    console.error('Error sending OTP:', error);\n    return { success: false, error: 'Failed to send OTP' };\n  }\n}\n\nexport async function verifyOTP(mobileNumber: string, otp: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    const otpRecord = await OTP.findOne({\n      mobileNumber,\n      verified: false,\n      expiresAt: { $gt: new Date() },\n    }).sort({ createdAt: -1 });\n\n    if (!otpRecord) {\n      return { success: false, error: 'Invalid or expired OTP' };\n    }\n\n    if (otpRecord.attempts >= 3) {\n      return { success: false, error: 'Maximum verification attempts exceeded' };\n    }\n\n    if (otpRecord.otp !== otp) {\n      otpRecord.attempts += 1;\n      await otpRecord.save();\n      return { success: false, error: 'Invalid OTP' };\n    }\n\n    otpRecord.verified = true;\n    await otpRecord.save();\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    return { success: false, error: 'Failed to verify OTP' };\n  }\n}\n\nexport async function sendEmployeeOTP(mobileNumber: string, purpose: 'employee_verification' | 'phone_update' = 'employee_verification'): Promise<{ success: boolean; error?: string }> {\n  try {\n    const otp = generateOTP();\n    const expiresAt = new Date(Date.now() + 10 * 60 * 1000);\n\n    await OTP.deleteMany({ mobileNumber, purpose, verified: false });\n\n    await OTP.create({\n      mobileNumber,\n      otp,\n      purpose,\n      expiresAt,\n      verified: false,\n      attempts: 0,\n    });\n\n    const result = await sendWhatsAppOTP({ to: mobileNumber, otp });\n\n    if (result.success) {\n      return { success: true };\n    } else {\n      return { success: false, error: result.error || 'Failed to send OTP' };\n    }\n  } catch (error) {\n    console.error('Error sending employee OTP:', error);\n    return { success: false, error: 'Failed to send OTP' };\n  }\n}\n\nexport async function verifyEmployeeOTP(mobileNumber: string, otp: string, purpose: 'employee_verification' | 'phone_update' = 'employee_verification'): Promise<{ success: boolean; error?: string }> {\n  try {\n    const otpRecord = await OTP.findOne({\n      mobileNumber,\n      purpose,\n      verified: false,\n      expiresAt: { $gt: new Date() },\n    }).sort({ createdAt: -1 });\n\n    if (!otpRecord) {\n      return { success: false, error: 'Invalid or expired OTP' };\n    }\n\n    if (otpRecord.attempts >= 3) {\n      return { success: false, error: 'Maximum verification attempts exceeded' };\n    }\n\n    if (otpRecord.otp !== otp) {\n      otpRecord.attempts += 1;\n      await otpRecord.save();\n      return { success: false, error: 'Invalid OTP' };\n    }\n\n    otpRecord.verified = true;\n    await otpRecord.save();\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error verifying employee OTP:', error);\n    return { success: false, error: 'Failed to verify OTP' };\n  }\n}\n","size_bytes":7828},"replit.md":{"content":"# Mauli Car World - AutoCRM\n\n## Overview\nMauli Car World is a comprehensive CRM system designed to manage car service operations across multiple locations. Its core purpose is to streamline customer and vehicle registration, service visit tracking, inventory management, employee administration (attendance, leaves, tasks), and order processing with invoicing. The system includes robust analytics, reporting, and a support ticket system. A key capability is its integration with WhatsApp for OTPs and customer notifications, aiming to enhance communication and operational efficiency for car service businesses.\n\n## User Preferences\n- Project uses MongoDB (not in-memory storage)\n- WhatsApp integration for OTP and customer notifications\n- Multi-shop support with role-based access control\n\n## System Architecture\nThe application follows a client-server architecture.\n- **Frontend**: Developed with React, Vite, TypeScript, TailwindCSS, and shadcn/ui. The UI/UX is designed with role-based dashboards, providing tailored views for different user roles (Admin, Manager, HR Manager, Inventory Manager, Sales Executive, Service Staff). These dashboards feature role-specific KPIs and content, such as service-related metrics for Sales Executives and support ticket metrics for Service Staff.\n- **Backend**: Built using Node.js and Express with TypeScript. It exposes RESTful API endpoints for managing various entities and includes business logic for services like WhatsApp integration and PDF generation.\n- **Database**: MongoDB Atlas is used for persistent data storage.\n- **Authentication**: Passport.js is employed for authentication, utilizing OTP via WhatsApp.\n- **Role-Based Access Control (RBAC)**: Comprehensive RBAC is implemented, ensuring least-privilege access. This includes permission-based sidebar navigation filtering and role-specific dashboard statistics.\n- **Key Features**:\n    - Shop-based multi-location management.\n    - Customer and vehicle registration.\n    - Multi-stage service visit tracking.\n    - Inventory management with low stock alerts and Excel import/export.\n    - Employee management (attendance, leaves, task assignment).\n    - Order processing with invoice generation and WhatsApp delivery.\n    - Daily email reports.\n    - Analytics and reporting capabilities.\n    - Support ticket system with full CRUD operations.\n    - Robust error logging and cache invalidation strategies for data consistency.\n    - PDF generation for invoices with smart page breaks and accurate currency display.\n\n## External Dependencies\n- **Database**: MongoDB Atlas\n- **Authentication**: Passport.js\n- **Messaging**: WhatsApp Business API (for OTP, customer notifications, and invoice delivery)\n- **Frontend Libraries**: React, Vite, TailwindCSS, shadcn/ui\n- **Backend Libraries**: Node.js, Express, Mongoose","size_bytes":2824},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    // Skip API routes\n    if (url.startsWith('/api/')) {\n      return next();\n    }\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2349},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/pages/Login.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { ArrowLeft } from 'lucide-react';\nimport logoImage from '@assets/image_1760164042662.png';\n\nexport default function Login() {\n  const [location, setLocation] = useLocation();\n  const { login, verifyOTP } = useAuth();\n  const { toast } = useToast();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedRole, setSelectedRole] = useState('');\n  const [step, setStep] = useState<'credentials' | 'otp'>('credentials');\n  const [otpInput, setOtpInput] = useState('');\n  const [maskedMobile, setMaskedMobile] = useState('');\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const role = params.get('role');\n    if (role) {\n      setSelectedRole(role);\n    }\n  }, [location]);\n\n  const handleCredentialsSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ email, password, selectedRole }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Login failed');\n      }\n\n      if (data.requireOTP) {\n        const mobile = data.mobileNumber;\n        const masked = mobile.replace(/(\\d{2})(\\d+)(\\d{2})/, '$1******$3');\n        setMaskedMobile(masked);\n        setStep('otp');\n        toast({\n          title: 'OTP Sent',\n          description: `OTP sent to your registered WhatsApp number ending in ${mobile.slice(-4)}`,\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Login Failed',\n        description: error.message || 'Invalid email or password',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOtpSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await verifyOTP(otpInput);\n      toast({\n        title: 'Login successful',\n        description: 'Welcome back!',\n      });\n      setLocation('/');\n    } catch (error: any) {\n      toast({\n        title: 'Verification failed',\n        description: error.message || 'Invalid OTP. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\" data-testid=\"card-login\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center gap-2\">\n              <img src={logoImage} alt=\"Mauli Car World Logo\" className=\"h-8 w-auto\" />\n              <CardTitle data-testid=\"text-title\">Mauli Car World</CardTitle>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation('/select-role')}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-1\" />\n              Back\n            </Button>\n          </div>\n          <CardDescription data-testid=\"text-description\">\n            {selectedRole ? `Sign in as ${selectedRole}` : 'Sign in to access your dashboard'}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {step === 'credentials' ? (\n            <form onSubmit={handleCredentialsSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" data-testid=\"label-email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"admin@maulicarworld.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"password\" data-testid=\"label-password\">Password</Label>\n                  <button\n                    type=\"button\"\n                    onClick={() => setLocation(`/forgot-password?role=${encodeURIComponent(selectedRole)}`)}\n                    className=\"text-sm text-orange-600 dark:text-orange-400 hover:underline\"\n                    data-testid=\"link-forgot-password\"\n                  >\n                    Forgot Password?\n                  </button>\n                </div>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? 'Verifying credentials...' : 'Continue'}\n              </Button>\n              <p className=\"text-sm text-center text-muted-foreground\" data-testid=\"text-info\">\n                OTP will be sent to your registered WhatsApp number\n              </p>\n            </form>\n          ) : (\n            <form onSubmit={handleOtpSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"otp\" data-testid=\"label-otp\">Enter OTP</Label>\n                <Input\n                  id=\"otp\"\n                  type=\"text\"\n                  maxLength={6}\n                  value={otpInput}\n                  onChange={(e) => setOtpInput(e.target.value)}\n                  placeholder=\"Enter 6-digit OTP\"\n                  className=\"text-center text-2xl tracking-widest\"\n                  required\n                  data-testid=\"input-otp-login\"\n                />\n                <p className=\"text-sm text-center text-muted-foreground\" data-testid=\"text-otp-info\">\n                  OTP sent to your registered WhatsApp number {maskedMobile}\n                </p>\n                <p className=\"text-xs text-center text-orange-600 dark:text-orange-400\" data-testid=\"text-whatsapp-info\">\n                  Check your WhatsApp for the OTP message\n                </p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setStep('credentials');\n                    setOtpInput('');\n                    setMaskedMobile('');\n                  }}\n                  className=\"w-full\"\n                  data-testid=\"button-back-to-credentials\"\n                >\n                  Back\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isLoading || otpInput.length !== 6}\n                  data-testid=\"button-verify-otp\"\n                >\n                  {isLoading ? 'Verifying...' : 'Verify & Sign In'}\n                </Button>\n              </div>\n            </form>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7828},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ServiceWorkflowCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge } from \"./StatusBadge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Clock, Package, IndianRupee, FileText, Eye, Edit } from \"lucide-react\";\n\ninterface ServiceWorkflowCardProps {\n  customerName: string;\n  vehicleReg: string;\n  status: \"inquired\" | \"working\" | \"waiting\" | \"completed\";\n  handlers: string[];\n  startTime: string;\n  totalAmount?: number;\n  partsCount?: number;\n  notes?: string;\n  onView?: () => void;\n  onEdit?: () => void;\n}\n\nexport function ServiceWorkflowCard({\n  customerName,\n  vehicleReg,\n  status,\n  handlers,\n  startTime,\n  totalAmount,\n  partsCount,\n  notes,\n  onView,\n  onEdit,\n}: ServiceWorkflowCardProps) {\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  const getPhaseBackgroundColor = (status: string) => {\n    switch (status) {\n      case \"inquired\":\n        return \"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-900/50\";\n      case \"working\":\n        return \"bg-amber-50 dark:bg-amber-950/20 border-amber-200 dark:border-amber-900/50\";\n      case \"waiting\":\n        return \"bg-purple-50 dark:bg-purple-950/20 border-purple-200 dark:border-purple-900/50\";\n      case \"completed\":\n        return \"bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-900/50\";\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <Card className={`hover-elevate ${getPhaseBackgroundColor(status)}`} data-testid={`service-card-${vehicleReg}`}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <div className=\"min-w-0 flex-1\">\n            <CardTitle className=\"text-base font-semibold\">{customerName}</CardTitle>\n            <p className=\"text-sm text-muted-foreground font-mono mt-2\">{vehicleReg}</p>\n          </div>\n          <StatusBadge type=\"service\" status={status} />\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0 space-y-4\">\n        <div className=\"space-y-2\">\n          <p className=\"text-xs text-muted-foreground\">\n            {handlers?.length > 0 ? `Handler${handlers.length > 1 ? 's' : ''}` : 'No handlers assigned'}\n          </p>\n          {handlers?.length > 0 ? (\n            <div className=\"flex flex-wrap gap-2\">\n              {handlers.map((handler, index) => (\n                <div key={index} className=\"flex items-center gap-2\">\n                  <Avatar className=\"h-6 w-6\">\n                    <AvatarFallback className=\"bg-primary/10 text-primary text-xs\">\n                      {getInitials(handler)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <p className=\"text-xs font-medium\">{handler}</p>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-xs text-muted-foreground italic\">Unassigned</p>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n            <div className=\"min-w-0\">\n              <p className=\"text-xs text-muted-foreground truncate\">{startTime}</p>\n            </div>\n          </div>\n          \n          {partsCount !== undefined && partsCount > 0 && (\n            <div className=\"flex items-center gap-2\">\n              <Package className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n              <div className=\"min-w-0\">\n                <p className=\"text-xs text-muted-foreground\">{partsCount} parts</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {totalAmount !== undefined && totalAmount > 0 && (\n          <div className=\"flex items-center gap-2 pt-2 border-t\">\n            <IndianRupee className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-semibold\">{formatCurrency(totalAmount)}</p>\n            </div>\n          </div>\n        )}\n\n        {notes && (\n          <div className=\"flex items-start gap-2 pt-2 border-t\">\n            <FileText className=\"h-4 w-4 text-muted-foreground flex-shrink-0 mt-0.5\" />\n            <p className=\"text-xs text-muted-foreground line-clamp-2 flex-1\">{notes}</p>\n          </div>\n        )}\n\n        <div className=\"flex gap-2 pt-3\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"flex-1\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onView?.();\n            }}\n            data-testid={`button-view-${vehicleReg}`}\n          >\n            <Eye className=\"h-3.5 w-3.5 mr-1.5\" />\n            View Details\n          </Button>\n          <Button \n            variant=\"default\" \n            size=\"sm\" \n            className=\"flex-1\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onEdit?.();\n            }}\n            data-testid={`button-edit-${vehicleReg}`}\n          >\n            <Edit className=\"h-3.5 w-3.5 mr-1.5\" />\n            Edit\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5500},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/models/RegistrationCustomer.ts":{"content":"import mongoose from 'mongoose';\n\nconst registrationCustomerSchema = new mongoose.Schema({\n  referenceCode: { type: String, required: true, unique: true },\n  fullName: { type: String, required: true },\n  mobileNumber: { type: String, required: true, unique: true },\n  alternativeNumber: { type: String, default: null },\n  email: { type: String, required: true },\n  address: { type: String, required: true },\n  city: { type: String, required: true },\n  taluka: { type: String, required: true },\n  district: { type: String, required: true },\n  state: { type: String, required: true },\n  pinCode: { type: String, required: true },\n  referralSource: { type: String, default: null },\n  isVerified: { type: Boolean, default: false },\n  otp: { type: String, default: null },\n  otpExpiresAt: { type: Date, default: null },\n  registeredBy: { type: String, default: null },\n  registeredByRole: { type: String, default: null },\n}, { timestamps: true });\n\nexport const RegistrationCustomer = mongoose.models.RegistrationCustomer || mongoose.model('RegistrationCustomer', registrationCustomerSchema);\n","size_bytes":1088},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420}},"version":2}